{
  "runId": "ndjc-1761396686355-181234f47c4e",
  "stage": "phase2",
  "kind": "checked",
  "data": {
    "metadata": {
      "NDJC:BUILD_META:RUNID": "run_20231025_001",
      "template": "circle-basic",
      "appName": "Social Circle",
      "packageId": "com.example.socialapp",
      "mode": "A",
      "runId": "run_20231025_001"
    },
    "anchorsGrouped": {
      "text": {
        "NDJC:PACKAGE_NAME": "com.example.socialapp",
        "NDJC:APP_LABEL": "Social Circle",
        "NDJC:HOME_TITLE": "Home",
        "NDJC:PRIMARY_BUTTON_TEXT": "Post",
        "NDJC:THEME_NAME": "Light",
        "NDJC:DARK_MODE": "true",
        "NDJC:FONT_FAMILY_PRIMARY": "Roboto",
        "NDJC:FONT_FAMILY_SECONDARY": "Sans Serif",
        "NDJC:I18N_ENABLED": "true",
        "NDJC:ANIM_ENABLED": "true",
        "NDJC:ANIM_DURATION_MS": "300",
        "NDJC:LAYOUT_DENSITY": "mdpi",
        "NDJC:DATA_SOURCE": "https://api.example.com",
        "NDJC:SEED_ENABLED": "false",
        "NDJC:FEED_SORT": "newest",
        "NDJC:PAGING_SIZE": "20",
        "NDJC:OFFLINE_POLICY": "cache",
        "NDJC:PRIVACY_POLICY": "https://example.com/privacy",
        "NDJC:DRAFT_ENABLED": "true",
        "NDJC:USE_APP_BUNDLE": "false",
        "NDJC:BUILD_META:RUNID": "run_20231025_001",
        "NDJC:FEATURE_TOGGLE:MIN": "0",
        "NDJC:DEBUG_LOG_ENABLED": "false",
        "NDJC:LOG_LEVEL": "INFO",
        "NDJC:CRASHLYTICS_ENABLED": "true",
        "NDJC:EXPERIMENT_BUCKET": "A",
        "NDJC:THEME_COLORS": {
          "primary": "#7C3AED",
          "secondary": "#10B981"
        },
        "NDJC:TYPOCASE_OVERRIDES": "",
        "NDJC:STRINGS_EXTRA": {},
        "NDJC:ROUTE_HOME": "home",
        "NDJC:ROUTE_DETAIL": "post_detail",
        "NDJC:ENABLE_POSTING": "true",
        "NDJC:ENABLE_COMMENTS": "true",
        "NDJC:ENABLE_LIKES": "true",
        "NDJC:PROFILE_EDIT_ENABLED": "true",
        "NDJC:NOTIFICATIONS_ENABLED": "true"
      },
      "list": {
        "LIST:ROUTES": [
          "home",
          "profile",
          "post_detail"
        ],
        "LIST:DEPENDENCY_SNIPPETS": [],
        "LIST:PROGUARD_EXTRA": [],
        "LIST:PACKAGING_RULES": [],
        "LIST:POST_FIELDS": [],
        "LIST:PLURAL_STRINGS": [],
        "LIST:COMPONENT_STYLES": [],
        "LIST:DEEPLINK_PATTERNS": [],
        "LIST:NETWORK_CLEAR_TEXT": [],
        "LIST:RES_CONFIGS_OVERRIDE": [],
        "LIST:COMMENT_FIELDS": [],
        "LIST:FEED_QUERY_PARAMS": [],
        "LIST:PROFILE_FIELDS": [],
        "LIST:NOTIFICATION_TYPES": [],
        "LIST:UPLOAD_MIME_TYPES": []
      },
      "if": {
        "IF:NAV_TRANSITIONS": true,
        "IF:BUILD_SUMMARY": false,
        "IF:NATIVE_SPLITS": false,
        "IF:AFTER_BUILD": false,
        "IF:PRE_COMMIT": false,
        "IF:AFTER_INSTALL": false,
        "IF:BEFORE_BUILD": false,
        "IF:POST_INJECT": false,
        "IF:BEFORE_BUNDLE": false,
        "IF:AFTER_BUNDLE": false,
        "IF:ENABLE_POSTING": true,
        "IF:ENABLE_COMMENTS": true,
        "IF:ENABLE_LIKES": true,
        "IF:REQUIRE_LOGIN": true,
        "IF:SHOW_NOTIFICATIONS": true
      },
      "gradle": {
        "applicationId": "com.example.socialapp",
        "resConfigs": [
          "en",
          "zh-rCN"
        ],
        "permissions": [
          "android.permission.INTERNET",
          "android.permission.ACCESS_NETWORK_STATE"
        ]
      },
      "block": {
        "BLOCK:HOME_HEADER": "@Composable fun HomeHeader(){ Column{ Text(\\\"Social Circle\\\", style=MaterialTheme.typography.h4); Spacer(Modifier.height(8.dp)) } }",
        "BLOCK:HOME_BODY": "@Composable fun HomeBody(posts: List<Post>){ LazyColumn{ items(posts){ post-> PostCard(post) } } }",
        "BLOCK:HOME_ACTIONS": "@Composable fun HomeActions(onPostClick:()->Unit){ Row{ Button(onClick=onPostClick){ Text(\\\"Post\\\") } } }",
        "BLOCK:SPLASH_CONTENT": "@Composable fun SplashScreen(){ Box(Modifier.fillMaxSize(), contentAlignment=Alignment.Center){ CircularProgressIndicator() } }",
        "BLOCK:EMPTY_STATE": "@Composable fun EmptyState(){ Column(Modifier.fillMaxSize(), horizontalAlignment=Alignment.CenterHorizontally, verticalArrangement=Arrangement.Center){ Icon(Icons.Default.Inbox, contentDescription=null); Text(\\\"No content yet\\\") } }",
        "BLOCK:ERROR_STATE": "@Composable fun ErrorState(message:String, onRetry:()->Unit){ Column(Modifier.fillMaxSize(), horizontalAlignment=Alignment.CenterHorizontally, verticalArrangement=Arrangement.Center){ Text(message, color=Color.Red); Spacer(Modifier.height(8.dp)); Button(onClick=onRetry){ Text(\\\"Retry\\\") } } }",
        "BLOCK:DEBUG_PANEL": "@Composable fun DebugPanel(info:String){ Box(Modifier.fillMaxWidth().background(Color.LightGray).padding(4.dp)){ Text(info, style=MaterialTheme.typography.caption) } }",
        "BLOCK:HEADER_AD_SLOT": "@Composable fun HeaderAdSlot(){ // Placeholder for ad network integration\\n Box(Modifier.height(50.dp).fillMaxWidth()){ Text(\\\"Ad\\\") } }",
        "BLOCK:USER_PROFILE_CARD": "@Composable fun UserProfileCard(user:User){ Card{ Column(Modifier.padding(8.dp)){ Text(user.name, style=MaterialTheme.typography.h6); Text(user.bio, style=MaterialTheme.typography.body2) } } }",
        "BLOCK:SPONSORED_CARD": "@Composable fun SponsoredCard(content:String){ Card(backgroundColor=Color.Yellow){ Text(content, Modifier.padding(8.dp)) } }",
        "BLOCK:PROFILE_SECTION": "@Composable fun ProfileSection(){ Column{ Text(\\\"Profile\\\", style=MaterialTheme.typography.h5); // ... } }",
        "BLOCK:SETTINGS_SECTION": "@Composable fun SettingsSection(){ Column{ Text(\\\"Settings\\\", style=MaterialTheme.typography.h5); // ... } }",
        "BLOCK:SETTINGS_SECTION:EXTRA": "@Composable fun SettingsExtra(){ Row{ Switch(checked=true, onCheckedChange={}) Text(\\\"Extra setting\\\") } }",
        "BLOCK:POST_COMPOSER": "@Composable fun PostComposer(onSubmit:(String)->Unit){ var text by remember{ mutableStateOf(\\\"\\\") }; Column{ TextField(value=text, onValueChange={text=it}, label={Text(\\\"Write something\\\")}); Button(onClick={onSubmit(text)}){ Text(\\\"Share\\\") } } }",
        "BLOCK:POST_CARD": "@Composable fun PostCard(post:Post){ Card{ Column(Modifier.padding(8.dp)){ Text(post.author, style=MaterialTheme.typography.subtitle2); Text(post.content); LikeButton(post.id, post.liked) } } }",
        "BLOCK:FEED_LIST": "@Composable fun FeedList(posts:List<Post>){ LazyColumn{ items(posts){ PostCard(it) } } }",
        "BLOCK:POST_DETAIL": "@Composable fun PostDetail(post:Post){ Column{ Text(post.title, style=MaterialTheme.typography.h4); Text(post.content); CommentsScreen(post.id) } }",
        "BLOCK:COMMENTS_SCREEN": "@Composable fun CommentsScreen(postId:String){ // Load comments\\n LazyColumn{ /* ... */ } }",
        "BLOCK:COMMENT_ITEM": "@Composable fun CommentItem(comment:Comment){ Row{ Text(comment.author); Spacer(Modifier.width(4.dp)); Text(comment.text) } }",
        "BLOCK:LIKE_BUTTON": "@Composable fun LikeButton(postId:String, liked:Boolean){ var isLiked by remember{ mutableStateOf(liked) }; IconButton(onClick={ isLiked=!isLiked }){ Icon(if(isLiked) Icons.Default.Favorite else Icons.Default.FavoriteBorder, tint=if(isLiked) Color.Red else Color.Gray) } }",
        "BLOCK:NOTIFICATIONS_SCREEN": "@Composable fun NotificationsScreen(){ LazyColumn{ /* notification items */ } }",
        "BLOCK:EDIT_PROFILE_SCREEN": "@Composable fun EditProfileScreen(user:User, onSave:()->Unit){ Column{ TextField(value=user.name, onValueChange={}); Button(onClick=onSave){ Text(\\\"Save\\\") } } }",
        "BLOCK:SEARCH_SCREEN": "@Composable fun SearchScreen(onSearch:(String)->Unit){ var query by remember{ mutableStateOf(\\\"\\\") }; Column{ TextField(value=query, onValueChange={query=it}, placeholder={Text(\\\"Search\\\")}); Button(onClick={onSearch(query)}){ Text(\\\"Go\\\") } } }",
        "BLOCK:MEDIA_PICKER": "@Composable fun MediaPicker(onMediaSelected:(Uri)->Unit){ Button(onClick={ /* launch picker */ }){ Text(\\\"Pick Media\\\") } }"
      },
      "hook": {
        "HOOK:INTENT_SHARE": "noop",
        "HOOK:FILE_PROVIDER": "noop",
        "HOOK:PERMISSIONS:ON_REQUEST": "noop",
        "HOOK:PRE_COMMIT:HOOK": "noop",
        "HOOK:POST_BUILD:HOOK": "noop",
        "HOOK:AFTER_INSTALL:HOOK": "noop",
        "HOOK:POST_SUBMIT": "noop",
        "HOOK:FETCH_FEED": "noop",
        "HOOK:FETCH_POST": "noop",
        "HOOK:FETCH_COMMENTS": "noop",
        "HOOK:COMMENT_SUBMIT": "noop",
        "HOOK:LIKE_TOGGLE": "noop",
        "HOOK:UPLOAD_MEDIA": "noop",
        "HOOK:FETCH_NOTIFICATIONS": "noop"
      }
    },
    "files": []
  },
  "issues": []
}