name: ndjc-apk

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # 1. 生成代码包
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate code bundle
        run: |
          ./ci/generate.sh --prompt "$PROMPT" --out generated
          tar -czf generated.tar.gz generated
      - uses: actions/upload-artifact@v4
        with: { name: generated, path: generated.tar.gz }

  # 2. 注入到模板
  inject:
    runs-on: ubuntu-latest
    needs: generate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { name: generated }
      - name: Inject into template
        run: |
          tar -xzf generated.tar.gz
          ./ci/inject.sh generated template workspace
          # 打印出API返回的插入锚点的内容
          echo "API Response (inserted anchors):"
          cat workspace/inserted_anchors.txt  # 假设 inject.sh 输出的插入锚点路径
          tar -czf workspace.tar.gz -C workspace .
      - uses: actions/upload-artifact@v4
        with: { name: workspace, path: workspace.tar.gz }

  # 3. 打包 APK
  assemble:
    runs-on: ubuntu-latest
    needs: inject
    steps:
      - uses: actions/download-artifact@v4
        with: { name: workspace }
      - name: Unpack workspace
        run: mkdir ws && tar -xzf workspace.tar.gz -C ws
      - name: Setup JDK & Gradle
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - uses: gradle/actions/setup-gradle@v3
      - name: Build APK
        working-directory: ws
        run: ./gradlew assembleRelease --no-daemon --build-cache
      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with: { name: unsigned-apk, path: ws/app/build/outputs/apk/release/app-release-unsigned.apk }

  # 4. 签名
  sign:
    runs-on: ubuntu-latest
    needs: assemble
    steps:
      - uses: actions/download-artifact@v4
        with: { name: unsigned-apk }
      - name: Sign APK
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
          KS_PASS: ${{ secrets.KS_PASS }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASS: ${{ secrets.KEY_PASS }}
        run: |
          echo "$KEYSTORE_B64" | base64 -d > keystore.jks
          jarsigner -keystore keystore.jks -storepass "$KS_PASS" -keypass "$KEY_PASS" app-release-unsigned.apk "$KEY_ALIAS"
          mv app-release-unsigned.apk app-release-signed.apk
      - uses: actions/upload-artifact@v4
        with: { name: signed-apk, path: app-release-signed.apk }

  # 5. Smoke Check (可选)
  smoke:
    runs-on: ubuntu-latest
    needs: sign
    steps:
      - uses: actions/download-artifact@v4
        with: { name: signed-apk }
      - name: Smoke check
        run: |
          sudo apt-get update && sudo apt-get install -y aapt
          aapt dump badging app-release-signed.apk | tee BADGING.txt
      - uses: actions/upload-artifact@v4
        with: { name: badging, path: BADGING.txt }
