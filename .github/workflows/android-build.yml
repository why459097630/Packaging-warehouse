name: Android Build (NDJC)

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "Template key (circle/flow/map/shop/showcase)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      branch:
        description: "Branch to build (e.g. ndjc-run/<runId>)"
        required: false
      app_dir:
        description: "Android module dir (e.g. templates/circle-basic/app or app)"
        required: false
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

concurrency:
  group: android-build-${{ github.event_name }}-${{ inputs.runId || github.event.client_payload.runId || inputs.branch || github.event.client_payload.ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout branch (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.event.client_payload.ref || github.ref }}

      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          # 1) 只保存“纯”的 RUN_ID（不要带 requests/ 前缀）
          RUN_ID="${{ inputs.runId || github.event.client_payload.runId || '' }}"
          if [ -z "${RUN_ID}" ]; then
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M-%SZ)"
          fi
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_ENV"

          # 2) 运行分支（如传入的 ndjc-run/<runId>）
          BR="${{ inputs.branch || github.event.client_payload.ref || github.ref }}"
          BR="${BR#refs/heads/}"
          echo "BUILD_BRANCH=${BR}" >> "$GITHUB_ENV"

          # 3) 模板与 APP_DIR
          TEMPLATE="${{ inputs.template || github.event.client_payload.template || 'circle-basic' }}"
          if [ -n "${{ inputs.app_dir || '' }}" ]; then
            APP_DIR="${{ inputs.app_dir }}"
          else
            APP_DIR="templates/${TEMPLATE}/app"
          fi
          echo "APP_DIR=${APP_DIR}" >> "$GITHUB_ENV"

          # 4) 统一的请求目录与文件路径（这里才拼 requests/）
          echo "REQ_DIR=requests/${RUN_ID}" >> "$GITHUB_ENV"
          echo "PLAN_JSON=requests/${RUN_ID}/02_plan.json" >> "$GITHUB_ENV"
          echo "APPLY_JSON=requests/${RUN_ID}/03_apply_result.json" >> "$GITHUB_ENV"

          echo "runId=${RUN_ID}"   >> "$GITHUB_OUTPUT"
          echo "branch=${BR}"      >> "$GITHUB_OUTPUT"

      - name: Guard | require run branch
        if: ${{ steps.resolve.outputs.branch == '' }}
        shell: bash
        run: |
          echo "::error::inputs.branch/client_payload.ref empty. Must provide a run branch like 'ndjc-run/<runId>'."
          exit 1

      - name: Checkout run branch (resolved)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.resolve.outputs.branch }}

      - name: NDJC | Show commit info
        shell: bash
        run: |
          echo "HEAD: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "inputs.branch: '${{ inputs.branch }}'"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          git show --name-only --oneline -1

      - name: Resolve project paths (APP_DIR/PROJ_DIR)
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          [ -d "$APP_DIR" ] || { echo "::error::APP_DIR '$APP_DIR' missing"; exit 1; }
          PROJ_DIR="${APP_DIR%/app}"
          if [ "$PROJ_DIR" = "$APP_DIR" ]; then PROJ_DIR="."; fi
          echo "PROJ_DIR=$PROJ_DIR" >> "$GITHUB_ENV"
          echo "app_dir=$APP_DIR"   >> "$GITHUB_OUTPUT"
          echo "proj_dir=$PROJ_DIR" >> "$GITHUB_OUTPUT"

      - name: Sanity check
        shell: bash
        run: |
          set -euo pipefail
          test -f ./gradlew || { echo "::error::gradlew missing"; exit 1; }
          test -f "$APP_DIR/build.gradle" -o -f "$APP_DIR/build.gradle.kts" || { echo "::error::Gradle file missing under $APP_DIR"; exit 1; }
          test -f "$APP_DIR/src/main/AndroidManifest.xml" || { echo "::error::AndroidManifest.xml missing under $APP_DIR/src/main"; exit 1; }

      - name: Ensure Python (alias)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v python >/dev/null 2>&1; then
            sudo ln -sf /usr/bin/python3 /usr/local/bin/python
          fi
          python --version || true

      - name: NDJC | Preflight (anchors & resources)
        id: preflight
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p anchors build-logs
          echo "[preflight] skip heavy checks in this run" | tee build-logs/preflight.log

      - name: NDJC | Upload preflight logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preflight-logs-${{ env.RUN_ID }}
          path: build-logs/preflight.log
          if-no-files-found: ignore

      # 关键修复：先赋予可执行权限
      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-materialize.sh

      # 关键修复：RUN_ID 不带 requests/，脚本内部按 requests/${RUN_ID} 组路径
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_DIR=$APP_DIR"
          echo "RUN_ID=$RUN_ID"
          echo "REQ_DIR=$REQ_DIR"
          echo "PLAN_JSON=$PLAN_JSON"
          echo "APPLY_JSON=$APPLY_JSON"

          # 显式检查计划文件是否存在（防重复 requests/）
          if [ ! -f "$PLAN_JSON" ]; then
            echo "::error::plan not found: $PLAN_JSON"
            exit 1
          fi

          scripts/ndjc-materialize.sh "$APP_DIR" "$RUN_ID" "$PLAN_JSON" "$APPLY_JSON"

      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: materialize-logs-${{ env.RUN_ID }}
          path: |
            build-logs/**
            ${{ env.REQ_DIR }}/03_apply_result.json
          if-no-files-found: ignore

      # ---- 后续常规 Android 构建（保持你原来的步骤即可）----
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          check-latest: true

      - name: Force JDK 17 for all next steps
        shell: bash
        run: |
          echo "JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV" || true
          echo "${{ steps.jdk.outputs.path }}/bin" >> "$GITHUB_PATH" || true
          java -version || true

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew -p "$PROJ_DIR" :app:assembleDebug --stacktrace --info --warning-mode all

      - name: NDJC | Upload build logs (on failure too)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.RUN_ID }}
          path: build-logs/**
          if-no-files-found: ignore
