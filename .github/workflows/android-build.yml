name: Android Build (NDJC)

on:
  repository_dispatch:
    types: [generate-apk]
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      app_dir:
        description: "Android module dir (e.g. templates/circle-basic/app or app)"
        required: false

permissions:
  contents: write

concurrency:
  group: android-build-${{ github.event_name }}-${{ inputs.runId || github.event.client_payload.runId || inputs.branch || github.event.client_payload.ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 1) 解析 runId
          RUN_ID="${{ inputs.runId || github.event.client_payload.runId || '' }}"
          if [ -z "$RUN_ID" ]; then
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M-%SZ)"
          fi
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"

          # 2) 只保存“目录”，不要拼文件名（避免重复）
          echo "REQ_DIR=requests/$RUN_ID" >> "$GITHUB_ENV"

          # 3) 模板 app 目录（可被 inputs.app_dir 覆盖）
          APP_DIR_IN="${{ inputs.app_dir || '' }}"
          if [ -n "$APP_DIR_IN" ]; then
            APP_DIR="$APP_DIR_IN"
          else
            APP_DIR="templates/circle-basic/app"
          fi
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"

          echo "::notice::Resolved RUN_ID=$RUN_ID, REQ_DIR=requests/$RUN_ID, APP_DIR=$APP_DIR"

      - name: Checkout run branch (resolved)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 如果是 repository_dispatch，会把 run 分支放在 client_payload.ref
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Make ndjc-materialize.sh executable
        if: always()
        shell: bash
        run: chmod +x scripts/ndjc-materialize.sh

      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_DIR=$APP_DIR"
          echo "REQ_DIR=$REQ_DIR"

          # 这里校验目录中必须存在 02_plan.json
          test -f "$REQ_DIR/02_plan.json" || { 
            echo "::error::Plan JSON NOT found at $REQ_DIR/02_plan.json"
            exit 1
          }

          # 传“目录”给脚本；脚本内部会自行拼 02_plan.json / 03_apply_result.json
          scripts/ndjc-materialize.sh "$APP_DIR" "$REQ_DIR"

      # ===== 下面是你原来的构建流程（保留即可；若之前误删了可以恢复） =====

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          check-latest: true

      - name: Force JDK 17 for all next steps
        shell: bash
        run: |
          echo "JAVA_HOME=${{ steps.setup-java.outputs.path }}" >> "$GITHUB_ENV" || true

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build (debug)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew -p "$(dirname "$APP_DIR")" :app:assembleDebug -x lint --stacktrace --info --warning-mode all

      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-materialize-${{ env.RUN_ID }}
          path: |
            ${{ env.REQ_DIR }}/02_plan.json
            ${{ env.REQ_DIR }}/03_apply_result.json
          if-no-files-found: ignore
