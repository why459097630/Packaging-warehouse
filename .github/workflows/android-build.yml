name: Android Build

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "template key (core/simple/form)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
  # 由服务端 route.ts 触发（只触发一次）
  repository_dispatch:
    types: [generate-apk]

concurrency:
  group: android-build-${{ github.event_name }}-${{ github.event.client_payload.runId || inputs.runId || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    # 可选：签名相关 secret（没有则走 debug 包）
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 如果是 repository_dispatch，则使用服务器传来的 ref；否则用当前分支
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: NDJC | Show commit and changed files
        run: |
          echo "HEAD sha: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          echo "---- files touched in this commit ----"
          git show --name-only --pretty=oneline "$(git rev-parse HEAD)"

      - name: Sanity check
        run: |
          test -f ./gradlew || { echo "gradlew missing"; exit 1; }
          test -d app || { echo "app/ missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "app Gradle file missing"; exit 1; }

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"
          ls -lh "$HOME/release.jks" || true

      - name: Build
        id: build
        shell: bash
        run: |
          set -e
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/debug
            VARIANT=debug
          else
            echo "Keystore present → build Release"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/release
            VARIANT=release
          fi
          echo "APK_DIR=$OUTDIR"   >> "$GITHUB_ENV"
          echo "VARIANT=$VARIANT"  >> "$GITHUB_ENV"

      - name: Pick APK
        shell: bash
        run: |
          set -e
          SIGNED=$(ls -t "$APK_DIR"/*.apk 2>/dev/null | grep -Ev -- '-unsigned\.apk$' | head -n1 || true)
          UNSIGNED=$(ls -t "$APK_DIR"/*-unsigned.apk 2>/dev/null | head -n1 || true)
          APK=""
          if [ -n "$SIGNED" ]; then
            APK="$SIGNED"
            echo "Found signed APK: $APK"
          elif [ -n "$UNSIGNED" ]; then
            APK="$UNSIGNED"
            echo "Found unsigned APK: $APK"
          else
            echo "No APK found under $APK_DIR"
            exit 1
          fi
          echo "APK=$APK" >> "$GITHUB_ENV"

      - name: Fallback sign release APK (if unsigned but keystore present)
        if: ${{ env.KS != '' && env.VARIANT == 'release' }}
        shell: bash
        run: |
          if echo "${APK}" | grep -q -- '-unsigned\.apk$'; then
            OUT="${APK%-unsigned.apk}.apk"
            echo "Unsigned APK → signing: ${APK} -> ${OUT}"
            "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" sign \
              --ks "$NDJC_KEYSTORE_PATH" \
              --ks-pass pass:"$NDJC_KEYSTORE_PASSWORD" \
              --key-pass pass:"$NDJC_KEY_PASSWORD" \
              --ks-key-alias "$NDJC_KEY_ALIAS" \
              --out "$OUT" "$APK"
            ls -lh "$OUT"
            echo "APK=$OUT" >> "$GITHUB_ENV"
          else
            echo "APK already signed: ${APK}"
          fi

      - name: Verify Release signature
        if: ${{ env.VARIANT == 'release' }}
        run: |
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "${APK}"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.VARIANT }}
          path: ${{ env.APK }}
          if-no-files-found: error
