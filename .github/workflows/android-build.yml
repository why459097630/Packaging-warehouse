name: Android Build (NDJC • single-tree)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  TEMPLATE_DEFAULT: circle-basic
  NDJC_FAIL_CLOSE: "true"
  NDJC_STRICT_MODE: "true"
  NDJC_ALLOW_COMPANION_CODE: "false"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 18 (for linter/sanitizer)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Resolve inputs → env & summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          TEMPLATE="${{ github.event.client_payload.template || '' }}"
          [ -n "$TEMPLATE" ] || TEMPLATE="${TEMPLATE_DEFAULT}"
          if [ -z "$RUN_ID" ]; then
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M%SZ)-${GITHUB_RUN_ID}"
          fi

          RUN_BRANCH="ndjc-run/${RUN_ID}"
          APP_DIR="templates/${TEMPLATE}/app"
          TEMPLATE_ROOT="$(dirname "$APP_DIR")"
          REQ_DIR="requests/${RUN_ID}"

          {
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_BRANCH=${RUN_BRANCH}"
            echo "TEMPLATE=${TEMPLATE}"
            echo "APP_DIR=${APP_DIR}"
            echo "TEMPLATE_ROOT=${TEMPLATE_ROOT}"
            echo "REQ_DIR=${REQ_DIR}"
            echo "PLAN_JSON=${REQ_DIR}/02_plan.json"
            echo "APPLY_JSON=${REQ_DIR}/03_apply_result.json"
          } >> "$GITHUB_ENV"

          {
            echo "### NDJC build inputs"
            echo "- **Run ID:** \`${RUN_ID}\`"
            echo "- **Run branch:** \`${RUN_BRANCH}\`"
            echo "- **Template:** \`${TEMPLATE}\`"
            echo "- **APP_DIR:** \`${APP_DIR}\`"
            echo "- **TEMPLATE_ROOT:** \`${TEMPLATE_ROOT}\`"
            echo "- **Expect plan at:** \`${REQ_DIR}/02_plan.json\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout run branch (prefer)
        id: checkout_run
        shell: bash
        run: |
          set -euo pipefail
          RB="${RUN_BRANCH}"
          if git ls-remote --exit-code origin "refs/heads/${RB}" >/dev/null 2>&1; then
            git fetch origin "${RB}:${RB}" --depth=50
            git checkout "${RB}"
            echo "has_run_branch=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_run_branch=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout main (fallback for requests)
        if: steps.checkout_run.outputs.has_run_branch == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --depth=50
          git checkout main

      - name: Locate 02_plan.json
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          PLAN_PATH="${PLAN_JSON}"
          if [ ! -f "${PLAN_PATH}" ]; then
            echo "::error::Plan JSON NOT found at ${PLAN_PATH}"
            exit 1
          fi
          echo "PLAN_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> "$GITHUB_ENV"
          echo "- **Found 02_plan.json at:** \`${PLAN_PATH}\`" >> "$GITHUB_STEP_SUMMARY"

      # ---------- 硬校验（Linter） ----------
      - name: Lint plan (hard checks)
        shell: bash
        run: |
          set -euo pipefail
          npx -y tsx lib/ndjc/guard/plan_linter.ts --plan="${PLAN_JSON}" || rc=$?
          if [ "${rc:-0}" = "2" ]; then
            echo "::error::Plan linter found critical violations."
            exit 2
          fi

      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: chmod +x scripts/ndjc-materialize.sh

      - name: NDJC | Materialize (sanitize + apply plan → template)
        shell: bash
        env:
          PLAN_JSON: ${{ env.PLAN_JSON }}
          APPLY_JSON: ${{ env.APPLY_JSON }}
          APP_DIR: ${{ env.APP_DIR }}
          REQ_DIR: ${{ env.REQ_DIR }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          scripts/ndjc-materialize.sh "${APP_DIR}" "${RUN_ID}"

      - name: Anchor scan (notice only)
        shell: bash
        run: |
          set -euo pipefail
          hits=$(grep -R --line-number -E 'NDJC:|BLOCK:|LIST:|HOOK:|IF:' "${APP_DIR}" | wc -l || true)
          echo "::notice ::anchor_hits=${hits}"

      - name: Guards (template root & app module)
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "${TEMPLATE_ROOT}/settings.gradle" && ! -f "${TEMPLATE_ROOT}/settings.gradle.kts" ]]; then
            echo "::error ::settings.gradle(.kts) not found under TEMPLATE_ROOT=${TEMPLATE_ROOT}"
            exit 1
          fi
          if [[ ! -f "${APP_DIR}/build.gradle" && ! -f "${APP_DIR}/build.gradle.kts" ]]; then
            echo "::error ::build.gradle(.kts) not found under APP_DIR=${APP_DIR}"
            exit 1
          fi

      # ---------- Build ----------
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (debug) with root wrapper
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew || true
          ./gradlew -p "${TEMPLATE_ROOT}" --no-daemon --stacktrace :app:assembleDebug

      # ---------- Artifacts ----------
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-apk-${{ env.RUN_ID }}
          path: |
            ${{ env.TEMPLATE_ROOT }}/app/build/outputs/apk/**/*.apk
          if-no-files-found: warn

      - name: NDJC | Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**/*
            requests/${{ env.RUN_ID }}/02_plan.json
            requests/${{ env.RUN_ID }}/02_plan.sanitized.json
            requests/${{ env.RUN_ID }}/plan-violations.json
            requests/${{ env.RUN_ID }}/03_apply_result.json
          if-no-files-found: warn
