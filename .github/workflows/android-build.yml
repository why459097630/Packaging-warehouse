name: Android Build (NDJC • single-tree)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  TEMPLATE_DEFAULT: circle-basic

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inputs → env & summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          TEMPLATE="${{ github.event.client_payload.template || '' }}"
          [ -n "$TEMPLATE" ] || TEMPLATE="${TEMPLATE_DEFAULT}"
          if [ -z "$RUN_ID" ]; then
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M%SZ)-${GITHUB_RUN_ID}"
          fi
          RUN_BRANCH="ndjc-run/${RUN_ID}"
          APP_DIR="templates/${TEMPLATE}/app"
          TEMPLATE_ROOT="$(dirname "$APP_DIR")"
          REQ_DIR="requests/${RUN_ID}"

          {
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_BRANCH=${RUN_BRANCH}"
            echo "TEMPLATE=${TEMPLATE}"
            echo "APP_DIR=${APP_DIR}"
            echo "TEMPLATE_ROOT=${TEMPLATE_ROOT}"
            echo "REQ_DIR=${REQ_DIR}"
            echo "PLAN_JSON=${REQ_DIR}/02_plan.json"
            echo "APPLY_JSON=${REQ_DIR}/03_apply_result.json"
          } >> "$GITHUB_ENV"

          {
            echo "### NDJC build inputs"
            echo "- **Run ID:** \`${RUN_ID}\`"
            echo "- **Run branch:** [\`${RUN_BRANCH}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- **Template:** \`${TEMPLATE}\` — **APP_DIR:** \`${APP_DIR}\`"
            echo "- **TEMPLATE_ROOT:** \`${TEMPLATE_ROOT}\`"
            echo "- **Requests (will be generated):** [\`requests/${RUN_ID}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/requests/${RUN_ID})"
            echo "- **Expect plan at:** \`${REQ_DIR}/02_plan.json\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout run branch (prefer)
        id: checkout_run
        shell: bash
        run: |
          set -euo pipefail
          RB="${RUN_BRANCH}"
          if git ls-remote --exit-code origin "refs/heads/${RB}" >/dev/null 2>&1; then
            git fetch origin "${RB}:${RB}" --depth=50
            git checkout "${RB}"
            echo "has_run_branch=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_run_branch=false" >> "$GITHUB_OUTPUT"
            echo "Run branch '${RB}' not found; fallback to 'main' for locating plan."
          fi

      - name: Checkout main (fallback for requests)
        if: steps.checkout_run.outputs.has_run_branch == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --depth=50
          git checkout main

      - name: Locate 02_plan.json (prefer run branch, else main) + add summary link
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          PLAN_PATH="${PLAN_JSON}"
          found_at=""
          if [ -f "${PLAN_PATH}" ]; then
            found_at="$(git rev-parse --abbrev-ref HEAD)"
          else
            HEAD_B="$(git rev-parse --abbrev-ref HEAD)"
            if [ "${HEAD_B}" != "main" ]; then
              git checkout -q main
              if [ -f "${PLAN_PATH}" ]; then
                found_at="main"
              fi
            fi
          fi
          if [ -z "${found_at}" ]; then
            echo "::error::Plan JSON NOT found at ${PLAN_PATH} (searched run branch then main)."
            exit 1
          fi
          echo "PLAN_BRANCH=${found_at}" >> "$GITHUB_ENV"

          PLAN_URL="https://github.com/${{ github.repository }}/blob/${found_at}/${PLAN_PATH}"
          {
            echo "- **Found 02_plan.json at:** [\`${PLAN_PATH}\`](${PLAN_URL}) *(from ${found_at})*"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Lint plan (hard checks)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build-logs
          node -e "try{const p=require('fs').readFileSync(process.env.PLAN_JSON,'utf8');JSON.parse(p);}catch(e){console.error('02_plan.json invalid:',e.message);process.exit(1)}" \
          || { echo "::error::02_plan.json JSON parse failed"; exit 1; }

      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-materialize.sh

      - name: Setup Node 18 (for linter/sanitizer)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: NDJC | Materialize (sanitize + apply plan → template)
        shell: bash
        env:
          PLAN_JSON: ${{ env.PLAN_JSON }}
          APPLY_JSON: ${{ env.APPLY_JSON }}
          APP_DIR: ${{ env.APP_DIR }}
          REQ_DIR: ${{ env.REQ_DIR }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          echo "env: PLAN_JSON=${PLAN_JSON}"
          echo "env: APP_DIR=${APP_DIR}"
          echo "env: RUN_ID=${RUN_ID}"
          scripts/ndjc-materialize.sh "${APP_DIR}" "${RUN_ID}"

      - name: Show modified files after materialize
        id: show_changes
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build-logs
          echo "Diff after materialize (under ${APP_DIR})"
          git status --porcelain | tee build-logs/git-status.txt
          git diff --name-only | tee build-logs/modified-files.txt
          echo "modified_count=$(wc -l < build-logs/modified-files.txt | tr -d ' ')" >> "$GITHUB_OUTPUT"
          {
            echo ""
            echo "#### Modified files"
            echo ""
            sed 's/^/ - /' build-logs/modified-files.txt >> "$GITHUB_STEP_SUMMARY" || true
          } >> /dev/null

      - name: Commit & push run branch (only if there are changes)
        id: push_run_branch
        shell: bash
        env:
          RB: ${{ env.RUN_BRANCH }}
          RUN_ID: ${{ env.RUN_ID }}
          TEMPLATE: ${{ env.TEMPLATE }}
          APP_DIR: ${{ env.APP_DIR }}
          PLAN_JSON: ${{ env.PLAN_JSON }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # ensure on run branch (create if missing)
          if ! git rev-parse --verify "${RB}" >/dev/null 2>&1; then
            git checkout -b "${RB}"
          else
            git checkout "${RB}"
          fi
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "NDJC: materialize ${RUN_ID} (template=${TEMPLATE}, app=${APP_DIR})"
            git push origin "${RB}"
            echo "pushed=true" >> "$GITHUB_OUTPUT"
            echo "branch=${RB}" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Anchor scan (notice only)
        shell: bash
        run: |
          set -euo pipefail
          hits=$(grep -R --line-number -E 'NDJC:|BLOCK:|LIST:|HOOK:|IF:' "${APP_DIR}" | wc -l || true)
          echo "::notice ::anchor_hits=${hits}"

      - name: Guards (template root & app module)
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "${TEMPLATE_ROOT}/settings.gradle" && ! -f "${TEMPLATE_ROOT}/settings.gradle.kts" ]]; then
            echo "::error ::settings.gradle(.kts) not found under TEMPLATE_ROOT=${TEMPLATE_ROOT}"
            exit 1
          fi
          if [[ ! -f "${APP_DIR}/build.gradle" && ! -f "${APP_DIR}/build.gradle.kts" ]]; then
            echo "::error ::build.gradle(.kts) not found under APP_DIR=${APP_DIR}"
            exit 1
          fi

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (debug) with root wrapper
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "./gradlew" ]]; then
            echo "::error ::gradlew not found at repository root"; exit 1;
          fi
          chmod +x ./gradlew || true
          ./gradlew -p "${TEMPLATE_ROOT}" --no-daemon --stacktrace :app:assembleDebug

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-apk-${{ env.RUN_ID }}
          path: |
            ${{ env.TEMPLATE_ROOT }}/app/build/outputs/apk/**/*.apk

      - name: NDJC | Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**/*
            ${{ env.REQ_DIR }}/02_plan.json
            ${{ env.REQ_DIR }}/02_plan.sanitized.json
            ${{ env.REQ_DIR }}/03_apply_result.json
          if-no-files-found: warn

      - name: Summary • push result & links
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          {
            echo ""
            echo "#### Commit & Push"
            echo "- pushed: \`${{ steps.push_run_branch.outputs.pushed || 'false' }}\` to [\`${RUN_BRANCH}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- modified files: \`${{ steps.show_changes.outputs.modified_count || '0' }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
