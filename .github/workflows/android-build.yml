name: Android Build

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "optional trace id"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # ====== 可选签名：只有配置了 ANDROID_KEYSTORE_BASE64 才会执行 ======
      - name: Decode keystore (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$HOME/release.jks"

      - name: Export signing env (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          echo "NDJC_KEYSTORE_PATH=$HOME/release.jks" >> "$GITHUB_ENV"
          echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> "$GITHUB_ENV"
          echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> "$GITHUB_ENV"
          echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> "$GITHUB_ENV"

      # ====== 调试：看看 Runner 里是否能看到 gradlew ======
      - name: Show tree (debug)
        shell: bash
        run: |
          echo "== root ==" && ls -la
          echo "== app ==" && ls -la app || true

      # 自动定位 gradlew（在根或 app/ 下）
      - name: Locate gradlew
        id: gw
        shell: bash
        run: |
          if [ -f ./gradlew ]; then
            echo "path=./gradlew" >> $GITHUB_OUTPUT
          elif [ -f ./app/gradlew ]; then
            echo "path=./app/gradlew" >> $GITHUB_OUTPUT
          else
            echo "❌ gradlew not found"; exit 1
          fi
          echo "Using $(cat $GITHUB_OUTPUT)"

      # ====== 构建（未配签名则自动关闭）======
      - name: Build release
        shell: bash
        env:
          NDJC_SIGNING_DISABLED: ${{ secrets.ANDROID_KEYSTORE_BASE64 == '' && '1' || '' }}
        run: |
          set -e
          bash "${{ steps.gw.outputs.path }}" :app:clean || bash "${{ steps.gw.outputs.path }}" clean
          bash "${{ steps.gw.outputs.path }}" :app:assembleRelease -x lint || \
          bash "${{ steps.gw.outputs.path }}" assembleRelease -x lint

      - name: Grab APK
        id: apk
        shell: bash
        run: |
          set -e
          APK=$(ls -t app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$APK" ]; then
            APK=$(ls -t build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$APK" ]; then
            echo "❌ APK not found"; exit 1
          fi
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          ls -lh "$APK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.apk.outputs.apk }}
