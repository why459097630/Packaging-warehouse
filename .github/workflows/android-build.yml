name: Android Build (NDJC)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      # 1) 基础 checkout
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) 解析触发参数，写入环境变量与 Step Summary
      - name: Resolve inputs → env & write summary
        id: resolve
        run: |
          # 读取触发负载
          RUN_ID="${{ github.event.client_payload.runId }}"
          RUN_BRANCH="${{ github.event.client_payload.branch }}"
          TEMPLATE="${{ github.event.client_payload.template }}"
          MODE="${{ github.event.client_payload.mode }}"

          # 兜底
          : "${RUN_ID:=${GITHUB_RUN_ID}}"
          : "${RUN_BRANCH:=main}"
          : "${TEMPLATE:=circle-basic}"
          : "${MODE:=B}"

          REQUESTS_DIR="requests/${RUN_ID}"

          echo "RUN_ID=${RUN_ID}"           >> "$GITHUB_ENV"
          echo "RUN_BRANCH=${RUN_BRANCH}"   >> "$GITHUB_ENV"
          echo "REQUESTS_DIR=${REQUESTS_DIR}" >> "$GITHUB_ENV"
          echo "TEMPLATE=${TEMPLATE}"       >> "$GITHUB_ENV"
          echo "MODE=${MODE}"               >> "$GITHUB_ENV"

          {
            echo "## NDJC build inputs"
            echo "- Run ID: \`${RUN_ID}\`"
            echo "- Run branch: [${RUN_BRANCH}](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- Requests (will be generated): [${REQUESTS_DIR}](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/${REQUESTS_DIR})"
            echo "- Expect plan at: \`${REQUESTS_DIR}/02_plan.json\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # 3) 用 run 分支作为主工作目录
      - name: Checkout run branch (for build & logs)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          fetch-depth: 0

      # 4) 如 run 分支不存在 02_plan.json，则从 main 精准取回该文件（不破坏工作目录其余内容）
      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        run: |
          set -euo pipefail
          PLAN="${REQUESTS_DIR}/02_plan.json"

          if [ -f "$PLAN" ]; then
            echo "Found plan in run branch: $PLAN"
          else
            echo "Plan not in run branch. Trying to checkout from main: $PLAN"
            git fetch origin main --depth=1
            # 仅把 plan 文件从 main 拿到当前工作区
            git checkout origin/main -- "$PLAN" || true
          fi

          if [ ! -f "$PLAN" ]; then
            echo "::error::plan not found: $PLAN"
            exit 1
          fi

          echo "Found 02_plan.json at $PLAN" >> "$GITHUB_STEP_SUMMARY"

      # 5) materialize 脚本可执行
      - name: Make ndjc-materialize.sh executable
        run: chmod +x scripts/ndjc-materialize.sh

      # 6) Materialize（把 plan 应用到模板）
      - name: NDJC | Materialize (apply plan → template)
        run: |
          set -euo pipefail
          APP_DIR="templates/${TEMPLATE}/app"
          bash scripts/ndjc-materialize.sh "${REQUESTS_DIR}/02_plan.json" "${APP_DIR}"

      # 7) Java 环境
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 8) 可选：Gradle cache（已由 setup-java 缓存，保留占位）
      - name: Setup Gradle cache
        run: echo "Gradle cache handled by setup-java."

      # 9) 编译（按需调整任务）
      - name: Build (debug)
        run: |
          set -euo pipefail
          ./gradlew :app:assembleDebug --no-daemon

      # 10) 上传 materialize/诊断日志 + requests 目录（便于排查）
      - name: Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**
            ${{ env.REQUESTS_DIR }}/**
            actions-summary.txt
          if-no-files-found: warn

      # 11) 失败时上传 build 日志
      - name: Upload build logs (on failure too)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-build-logs-${{ env.RUN_ID }}
          path: |
            **/build/reports/**
            **/build/outputs/**
          if-no-files-found: warn
