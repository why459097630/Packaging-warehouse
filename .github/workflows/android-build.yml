name: Android Build (NDJC)

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "Template key (circle/flow/map/shop/showcase)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      branch:
        description: "Branch to build (e.g. ndjc-run/<runId>)"
        required: false
      preflight_mode:
        description: "Preflight mode: warn (default) or strict"
        required: false
        default: "warn"
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

concurrency:
  group: android-build-${{ github.event_name }}-${{ inputs.runId || github.event.client_payload.runId || inputs.branch || github.event.client_payload.ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.event.client_payload.ref || github.ref }}

      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ inputs.runId }}"
          if [ -z "$RUN_ID" ]; then RUN_ID="${{ github.event.client_payload.runId }}"; fi
          if [ -z "$RUN_ID" ]; then RUN_ID="ndjc-$(date -u +%Y%m%dT%H%M%SZ)"; fi
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"

          BR="${{ inputs.branch }}"
          if [ -z "$BR" ]; then BR="${{ github.event.client_payload.ref }}"; fi
          if [ -z "$BR" ]; then BR="${{ github.ref }}"; fi
          BR="${BR#refs/heads/}"
          echo "BUILD_BRANCH=$BR" >> "$GITHUB_ENV"

          echo "Resolved RUN_ID=$RUN_ID, BUILD_BRANCH=$BR"
          echo "runId=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "branch=$BR"    >> "$GITHUB_OUTPUT"

      - name: NDJC | Show commit info
        run: |
          echo "HEAD: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "inputs.branch: '${{ inputs.branch }}'"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          git show --name-only --oneline -1

      - name: Sanity check
        run: |
          test -f ./gradlew || { echo "::error::gradlew missing"; exit 1; }
          test -d app || { echo "::error::app/ missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "::error::Gradle file missing"; exit 1; }

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: NDJC | Preflight (anchor & resource checks)
        id: preflight
        shell: bash
        continue-on-error: ${{ (inputs.preflight_mode || 'warn') != 'strict' }}
        run: |
          set -euo pipefail
          mkdir -p anchors build-logs
          if [ -x .github/scripts/ndjc-preflight.sh ]; then
            .github/scripts/ndjc-preflight.sh app "${{ inputs.preflight_mode || 'warn' }}" | tee build-logs/preflight.log
          else
            echo "::warning::.github/scripts/ndjc-preflight.sh not found; skipping deep checks" | tee build-logs/preflight.log
          fi

      - name: NDJC | Upload preflight logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preflight-logs-${{ env.RUN_ID }}
          path: |
            anchors/**
            build-logs/preflight.log
          if-no-files-found: ignore

      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"
          ls -lh "$HOME/release.jks" || true

      # ---------- Build（stderr 一并写入日志）----------
      - name: Build
        id: build
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build-logs
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace --info --warning-mode all 2>&1 | tee build-logs/build.log
            OUTDIR=app/build/outputs/apk/debug
            VARIANT=debug
          else
            echo "Keystore present → build Release"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace --info --warning-mode all 2>&1 | tee build-logs/build.log
            OUTDIR=app/build/outputs/apk/release
            VARIANT=release
          fi
          echo "APK_DIR=${OUTDIR:-app/build/outputs/apk/debug}" >> "$GITHUB_ENV"
          echo "VARIANT=${VARIANT:-debug}" >> "$GITHUB_ENV"
      # -----------------------------------------------

      - name: NDJC | Upload build logs (on failure too)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.RUN_ID }}
          path: build-logs/**
          if-no-files-found: ignore

      - name: NDJC | Show build tail (on failure)
        if: failure()
        shell: bash
        run: |
          echo "---- build.log (last 200 lines) ----"
          tail -n 200 build-logs/build.log || true

      - name: Pick APK
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          SIGNED=$(ls -t "$APK_DIR"/*.apk 2>/dev/null | grep -Ev -- '-unsigned\.apk$' | head -n1 || true)
          UNSIGNED=$(ls -t "$APK_DIR"/*-unsigned.apk 2>/dev/null | head -n1 || true)
          APK=""
          if [ -n "$SIGNED" ]; then
            APK="$SIGNED"
            echo "Found signed APK: $APK"
          elif [ -n "$UNSIGNED" ]; then
            APK="$UNSIGNED"
            echo "Found unsigned APK: $APK"
          else
            echo "::error::No APK found under $APK_DIR"
            exit 1
          fi
          echo "APK=$APK" >> "$GITHUB_ENV"
          echo "apk=$APK" >> "$GITHUB_OUTPUT"

      - name: Fallback sign release APK (if unsigned but keystore present)
        if: ${{ env.KS != '' && env.VARIANT == 'release' }}
        shell: bash
        run: |
          if echo "${APK}" | grep -q -- '-unsigned\.apk$'; then
            OUT="${APK%-unsigned.apk}.apk"
            echo "Unsigned APK → signing: ${APK} -> ${OUT}"
            "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" sign \
              --ks "$NDJC_KEYSTORE_PATH" \
              --ks-pass pass:"$NDJC_KEYSTORE_PASSWORD" \
              --key-pass pass:"$NDJC_KEY_PASSWORD" \
              --ks-key-alias "$NDJC_KEY_ALIAS" \
              --out "$OUT" "$APK"
            ls -lh "$OUT"
            echo "APK=$OUT" >> "$GITHUB_ENV"
          else
            echo "APK already signed: ${APK}"
          fi

      - name: Verify Release signature
        if: ${{ env.VARIANT == 'release' }}
        run: |
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "${APK}"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.VARIANT }}-${{ env.RUN_ID }}
          path: ${{ env.APK }}
          if-no-files-found: error

      - name: NDJC | Write back logs to repo (requests/<RUN_ID>/)
        if: always()
        shell: bash
        continue-on-error: true
        run: |
          set -eo pipefail
          REQ_DIR="requests/${RUN_ID}"
          mkdir -p "$REQ_DIR"
          cp -r build-logs "$REQ_DIR/" 2>/dev/null || true
          BRANCH="${BUILD_BRANCH:-unknown}"
          VAR="${VARIANT:-unknown}"
          APK_PATH="${APK:-}"
          {
            echo "branch=${BRANCH}"
            echo "variant=${VAR}"
            echo "apk=${APK_PATH}"
            echo "ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          } > "${REQ_DIR}/actions-summary.txt"
          git config user.name  "ndjc-bot"
          git config user.email "ndjc-bot@users.noreply.github.com"
          git add "${REQ_DIR}" || true
          git commit -m "[NDJC ${RUN_ID}] add build logs" || true
          git push origin "${BRANCH}" || true

      - name: NDJC | Summary
        if: always()
        run: |
          echo "### NDJC Build Result" >> "$GITHUB_STEP_SUMMARY"
          echo "- runId: \`${RUN_ID}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- branch: \`${BUILD_BRANCH}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- variant: \`${VARIANT:-unknown}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- apk: \`${APK:-not-found}\`" >> "$GITHUB_STEP_SUMMARY"
