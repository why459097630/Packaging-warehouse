name: Android Build (NDJC • workspace-app)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  # 默认模板，可由 client_payload.template 覆盖
  TEMPLATE_DEFAULT: circle-basic

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inputs → env & summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # ---------- 解析输入 ----------
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          TEMPLATE_IN="${{ github.event.client_payload.template || '' }}"
          [ -n "$TEMPLATE_IN" ] || TEMPLATE_IN="${TEMPLATE_DEFAULT}"

          if [ -z "$RUN_ID" ]; then
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M-%SZ)-${GITHUB_RUN_ID}"
          fi

          RUN_BRANCH="ndjc-run/${RUN_ID}"
          TEMPLATE="${TEMPLATE_IN}"
          REQ_DIR="requests/${RUN_ID}"

          # 关键：工作区构建目录一律放在仓库根的 app/
          APP_DIR="app"
          # 计划/应用结果文件
          PLAN_JSON="${REQ_DIR}/02_plan.json"
          PLAN_JSON_SAN="${REQ_DIR}/02_plan.sanitized.json"
          APPLY_JSON="${REQ_DIR}/03_apply_result.json"

          # ---------- 输出到环境 ----------
          {
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_BRANCH=${RUN_BRANCH}"
            echo "TEMPLATE=${TEMPLATE}"
            echo "REQ_DIR=${REQ_DIR}"
            echo "APP_DIR=${APP_DIR}"
            echo "PLAN_JSON=${PLAN_JSON}"
            echo "PLAN_JSON_SAN=${PLAN_JSON_SAN}"
            echo "APPLY_JSON=${APPLY_JSON}"
            # 生成器工作根（让 generator 把模板拷到 <repo>/app）
            echo "NDJC_WORKDIR=${GITHUB_WORKSPACE}"
          } >> "$GITHUB_ENV"

          # ---------- 构建摘要（可点击） ----------
          {
            echo "### NDJC build inputs"
            echo "- **Run ID:** \`${RUN_ID}\`"
            echo "- **Run branch:** [\`${RUN_BRANCH}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- **Template:** \`${TEMPLATE}\`"
            echo "- **Workspace app:** \`./app\`"
            echo "- **Requests dir:** [\`${REQ_DIR}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/${REQ_DIR})"
            echo "- **Expect plan at:** [\`${PLAN_JSON}\`](https://github.com/${{ github.repository }}/blob/${RUN_BRANCH}/${PLAN_JSON})"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- 优先使用 run 分支（若不存在则退回 main 读取 plan） ----------
      - name: Checkout run branch (if exists)
        id: checkout_run
        shell: bash
        run: |
          set -euo pipefail
          RB="${RUN_BRANCH}"
          if git ls-remote --exit-code origin "refs/heads/${RB}" >/dev/null 2>&1; then
            git fetch origin "${RB}:${RB}" --depth=50
            git checkout "${RB}"
            echo "has_run_branch=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_run_branch=false" >> "$GITHUB_OUTPUT"
            echo "Run branch '${RB}' not found; will fallback to 'main' for locating plan."
          fi

      - name: Fallback to main to locate plan
        if: steps.checkout_run.outputs.has_run_branch == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --depth=50
          git checkout main

      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "${PLAN_JSON}" ]; then
            found_at="$(git rev-parse --abbrev-ref HEAD)"
          else
            if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
              git checkout -q main
            fi
            if [ -f "${PLAN_JSON}" ]; then
              found_at="main"
            else
              echo "::error::Plan JSON NOT found at ${PLAN_JSON} (searched run branch then main)."
              exit 1
            fi
          fi
          echo "PLAN_BRANCH=${found_at}" >> "$GITHUB_ENV"
          echo "- **Found 02_plan.json at:** \`${PLAN_JSON}\` *(from ${found_at})*" >> "$GITHUB_STEP_SUMMARY"

      # ---------- 准备工作区 app/（把模板拷到仓库根） ----------
      - name: Prepare workspace app (copy template → ./app)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf app
          mkdir -p app

          # 将模板 app 拷到根 app/
          if [ -d "templates/${TEMPLATE}/app" ]; then
            cp -a "templates/${TEMPLATE}/app/." ./app/
          else
            echo "::error::templates/${TEMPLATE}/app not found"
            exit 1
          fi

          # settings.gradle(.kts) 同步到根（供 Gradle 识别 :app）
          if [ -f "templates/${TEMPLATE}/settings.gradle.kts" ]; then
            cp -a "templates/${TEMPLATE}/settings.gradle.kts" ./settings.gradle.kts
            rm -f ./settings.gradle || true
          elif [ -f "templates/${TEMPLATE}/settings.gradle" ]; then
            cp -a "templates/${TEMPLATE}/settings.gradle" ./settings.gradle
            rm -f ./settings.gradle.kts || true
          fi

          # 可选：同步模板的 gradle.properties
          [ -f "templates/${TEMPLATE}/gradle.properties" ] && cp -a "templates/${TEMPLATE}/gradle.properties" ./ || true

          echo "NDJC_WORKDIR=${GITHUB_WORKSPACE}" >> "$GITHUB_ENV"
          echo "APP_DIR=app" >> "$GITHUB_ENV"

      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-materialize.sh

      - name: NDJC | Materialize (sanitize + apply plan → workspace app)
        shell: bash
        env:
          PLAN_JSON: ${{ env.PLAN_JSON }}
          PLAN_JSON_SAN: ${{ env.PLAN_JSON_SAN }}
          APPLY_JSON: ${{ env.APPLY_JSON }}
          APP_DIR: ${{ env.APP_DIR }}
          REQ_DIR: ${{ env.REQ_DIR }}
          RUN_ID: ${{ env.RUN_ID }}
          NDJC_WORKDIR: ${{ env.NDJC_WORKDIR }}
        run: |
          set -euo pipefail
          echo "PLAN_JSON=${PLAN_JSON}"
          echo "PLAN_JSON_SAN=${PLAN_JSON_SAN}"
          echo "APPLY_JSON=${APPLY_JSON}"
          echo "APP_DIR=${APP_DIR}"
          echo "NDJC_WORKDIR=${NDJC_WORKDIR}"

          # 执行物化（脚本内按 APP_DIR/NDJC_WORKDIR 工作）
          scripts/ndjc-materialize.sh "${APP_DIR}" "${RUN_ID}"

          # 快速查看计划（原始 & 消毒后）
          echo "---- 02_plan.json (first 120 lines) ----"
          sed -n '1,120p' "${PLAN_JSON}" || true
          echo "---- 02_plan.sanitized.json (first 120 lines) ----"
          sed -n '1,120p' "${PLAN_JSON_SAN}" || true

      - name: Show modified files after materialize
        shell: bash
        run: |
          set -euo pipefail
          echo "Diff after materialize (app/ should have changes):"
          git add -N app || true
          git status --porcelain
          git diff --name-only | sed 's/^/ - /' || true
          # 生成一个清单文件便于下载
          git diff --name-only > modified-files.txt || true

      # （可选）若需要将结果留痕到运行分支，打开以下步骤
      - name: Commit & push to run branch (optional)
        if: steps.checkout_run.outputs.has_run_branch == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git add app "${REQ_DIR}" modified-files.txt || true
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "NDJC materialize ${RUN_ID}" || echo "nothing to commit"
          git push origin "${RUN_BRANCH}" || true

      # ---------- 构建前守卫 ----------
      - name: Guards (root settings & app module)
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "./settings.gradle" && ! -f "./settings.gradle.kts" ]]; then
            echo "::error::settings.gradle(.kts) not found at repository root"
            exit 1
          fi
          if [[ ! -f "app/build.gradle" && ! -f "app/build.gradle.kts" ]]; then
            echo "::error::build.gradle(.kts) not found under app/"
            exit 1
          fi

      # ---------- 构建 ----------
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # ✅ 新增：杀掉守护进程 + 清理（最小侵入）
      - name: Pre-clean Gradle (stop daemons & clean)
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew || true
          ./gradlew --stop || true
          ./gradlew --no-daemon :app:clean

      - name: Build (debug)
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew || true
          ./gradlew --no-daemon --stacktrace :app:assembleDebug

      # ---------- 产物上传（失败也上传诊断） ----------
      - name: Upload APK artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-apk-${{ env.RUN_ID }}
          path: |
            app/build/outputs/apk/**/*.apk
          if-no-files-found: warn

      - name: NDJC | Upload logs & plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            modified-files.txt
            requests/${{ env.RUN_ID }}/01_*.json
            requests/${{ env.RUN_ID }}/02_plan.json
            requests/${{ env.RUN_ID }}/02_plan.sanitized.json
            requests/${{ env.RUN_ID }}/03_apply_result.json
            build-logs/**/*
          if-no-files-found: warn
