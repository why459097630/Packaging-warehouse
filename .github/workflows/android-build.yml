name: Android Build (NDJC)

on:
  # 由前端服务触发
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --- 0) Bootstrap checkout（拿到仓库根目录，供脚本等使用） ---
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4

      # --- 1) 解析触发输入，写入 env & Job Summary ---
      - name: Resolve inputs → env & write summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 从 repository_dispatch 里取 runId/branch；为空则兜底
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          RUN_BRANCH="${{ github.event.client_payload.branch || '' }}"
          TEMPLATE="${{ github.event.client_payload.template || 'circle-basic' }}"

          if [[ -z "${RUN_ID}" ]]; then
            # 兜底：用当前 workflow run id 充当，但前端应始终传 runId
            RUN_ID="ndjc-${GITHUB_RUN_ID}"
          fi
          if [[ -z "${RUN_BRANCH}" ]]; then
            RUN_BRANCH="ndjc-run/${RUN_ID}"
          fi

          echo "RUN_ID=${RUN_ID}"           | tee -a "$GITHUB_ENV"
          echo "RUN_BRANCH=${RUN_BRANCH}"   | tee -a "$GITHUB_ENV"
          echo "TEMPLATE=${TEMPLATE}"       | tee -a "$GITHUB_ENV"

          # 方便后续脚本：在不同工作树路径下分别 checkout
          echo "REPO_RUN=repo_run"   | tee -a "$GITHUB_ENV"
          echo "REPO_MAIN=repo_main" | tee -a "$GITHUB_ENV"

          # 生成概要（包含可点击的分支与请求目录）
          {
            echo "### NDJC build inputs"
            echo ""
            echo "- Run ID: \`${RUN_ID}\`"
            echo "- Run branch: [\`${RUN_BRANCH}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- Requests (will be generated): [\`requests/${RUN_ID}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/requests/${RUN_ID})"
            echo "- Expect plan at: \`requests/${RUN_ID}/02_plan.json\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # --- 2) Checkout 运行分支：用于构建和日志落地 ---
      - name: Checkout run branch (for build & logs)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          path: ${{ env.REPO_RUN }}

      # --- 3) Checkout main：作为请求文件回退目录 ---
      - name: Checkout main (fallback for requests)
        uses: actions/checkout@v4
        with:
          ref: main
          path: ${{ env.REPO_MAIN }}

      # --- 4) 定位 02_plan.json（优先 run 分支，失败回退 main） ---
      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          set -x

          PLAN_RUN="${REPO_RUN}/requests/${RUN_ID}/02_plan.json"
          PLAN_MAIN="${REPO_MAIN}/requests/${RUN_ID}/02_plan.json"

          if [[ -f "${PLAN_RUN}" ]]; then
            PLAN_PATH="${PLAN_RUN}"
            SRC="from run-branch"
          elif [[ -f "${PLAN_MAIN}" ]]; then
            PLAN_PATH="${PLAN_MAIN}"
            SRC="from main"
          else
            echo "::error::02_plan.json not found in either '${PLAN_RUN}' or '${PLAN_MAIN}'."
            exit 1
          fi

          echo "PLAN_PATH=${PLAN_PATH}" | tee -a "$GITHUB_ENV"
          echo "Found 02_plan.json at \`${PLAN_PATH#${PWD}/}\` (${SRC})" >> "$GITHUB_STEP_SUMMARY"

      # --- 5) 保证 materialize 脚本可执行 ---
      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-materialize.sh

      # --- 6) 执行 Materialize（把 plan 应用到模板） ---
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          ./scripts/ndjc-materialize.sh "${PLAN_PATH}"

      # ====== （可选）后续真实构建环节：需要时放开 ======
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v4

      # 你可以根据模板/产物开启 assembleDebug 等；当前占位以便后续对接
      - name: Build (debug)
        shell: bash
        run: |
          echo "No-op build step (hook for real Gradle tasks)."

      # --- 7) 上传 materialize 相关日志/快照（使用 v4，避免 v3 废弃问题） ---
      - name: NDJC | Upload materialize logs
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          if-no-files-found: warn
          path: |
            build-logs/**
            requests/${{ env.RUN_ID }}/03_apply_result.json
            actions-summary.txt
            build-logs/**/*.txt
            build-logs/**/*.log
            **/build/reports/**
            **/build/outputs/**

      # --- 8) 结束 ---
      - name: Complete job
        run: echo "Done."
