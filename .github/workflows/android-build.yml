name: Android Build (NDJC • single-tree)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  # 默认模板，可由 client_payload.template 覆盖
  TEMPLATE_DEFAULT: circle-basic

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Resolve inputs → env & summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 1) 解析输入
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          TEMPLATE="${{ github.event.client_payload.template || '' }}"
          [ -n "$TEMPLATE" ] || TEMPLATE="${TEMPLATE_DEFAULT}"

          if [ -z "$RUN_ID" ]; then
            # 无 runId 时，用时间戳兜底，仍然要求能在仓库中找到 plan
            RUN_ID="ndjc-$(date -u +%Y-%m-%dT%H-%M%SZ)-${GITHUB_RUN_ID}"
          fi

          RUN_BRANCH="ndjc-run/${RUN_ID}"
          APP_DIR="templates/${TEMPLATE}/app"
          REQ_DIR="requests/${RUN_ID}"

          # 2) 写入环境
          {
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_BRANCH=${RUN_BRANCH}"
            echo "TEMPLATE=${TEMPLATE}"
            echo "APP_DIR=${APP_DIR}"
            echo "REQ_DIR=${REQ_DIR}"
            # 计划、应用结果文件规范路径（相对仓库根）
            echo "PLAN_JSON=${REQ_DIR}/02_plan.json"
            echo "APPLY_JSON=${REQ_DIR}/03_apply_result.json"
          } >> "$GITHUB_ENV"

          # 3) 输出构建摘要（方便点击）
          {
            echo "### NDJC build inputs"
            echo "- **Run ID:** \`${RUN_ID}\`"
            echo "- **Run branch:** [\`${RUN_BRANCH}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})"
            echo "- **Template:** \`${TEMPLATE}\` — **APP_DIR:** \`${APP_DIR}\`"
            echo "- **Requests (will be generated):** [\`requests/${RUN_ID}\`](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/requests/${RUN_ID})"
            echo "- **Expect plan at:** \`${REQ_DIR}/02_plan.json\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # -------------------------------
      # 优先在 run 分支上构建 & 查计划；若 run 分支不存在则回退到 main
      # -------------------------------
      - name: Checkout run branch
        id: checkout_run
        shell: bash
        run: |
          set -euo pipefail
          RB="${RUN_BRANCH}"
          if git ls-remote --exit-code origin "refs/heads/${RB}" >/dev/null 2>&1; then
            git fetch origin "${RB}:${RB}" --depth=50
            git checkout "${RB}"
            echo "has_run_branch=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_run_branch=false" >> "$GITHUB_OUTPUT"
            echo "Run branch '${RB}' not found; will fallback to 'main' for locating plan."
          fi

      - name: Checkout main (fallback for requests)
        if: steps.checkout_run.outputs.has_run_branch == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --depth=50
          git checkout main

      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail

          PLAN_PATH="${PLAN_JSON}"

          found_at=""
          # a) 先看当前所在分支（若之前成功切到 run 分支，就在 run 分支；否则是 main）
          if [ -f "${PLAN_PATH}" ]; then
            found_at="$(git rev-parse --abbrev-ref HEAD)"
          else
            # b) 若当前是 run 分支但没找到，再到 main 尝试
            HEAD_B="$(git rev-parse --abbrev-ref HEAD)"
            if [ "${HEAD_B}" != "main" ]; then
              git checkout -q main
              if [ -f "${PLAN_PATH}" ]; then
                found_at="main"
              fi
            fi
          fi

          if [ -z "${found_at}" ]; then
            echo "::error::Plan JSON NOT found at ${PLAN_PATH} (searched run branch then main)."
            exit 1
          fi

          echo "PLAN_BRANCH=${found_at}" >> "$GITHUB_ENV"

          {
            echo "- **Found 02_plan.json at:** \`${PLAN_PATH}\` *(from ${found_at})*"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-materialize.sh

      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        env:
          PLAN_JSON: ${{ env.PLAN_JSON }}
          APPLY_JSON: ${{ env.APPLY_JSON }}
          APP_DIR: ${{ env.APP_DIR }}
          REQ_DIR: ${{ env.REQ_DIR }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          echo "PLAN_JSON=${PLAN_JSON}"
          echo "APPLY_JSON=${APPLY_JSON}"
          echo "APP_DIR=${APP_DIR}"
          scripts/ndjc-materialize.sh

      # -------------- 可选：构建 Android（保持精简） --------------
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (debug)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :app:assembleDebug

      # -------------- 产出与诊断 --------------
      - name: NDJC | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**/* 
            requests/${{ env.RUN_ID }}/02_plan.json
            requests/${{ env.RUN_ID }}/03_apply_result.json
          if-no-files-found: warn
