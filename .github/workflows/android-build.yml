name: Android Build

on:
  # 方式1：自动触发 —— 只有当 .ndjc/triggered 被推到 ndjc-run/* 分支时才触发
  push:
    branches:
      - 'ndjc-run/**'
    paths:
      - '.ndjc/triggered'

  # 方式2：保留手动/API 触发（后端暂时没写哨兵时仍可用）
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "template key (core/simple/form)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false

concurrency:
  group: android-build-${{ github.ref }}-${{ inputs.runId || 'auto' }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 防止半成品触发（双保险：即使有人手动dispatch，也会在缺文件时快速失败）
      - name: Sanity check
        run: |
          test -f ./gradlew || { echo "gradlew missing"; exit 1; }
          test -d app || { echo "app/ missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "app Gradle file missing"; exit 1; }

      - name: Fingerprint
        run: |
          echo "HEAD -> $(git rev-parse --short HEAD)"
          echo "RunId='${{ inputs.runId }}' Template='${{ inputs.template }}' AppTitle='${{ inputs.appTitle }}' Pkg='${{ inputs.packageName }}'"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: |
          chmod +x ./gradlew
          ./gradlew --version

      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"

      - name: Build
        id: build
        shell: bash
        run: |
          set -e
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace
            APK=$(ls -t app/build/outputs/apk/debug/*.apk | head -n1)
            VARIANT=debug
          else
            echo "Keystore present → build Release (Gradle will sign if env is valid)"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace
            # 仅选择“已签名”APK，排除 -unsigned
            APK=$(ls -t app/build/outputs/apk/release/app-release*.apk | grep -v unsigned | head -n1 || true)
            if [ -z "$APK" ]; then
              echo "No signed release APK found (only *-unsigned.apk). Check signing env/build.gradle."
              ls -lh app/build/outputs/apk/release || true
              exit 2
            fi
            VARIANT=release
          fi
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          echo "variant=$VARIANT" >> "$GITHUB_OUTPUT"
          ls -lh "$APK"

      - name: List release outputs
        if: ${{ steps.build.outputs.variant == 'release' }}
        run: ls -lh app/build/outputs/apk/release

      - name: Verify Release signature
        if: ${{ steps.build.outputs.variant == 'release' }}
        run: |
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "${{ steps.build.outputs.apk }}"

      - name: Summarize
        run: |
          P="${{ steps.build.outputs.apk }}"
          APPID=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest application-id "$P")
          VC=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-code "$P")
          VN=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-name "$P")
          echo "### NDJC Android Build" >> $GITHUB_STEP_SUMMARY
          echo "- Variant: **${{ steps.build.outputs.variant }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Package: \`$APPID\`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`$VN\` (code $VC)" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: \`${{ github.ref }}\`  Commit: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.build.outputs.variant }}
          path: ${{ steps.build.outputs.apk }}
          if-no-files-found: error
