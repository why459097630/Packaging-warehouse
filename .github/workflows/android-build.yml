name: Android Build (NDJC • single-tree)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # 你可以按需把模板切到 flow/map/shop/showcase
      TEMPLATE: circle-basic
      APP_DIR: templates/circle-basic/app

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inputs → env & summary
        shell: bash
        run: |
          set -euo pipefail

          # 解析运行分支及 RUN_ID（ndjc-run/<RUN_ID>）
          RUN_BRANCH="${GITHUB_REF_NAME}"
          if [[ "$RUN_BRANCH" != ndjc-run/* ]]; then
            # 兼容：不是 ndjc-run 分支时，仍从 payload / fallback 生成 RUN_ID
            RUN_BRANCH="ndjc-run/$(date -u +%Y-%m-%dT%H-%M-%SZ)-${GITHUB_RUN_ID}"
          fi
          RUN_ID="${RUN_BRANCH#ndjc-run/}"

          REQUESTS_DIR="requests/${RUN_ID}"
          PLAN_JSON="${REQUESTS_DIR}/02_plan.json"
          APPLY_JSON="${REQUESTS_DIR}/03_apply_result.json"

          echo "RUN_BRANCH=${RUN_BRANCH}"      >> "$GITHUB_ENV"
          echo "RUN_ID=${RUN_ID}"              >> "$GITHUB_ENV"
          echo "REQUESTS_DIR=${REQUESTS_DIR}"  >> "$GITHUB_ENV"
          echo "PLAN_JSON=${PLAN_JSON}"        >> "$GITHUB_ENV"
          echo "APPLY_JSON=${APPLY_JSON}"      >> "$GITHUB_ENV"

          {
            echo "### NDJC build inputs"
            echo ""
            echo "- **Run ID:** \`${RUN_ID}\`"
            echo "- **Run branch:** [\`${RUN_BRANCH}\`](https://github.com/${GITHUB_REPOSITORY}/tree/${RUN_BRANCH})"
            echo "- **Template:** \`${TEMPLATE}\` — **APP_DIR:** \`${APP_DIR}\`"
            echo "- **Requests (will be generated):** [\`${REQUESTS_DIR}\`](https://github.com/${GITHUB_REPOSITORY}/tree/${RUN_BRANCH}/${REQUESTS_DIR} )"
            echo "- **Expect plan at:** \`${PLAN_JSON}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout run branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          fetch-depth: 0

      - name: Require plan in run branch
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "${PLAN_JSON}" ]]; then
            echo "::error::Plan JSON not found at ${PLAN_JSON}"
            exit 1
          fi
          echo "Found 02_plan.json at ${PLAN_JSON}"

      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: |
          chmod +x scripts/ndjc-materialize.sh

      # 关键修复：PLAN_JSON 不再拼 APP_DIR；只把 APP_DIR 当作模板路径传给脚本
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "PLAN_JSON=${PLAN_JSON}"
          echo "APP_DIR=${APP_DIR}"
          echo "APPLY_JSON=${APPLY_JSON}"
          ./scripts/ndjc-materialize.sh "${PLAN_JSON}" "${APP_DIR}" "${APPLY_JSON}"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Build (debug)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon :app:assembleDebug

      - name: NDJC | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**/*
            **/build/outputs/**/*
            ${{ env.REQUESTS_DIR }}/03_apply_result.json
          if-no-files-found: warn

      - name: Post Checkout run branch
        if: always()
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          fetch-depth: 0
