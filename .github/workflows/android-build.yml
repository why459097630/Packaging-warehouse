name: Android Build (NDJC)

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "Template key (circle/flow/map/shop/showcase)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      branch:
        description: "Branch to build (e.g. ndjc-run/<runId>)"
        required: false
      app_dir:
        description: "Android module dir (e.g. templates/circle-basic/app or app)"
        required: false
      preflight_mode:
        description: "Preflight mode: warn (default) or strict"
        required: false
        default: "warn"
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

concurrency:
  group: android-build-${{ github.event_name }}-${{ inputs.runId || github.event.client_payload.runId || inputs.branch || github.event.client_payload.ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.event.client_payload.ref || github.ref }}

      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ inputs.runId }}"
          if [ -z "${RUN_ID}" ]; then RUN_ID="${{ github.event.client_payload.runId }}"; fi
          if [ -z "${RUN_ID}" ]; then RUN_ID="ndjc-$(date -u +%Y%m%dT%H%M%SZ)"; fi
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_ENV"

          BR="${{ inputs.branch }}"
          if [ -z "${BR}" ]; then BR="${{ github.event.client_payload.ref }}"; fi
          if [ -z "${BR}" ]; then BR="${{ github.ref }}"; fi
          BR="${BR#refs/heads/}"
          echo "BUILD_BRANCH=${BR}" >> "$GITHUB_ENV"

          echo "runId=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "branch=${BR}" >> "$GITHUB_OUTPUT"
          echo "Resolved RUN_ID=${RUN_ID}, BUILD_BRANCH=${BR}"

      - name: NDJC | Show commit info
        shell: bash
        run: |
          echo "HEAD: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "inputs.branch: '${{ inputs.branch }}'"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          git show --name-only --oneline -1

      - name: Resolve project paths (APP_DIR/PROJ_DIR)
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ inputs.template || github.event.client_payload.template || '' }}"
          APP_DIR_IN="${{ inputs.app_dir || '' }}"
          APP_DIR=""
          if [ -n "$APP_DIR_IN" ]; then
            APP_DIR="$APP_DIR_IN"
          else
            if [ -f app/build.gradle ] || [ -f app/build.gradle.kts ]; then
              APP_DIR="app"
            elif [ -n "$TEMPLATE" ] && [ -d "templates/$TEMPLATE/app" ] && { [ -f "templates/$TEMPLATE/app/build.gradle" ] || [ -f "templates/$TEMPLATE/app/build.gradle.kts" ]; }; then
              APP_DIR="templates/$TEMPLATE/app"
            else
              for d in templates/*/app; do
                if [ -f "$d/build.gradle" ] || [ -f "$d/build.gradle.kts" ]; then APP_DIR="$d"; break; fi
              done
            fi
          fi
          if [ -z "$APP_DIR" ]; then
            echo "::error::Cannot locate Android module. Provide inputs.app_dir or ensure app/build.gradle exists."
            exit 1
          fi
          PROJ_DIR="${APP_DIR%/app}"
          if [ "$PROJ_DIR" = "$APP_DIR" ]; then PROJ_DIR="."; fi
          echo "APP_DIR=$APP_DIR"   >> "$GITHUB_ENV"
          echo "PROJ_DIR=$PROJ_DIR" >> "$GITHUB_ENV"
          echo "app_dir=$APP_DIR"   >> "$GITHUB_OUTPUT"
          echo "proj_dir=$PROJ_DIR" >> "$GITHUB_OUTPUT"
          echo "Resolved APP_DIR=$APP_DIR, PROJ_DIR=$PROJ_DIR"

      - name: Sanity check
        shell: bash
        run: |
          set -euo pipefail
          test -f ./gradlew || { echo "::error::gradlew missing"; exit 1; }
          test -d "$APP_DIR" || { echo "::error::APP_DIR '$APP_DIR' missing"; exit 1; }
          test -f "$APP_DIR/build.gradle" -o -f "$APP_DIR/build.gradle.kts" || { echo "::error::Gradle file missing under $APP_DIR"; exit 1; }
          test -f "$APP_DIR/src/main/AndroidManifest.xml" || { echo "::error::AndroidManifest.xml missing under $APP_DIR/src/main"; exit 1; }

      # --------- 关键：在 JDK/Gradle 前先跑 Guards，防止“空注入”继续向下 ---------
      - name: Ensure Python (alias)
        shell: bash
        run: |
          python3 --version >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y python3; }
          echo "python3 ok: $(python3 --version 2>&1 || true)"

      - name: NDJC | Guards (strict fail if un-injected)
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/ndjc-guards.sh || true
          sed -i 's/\r$//' scripts/ndjc-guards.sh || true
          scripts/ndjc-guards.sh "$APP_DIR" "${RUN_ID}"
      # --------------------------------------------------------------------------

      - name: Setup Java 17
        id: jdk
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          check-latest: true

      - name: Force JDK 17 for all next steps
        shell: bash
        run: |
          echo "JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          echo "${{ steps.jdk.outputs.path }}/bin" >> "$GITHUB_PATH"
          echo "ORG_GRADLE_JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          echo "Using JAVA_HOME=${{ steps.jdk.outputs.path }}"
          java -version

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # ---------------- Preflight ----------------
      - name: NDJC | Preflight (anchors & resources)
        id: preflight
        shell: bash
        continue-on-error: ${{ (inputs.preflight_mode || 'warn') != 'strict' }}
        run: |
          set -euo pipefail
          mkdir -p anchors build-logs
          if [ -x .github/scripts/ndjc-preflight.sh ]; then
            .github/scripts/ndjc-preflight.sh "$APP_DIR" "${{ inputs.preflight_mode || 'warn' }}" | tee build-logs/preflight.log
          else
            echo "::warning::.github/scripts/ndjc-preflight.sh not found; doing minimal checks" | tee build-logs/preflight.log
            [ -f "$APP_DIR/src/main/AndroidManifest.xml" ] || echo "::error::missing $APP_DIR/src/main/AndroidManifest.xml" | tee -a build-logs/preflight.log
            [ -f "$APP_DIR/src/main/res/values/strings.xml" ] || echo "::warning::missing $APP_DIR/src/main/res/values/strings.xml" | tee -a build-logs/preflight.log
          fi

      - name: NDJC | Upload preflight logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preflight-logs-${{ env.RUN_ID }}
          path: |
            anchors/**
            build-logs/preflight.log
          if-no-files-found: ignore

      # 其余步骤（probe/build/upload/summary …）保持不变 …
      # -------------- 下面省略不变部分，你可继续沿用现有文件 -----------------
      # （为避免贴过长，此处不重复；除上面的 Guards 新增外，其它内容按你当前版本即可）
