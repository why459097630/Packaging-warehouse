name: Android Build (NDJC)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  APP_DIR: templates/circle-basic/app
  TEMPLATE_NAME: circle-basic

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        run: echo "runner ready"

      - name: Checkout (bootstrap)
        uses: actions/checkout@v4

      # 解析 runId、拼接运行分支与请求目录，并在 Summary 里给出可点击链接
      - name: Resolve inputs → env & write summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          if [[ -z "${RUN_ID}" ]]; then
            # 兜底：用当前时间生成一个
            RUN_ID="ndjc-$(date -u +'%Y-%m-%dT%H-%M-%SZ')-$(openssl rand -hex 6)"
          fi

          RUN_BRANCH="ndjc-run/${RUN_ID}"
          REQ_DIR="requests/${RUN_ID}"
          APPLY_JSON="${REQ_DIR}/03_apply_result.json"
          # 注意：脚本会用 "${REQ_DIR}/${PLAN_JSON}" 拼接，所以这里只保留文件名
          PLAN_JSON="02_plan.json"

          {
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_BRANCH=${RUN_BRANCH}"
            echo "REQ_DIR=${REQ_DIR}"
            echo "PLAN_JSON=${PLAN_JSON}"
            echo "APPLY_JSON=${APPLY_JSON}"
          } >> "$GITHUB_ENV"

          REQ_URL="https://github.com/${{ github.repository }}/tree/${RUN_BRANCH}/${REQ_DIR}"
          echo "### NDJC build inputs"           >> "$GITHUB_STEP_SUMMARY"
          echo "- **Run ID:** \`${RUN_ID}\`"     >> "$GITHUB_STEP_SUMMARY"
          echo "- **Run branch:** [${RUN_BRANCH}](https://github.com/${{ github.repository }}/tree/${RUN_BRANCH})" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Requests (will be generated):** [${REQ_DIR}](${REQ_URL})" >> "$GITHUB_STEP_SUMMARY"

      # 为了构建与日志回写：检出 run 分支（不存在时无碍，后续会 fallback）
      - name: Checkout run branch (for build & logs)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          path: repo_run
        continue-on-error: true

      # 回退：检出 main，用于从 main 上读取 requests（如果 run 分支没有 02_plan.json）
      - name: Checkout main (fallback for requests)
        uses: actions/checkout@v4
        with:
          ref: main
          path: repo_main

      # 在 run 分支优先寻找 02_plan.json；没有就回退到 main
      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          PLAN_NAME="${PLAN_JSON:-02_plan.json}"

          if [[ -f "repo_run/${REQ_DIR}/${PLAN_NAME}" ]]; then
            SRC="repo_run"
            echo "FOUND_IN=run" >> "$GITHUB_ENV"
            echo "Found ${PLAN_NAME} at ${REQ_DIR}/${PLAN_NAME} (from run-branch)" >> "$GITHUB_STEP_SUMMARY"
          elif [[ -f "repo_main/${REQ_DIR}/${PLAN_NAME}" ]]; then
            SRC="repo_main"
            echo "FOUND_IN=main" >> "$GITHUB_ENV"
            echo "Found ${PLAN_NAME} at ${REQ_DIR}/${PLAN_NAME} (from main)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "::error::${PLAN_NAME} not found in either run branch (repo_run/${REQ_DIR}) or main (repo_main/${REQ_DIR})."
            exit 1
          fi

          # 把找到的 requests 目录复制回工作区，后续步骤统一从 ./requests/... 访问
          mkdir -p requests
          rsync -a "${SRC}/${REQ_DIR}/" "requests/${{ env.RUN_ID }}/"

      - name: Make ndjc-materialize.sh executable
        run: chmod +x scripts/ndjc-materialize.sh

      # 应用 plan → 模板
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_DIR=${APP_DIR}"
          echo "REQ_DIR=${REQ_DIR}"
          echo "PLAN_JSON=${PLAN_JSON}"
          echo "APPLY_JSON=${APPLY_JSON}"

          # scripts/ndjc-materialize.sh 内部会用 "${REQ_DIR}/${PLAN_JSON}" 作为输入
          ./scripts/ndjc-materialize.sh

      # 下面是常规 Android 构建，你可以保留/调整；这里放一个占位示例
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (debug)
        run: |
          echo "(placeholder) ./gradlew assembleDebug"

      # 上传 materialize 与诊断日志
      - name: NDJC | Upload materialize logs
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            build-logs/**/*
            requests/${{ env.RUN_ID }}/actions-summary.txt
            requests/${{ env.RUN_ID }}/summary.json
          if-no-files-found: warn
