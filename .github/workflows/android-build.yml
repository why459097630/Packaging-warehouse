name: Android Build

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "template key (core/simple/form)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      # NDJC:CI_WF_INPUTS_EXTRA
      # channel:
      #   description: "release channel"
      #   required: false
  repository_dispatch:
    types: [generate-apk]

concurrency:
  group: android-build-${{ github.ref }}-${{ inputs.runId || github.event.client_payload.runId || 'NA' }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      # NDJC:CI_ENV
      # API_BASE: https://api.example.com
      # TRACK: internal

    steps:
      # NDJC:CI_PRECHECK_STEPS
      # - name: Preflight - custom checks
      #   run: echo "custom preflight"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: NDJC | Show commit and changed files
        run: |
          echo "HEAD sha: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          echo "---- files touched in this commit ----"
          git show --name-only --pretty=oneline "$(git rev-parse HEAD)"

      # 新增：模板锚点自检（缺失直接 fail）
      - name: NDJC | Anchors Self-Check (templates)
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
          ./Tools/ndjc-selfcheck.ps1 -TemplatesDir 'templates' -ExpectedDir 'anchors' -FailOnMissing:$true

      # 保险丝 1：本次必须动到 app/，否则可能是空提交触发
      - name: NDJC | Fail if this commit didn't touch app/
        run: |
          CHANGED_APP=$(git show --name-only --pretty=oneline "$(git rev-parse HEAD)" | grep '^app/' || true)
          if [ -z "$CHANGED_APP" ]; then
            echo "No app/ changes in this commit -> would be empty APK. Failing early."
            exit 3
          fi
          echo "$CHANGED_APP"

      # 保险丝 2：必须存在最近一轮 requests 日志（生成器应已写回）
      - name: NDJC | Verify requests logs exist
        run: |
          set -e
          latest=$(ls -dt requests/* 2>/dev/null | head -n1 || true)
          if [ -z "$latest" ]; then
            echo "No requests/* found"; exit 1
          fi
          test -f "$latest/02_plan.json"
          test -f "$latest/03_apply_result.json"
          echo "Found logs in: $latest"

      # 保险丝 3（修正）：关键锚点替换数必须 > 0（只统计关键锚点）
      - name: NDJC | Fail if no critical anchors replaced
        run: |
          set -e
          latest=$(ls -dt requests/* | head -n1)
          jq -r '.' "$latest/03_apply_result.json" >/dev/null 2>&1 || { echo "Bad JSON"; cat "$latest/03_apply_result.json"; exit 1; }

          # 关键锚点名单（与 generator 内一致）
          KEY='["NDJC:PACKAGE_NAME","NDJC:APP_LABEL","NDJC:HOME_TITLE","NDJC:MAIN_BUTTON","NDJC:BLOCK:PERMISSIONS","NDJC:BLOCK:INTENT_FILTERS"]'

          COUNT=$(jq --argjson KEY "$KEY" '
            [ .[] | .changes[]
              | select(.replacedCount>0)
              | select(.marker as $m | $KEY | index($m))
              | .replacedCount
            ] | add // 0
          ' "$latest/03_apply_result.json")

          echo "Critical replacements total: $COUNT"
          if [ -z "$COUNT" ] || [ "$COUNT" -eq 0 ]; then
            echo "No critical anchors replaced -> abort"
            exit 2
          fi

      - name: Sanity check
        run: |
          test -f ./gradlew || { echo "gradlew missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "app Gradle file missing"; exit 1; }

      - name: Fingerprint
        run: |
          echo "HEAD -> $(git rev-parse --short HEAD)"
          echo "Ref   -> $GITHUB_REF"
          echo "RunId='${{ inputs.runId || github.event.client_payload.runId }}' Template='${{ inputs.template || github.event.client_payload.template }}' AppTitle='${{ inputs.appTitle || github.event.client_payload.appTitle }}' Pkg='${{ inputs.packageName || github.event.client_payload.packageName }}'"

      # ===== JDK / Gradle =====
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # NDJC:CI_GRADLE_CACHE
          # cache-read-only: false

      - name: Make gradlew executable
        run: |
          chmod +x ./gradlew
          ./gradlew --version

      # 有则解码签名；无则走 Debug
      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"
          ls -lh "$HOME/release.jks" || true

      # NDJC:CI_PRE_BUILD
      # - name: Before build hook
      #   run: echo "pre build hook"

      - name: Build
        id: build
        shell: bash
        run: |
          set -e
          # NDJC:CI_BUILD_ARGS
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/debug
            VARIANT=debug
          else
            echo "Keystore present → build Release"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/release
            VARIANT=release
          fi

          echo "== list $OUTDIR =="
          ls -lah "$OUTDIR" || true

          SIGNED=$(ls -t "$OUTDIR"/*.apk 2>/dev/null | grep -Ev -- '-unsigned\.apk$' | head -n1 || true)
          UNSIGNED=$(ls -t "$OUTDIR"/*-unsigned.apk 2>/dev/null | head -n1 || true)

          APK=""
          if [ -n "$SIGNED" ]; then
            APK="$SIGNED"
            echo "Found signed APK: $APK"
          elif [ -n "$UNSIGNED" ]; then
            APK="$UNSIGNED"
            echo "Found unsigned APK: $APK"
          else
            echo "No APK found under $OUTDIR"
          fi

          echo "APK=$APK"         >> "$GITHUB_ENV"
          echo "VARIANT=$VARIANT" >> "$GITHUB_ENV"
          echo "apk=$APK"         >> "$GITHUB_OUTPUT"
          echo "variant=$VARIANT" >> "$GITHUB_OUTPUT"

      - name: Fallback sign release APK (if unsigned but keystore present)
        if: ${{ env.KS != '' && env.VARIANT == 'release' }}
        shell: bash
        run: |
          set -e
          if [ -z "${APK}" ]; then
            echo "No APK path from previous step; cannot sign."
            exit 0
          fi
          if echo "${APK}" | grep -q -- '-unsigned\.apk$'; then
            OUT="${APK%-unsigned.apk}.apk"
            echo "Unsigned APK detected → signing: ${APK} -> ${OUT}"
            "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" sign \
              --ks "$NDJC_KEYSTORE_PATH" \
              --ks-pass pass:"$NDJC_KEYSTORE_PASSWORD" \
              --key-pass pass:"$NDJC_KEY_PASSWORD" \
              --ks-key-alias "$NDJC_KEY_ALIAS" \
              --out "$OUT" "$APK"
            ls -lh "$OUT"
            echo "APK=$OUT" >> "$GITHUB_ENV"
          else
            echo "APK appears signed already: ${APK}"
          fi

      - name: List release outputs
        if: ${{ env.VARIANT == 'release' }}
        run: ls -lh app/build/outputs/apk/release || true

      - name: Verify Release signature
        if: ${{ env.VARIANT == 'release' }}
        run: |
          test -n "${APK}" || { echo "No release APK to verify"; exit 1; }
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "${APK}"

      # NDJC:CI_AFTER_BUILD
      # - name: After build hook
      #   run: echo "after build hook"

      - name: Summarize
        run: |
          P="${APK}"
          test -n "$P" || { echo "No APK to summarize"; exit 1; }
          APPID=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest application-id "$P")
          VC=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-code "$P")
          VN=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-name "$P")
          echo "### NDJC Android Build" >> $GITHUB_STEP_SUMMARY
          echo "- Variant: **${VARIANT}**" >> $GITHUB_STEP_SUMMARY
          echo "- Package: \`$APPID\`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`$VN\` (code $VC)" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: \`${{ github.ref }}\`  Commit: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY
          # NDJC:CI_SUMMARY_EXTRA
          # echo "- Channel: \`${{ inputs.channel || 'NA' }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.VARIANT }}
          path: ${{ env.APK }}
          if-no-files-found: error

      # NDJC:CI_PUBLISH_STEPS
      # - name: Publish to store / CDN
      #   run: echo "upload to store"

      # NDJC:CI_NOTIFY_STEPS
      # - name: Notify
      #   run: echo "notify slack/feishu"
