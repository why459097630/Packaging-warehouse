name: Android Build (NDJC)

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id（不要带 requests/ 前缀）"
        required: true
      template:
        description: "Template key (circle-basic/flow/map/shop/showcase)"
        required: false
        default: "circle-basic"
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      branch:
        description: "Branch to build (e.g. ndjc-run/<runId>)"
        required: false
      app_dir:
        description: "Android module dir (e.g. templates/circle-basic/app or app)"
        required: false
      preflight_mode:
        description: "Preflight mode: warn (default) or strict"
        required: false
        default: "warn"
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.event.client_payload.ref || github.ref }}

      - name: NDJC | Show commit info
        run: |
          echo "HEAD: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "inputs.runId: '${{ inputs.runId }}'"
          echo "client_payload.runId: '${{ github.event.client_payload.runId }}'"

      # 关键修复点：规范 runId，去掉可能的 `requests/` 前缀，并统一导出 PLAN/APPLY 路径
      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 1) 取 runId（优先 workflow_dispatch，其次 repository_dispatch）
          RID_IN="${{ inputs.runId || github.event.client_payload.runId || '' }}"
          if [ -z "$RID_IN" ]; then
            echo "::error::runId missing (inputs.runId or client_payload.runId required)"
            exit 1
          fi

          # 2) 去掉可能的 'requests/' 前缀，防止拼出 'requests/requests/...'
          RID="${RID_IN#requests/}"
          echo "RUN_ID=$RID"               >> "$GITHUB_ENV"
          echo "REQ_DIR=requests/$RID"     >> "$GITHUB_ENV"
          echo "PLAN_JSON=requests/$RID/02_plan.json"   >> "$GITHUB_ENV"
          echo "APPLY_JSON=requests/$RID/03_apply_result.json" >> "$GITHUB_ENV"

          # 3) 解析 APP_DIR（优先 inputs.app_dir，否则按模板推断）
          TPL="${{ inputs.template || github.event.client_payload.template || 'circle-basic' }}"
          APP_DIR_IN="${{ inputs.app_dir || '' }}"
          if [ -n "$APP_DIR_IN" ]; then
            APP_DIR="$APP_DIR_IN"
          else
            if [ -d "templates/$TPL/app" ]; then
              APP_DIR="templates/$TPL/app"
            elif [ -d "app" ]; then
              APP_DIR="app"
            else
              echo "::error::Cannot determine APP_DIR. Provide inputs.app_dir or ensure templates/$TPL/app exists."
              exit 1
            fi
          fi
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"

          echo "Resolved:"
          echo "  RUN_ID=$RID"
          echo "  REQ_DIR=requests/$RID"
          echo "  PLAN_JSON=requests/$RID/02_plan.json"
          echo "  APPLY_JSON=requests/$RID/03_apply_result.json"
          echo "  APP_DIR=$APP_DIR"

          # 4) 早期显式检查 plan 是否存在（避免后续脚本报 plan not found）
          if [ ! -f "requests/$RID/02_plan.json" ]; then
            echo "::error::Plan JSON not found at requests/$RID/02_plan.json"
            exit 1
          fi

      # 确保脚本可执行（之前报过 Permission denied）
      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: chmod +x scripts/ndjc-materialize.sh

      # 应用 plan（脚本依赖上一步导出的 PLAN_JSON/APPLY_JSON/APP_DIR/RUN_ID 环境变量）
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          scripts/ndjc-materialize.sh

      # —— 以下为常规 Android 构建 —— #

      - name: Setup Java 17
        id: jdk
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          check-latest: true

      - name: Force JDK 17 for all next steps
        shell: bash
        run: |
          echo "JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          echo "${{ steps.jdk.outputs.path }}/bin" >> "$GITHUB_PATH"
          echo "ORG_GRADLE_JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          java -version

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build (debug)
        shell: bash
        run: |
          ./gradlew -p "$APP_DIR/.." :app:assembleDebug -x lint --stacktrace --info --warning-mode all

      # 可选：上传日志/产物（按需保留）
      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: materialize-${{ env.RUN_ID }}
          path: |
            ${{ env.REQ_DIR }}/02_plan.json
            ${{ env.REQ_DIR }}/03_apply_result.json
          if-no-files-found: ignore
