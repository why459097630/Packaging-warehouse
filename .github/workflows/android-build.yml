name: Android Build

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id (e.g. 2025-09-18T12-34-56Z-xxxx)"
        required: false
      template:
        description: "template key (core/simple/form)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      # 预留：可由生成器注入更多 inputs
      # channel:
      #   description: "release channel"
      #   required: false
  repository_dispatch:
    types: [generate-apk]

concurrency:
  group: android-build-${{ github.ref }}-${{ inputs.runId || github.event.client_payload.runId || 'NA' }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      # 这里可放置 CI 级别的环境变量（生成器也可覆写）
      # API_BASE: https://api.example.com
      # TRACK: internal

    steps:
      # --- 源码 ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 关键：repository_dispatch 时用后端传来的构建分支；否则退回默认
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: NDJC | Show commit and changed files
        shell: bash
        run: |
          echo "HEAD sha: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          echo "---- files touched in this commit ----"
          git show --name-only --pretty=oneline "$(git rev-parse HEAD)"

      # ========== 保险丝 1：runId 日志必须存在 ==========
      - name: NDJC | Verify requests logs exist (must be for this runId)
        id: verify_logs
        shell: bash
        run: |
          set -e
          RUNID="${{ inputs.runId || github.event.client_payload.runId }}"
          if [ -z "$RUNID" ]; then
            echo "No runId provided (inputs.runId / client_payload.runId) → refuse to build"
            exit 1
          fi
          if [ ! -d "requests/$RUNID" ]; then
            echo "requests/$RUNID not found → refuse to build"
            ls -lah requests || true
            exit 1
          fi
          test -f "requests/$RUNID/02_plan.json"
          test -f "requests/$RUNID/03_apply_result.json"
          echo "LATEST=requests/$RUNID" >> "$GITHUB_ENV"
          echo "Verified logs under requests/$RUNID"

      # ========== 保险丝 2：HEAD 必须改动了 app/ ==========
      - name: NDJC | Fail if this commit didn't touch app/
        shell: bash
        run: |
          set -e
          HEAD_SHA="$(git rev-parse HEAD)"
          CHANGED_APP=$(git show --name-only --pretty=oneline "$HEAD_SHA" | grep '^app/' || true)
          if [ -z "$CHANGED_APP" ]; then
            echo "No app/ changes in this commit -> would be empty APK. Failing early."
            exit 3
          fi
          echo "$CHANGED_APP"

      # 可选：对关键锚点成功替换做一次硬校验（读取我们刚验证过的 runId 日志）
      - name: NDJC | Fail if no critical anchors replaced
        shell: bash
        run: |
          set -e
          LATEST="${LATEST:-requests/${{ inputs.runId || github.event.client_payload.runId }}}"
          test -f "$LATEST/03_apply_result.json"
          COUNT=$(jq '[ .[] | .changes[] | select(.replacedCount>0) | .replacedCount ] | add // 0' "$LATEST/03_apply_result.json")
          echo "Replacements(total) = $COUNT"
          if [ -z "$COUNT" ] || [ "$COUNT" -eq 0 ]; then
            echo "No critical anchors replaced -> abort"
            exit 2
          fi

      # --- 基础健检 ---
      - name: Sanity check
        shell: bash
        run: |
          test -f ./gradlew || { echo "gradlew missing"; exit 1; }
          test -d app || { echo "app/ missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "app Gradle file missing"; exit 1; }

      - name: Fingerprint
        shell: bash
        run: |
          echo "HEAD -> $(git rev-parse --short HEAD)"
          echo "Ref   -> $GITHUB_REF"
          echo "RunId='${{ inputs.runId || github.event.client_payload.runId }}' Template='${{ inputs.template || github.event.client_payload.template }}' AppTitle='${{ inputs.appTitle || github.event.client_payload.appTitle }}' Pkg='${{ inputs.packageName || github.event.client_payload.packageName }}'"

      # --- JDK / Gradle ---
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # 可根据需要开启缓存：
          # cache-read-only: false

      - name: Make gradlew executable
        shell: bash
        run: |
          chmod +x ./gradlew
          ./gradlew --version

      # --- 签名（可选） ---
      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        shell: bash
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"
          ls -lh "$HOME/release.jks" || true

      # --- 构建 ---
      - name: Build
        id: build
        shell: bash
        run: |
          set -e
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/debug
            VARIANT=debug
          else
            echo "Keystore present → build Release"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace
            OUTDIR=app/build/outputs/apk/release
            VARIANT=release
          fi

          echo "== list $OUTDIR =="
          ls -lah "$OUTDIR" || true

          SIGNED=$(ls -t "$OUTDIR"/*.apk 2>/dev/null | grep -Ev -- '-unsigned\.apk$' | head -n1 || true)
          UNSIGNED=$(ls -t "$OUTDIR"/*-unsigned.apk 2>/dev/null | head -n1 || true)

          APK=""
          if [ -n "$SIGNED" ]; then
            APK="$SIGNED"
            echo "Found signed APK: $APK"
          elif [ -n "$UNSIGNED" ]; then
            APK="$UNSIGNED"
            echo "Found unsigned APK: $APK"
          else
            echo "No APK found under $OUTDIR"
          fi

          echo "APK=$APK"         >> "$GITHUB_ENV"
          echo "VARIANT=$VARIANT" >> "$GITHUB_ENV"
          echo "apk=$APK"         >> "$GITHUB_OUTPUT"
          echo "variant=$VARIANT" >> "$GITHUB_OUTPUT"

      - name: Fallback sign release APK (if unsigned but keystore present)
        if: ${{ env.KS != '' && env.VARIANT == 'release' }}
        shell: bash
        run: |
          set -e
          if [ -z "${APK}" ]; then
            echo "No APK path from previous step; cannot sign."
            exit 0
          fi
          if echo "${APK}" | grep -q -- '-unsigned\.apk$'; then
            OUT="${APK%-unsigned.apk}.apk"
            echo "Unsigned APK detected → signing: ${APK} -> ${OUT}"
            "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" sign \
              --ks "$NDJC_KEYSTORE_PATH" \
              --ks-pass pass:"$NDJC_KEYSTORE_PASSWORD" \
              --key-pass pass:"$NDJC_KEY_PASSWORD" \
              --ks-key-alias "$NDJC_KEY_ALIAS" \
              --out "$OUT" "$APK"
            ls -lh "$OUT"
            echo "APK=$OUT" >> "$GITHUB_ENV"
          else
            echo "APK appears signed already: ${APK}"
          fi

      - name: List release outputs
        if: ${{ env.VARIANT == 'release' }}
        shell: bash
        run: ls -lh app/build/outputs/apk/release || true

      - name: Verify Release signature
        if: ${{ env.VARIANT == 'release' }}
        shell: bash
        run: |
          test -n "${APK}" || { echo "No release APK to verify"; exit 1; }
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "${APK}"

      - name: Summarize
        shell: bash
        run: |
          P="${APK}"
          test -n "$P" || { echo "No APK to summarize"; exit 1; }
          APPID=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest application-id "$P")
          VC=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-code "$P")
          VN=$("$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/apkanalyzer" manifest version-name "$P")
          echo "### NDJC Android Build" >> $GITHUB_STEP_SUMMARY
          echo "- Variant: **${VARIANT}**" >> $GITHUB_STEP_SUMMARY
          echo "- Package: \`$APPID\`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`$VN\` (code $VC)" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: \`${{ github.event.client_payload.ref || github.ref }}\`  Commit: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.VARIANT }}
          path: ${{ env.APK }}
          if-no-files-found: error
