name: Android Build (NDJC)

on:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_DIR: templates/circle-basic/app   # 你现有的模板 app 路径，保持不变

    steps:
      - name: Set up job
        run: echo "runner ready"

      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve inputs → env
        id: resolve_env
        shell: bash
        run: |
          set -euo pipefail
          # 从 repository_dispatch 取入参（为空就给缺省）
          RUN_ID="${{ github.event.client_payload.runId || '' }}"
          BRANCH="${{ github.event.client_payload.branch || '' }}"

          if [ -z "$RUN_ID" ]; then
            echo "::error::RUN_ID missing from client_payload.runId"
            exit 1
          fi

          echo "RUN_ID=$RUN_ID"       | tee -a "$GITHUB_ENV"
          echo "RUN_DIR=requests/$RUN_ID" | tee -a "$GITHUB_ENV"
          echo "BRANCH=$BRANCH"       | tee -a "$GITHUB_ENV"

          # 预设输出文件路径给 materialize 脚本用
          echo "APPLY_JSON=requests/$RUN_ID/03_apply_result.json" | tee -a "$GITHUB_ENV"

          echo "Resolved:"
          echo "  RUN_ID   = $RUN_ID"
          echo "  BRANCH   = $BRANCH"
          echo "  RUN_DIR  = requests/$RUN_ID"
          echo "  APP_DIR  = $APP_DIR"

      - name: Checkout run branch (resolved)
        if: env.BRANCH != ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH }}

      - name: Make ndjc-materialize.sh executable
        run: chmod +x scripts/ndjc-materialize.sh

      # ⬇️ 新增：定位 02_plan.json（优先运行分支，回退 main）；并生成诊断材料
      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: find_plan
        shell: bash
        run: |
          set -euo pipefail
          echo "RUN_ID=${RUN_ID}"
          RUN_DIR="requests/${RUN_ID}"
          mkdir -p _diag

          echo "[run-branch] looking for ${RUN_DIR}/02_plan.json ..."
          if [ -f "${RUN_DIR}/02_plan.json" ]; then
            PLAN_JSON="${RUN_DIR}/02_plan.json"
            echo "found_in=run-branch" >> "$GITHUB_OUTPUT"
          else
            echo "[main] fallback: try fetch from origin/main ..."
            git fetch origin main --depth=1
            git show origin/main:${RUN_DIR}/02_plan.json > .plan_from_main.json 2>/dev/null || true
            if [ -s .plan_from_main.json ]; then
              PLAN_JSON=".plan_from_main.json"
              echo "found_in=main" >> "$GITHUB_OUTPUT"
            else
              echo "::error::02_plan.json NOT found in run-branch nor main: ${RUN_DIR}/02_plan.json"
              # 目录快照，方便排查
              { find requests -maxdepth 2 -type f | sort || true; } > _diag/ls_requests.txt
              {
                echo "== branches =="; git branch -vv;
                echo "== HEAD =="; git rev-parse HEAD;
              } > _diag/git_info.txt
              # 失败退出，但后续 upload-artifact 会因 always() 仍然执行
              exit 1
            fi
          fi

          echo "PLAN_JSON=${PLAN_JSON}" | tee -a "$GITHUB_ENV"

          # 生成更多诊断
          {
            echo "PLAN found at: ${PLAN_JSON}"
            echo "RUN_DIR: ${RUN_DIR}"
            echo "BRANCH: ${BRANCH}"
          } > _diag/resolve.txt

      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "PLAN_JSON=${PLAN_JSON}"
          echo "APPLY_JSON=${APPLY_JSON}"
          echo "APP_DIR=${APP_DIR}"
          scripts/ndjc-materialize.sh

      # ⬇️ 修改：不论成功失败都上传日志 + 诊断
      - name: NDJC | Upload materialize logs & diag (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            _diag/**
            materialize-logs/**
          if-no-files-found: warn

      # ===== 下面保持你精简版的构建步骤不变（如需还原可自行补齐）=====
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x gradlew || true

      - name: Build (debug)
        run: ./gradlew :app:assembleDebug || true

      - name: Post Checkout run branch (resolved)
        if: always()
        run: echo "done"
