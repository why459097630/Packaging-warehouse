name: Android Build (NDJC)

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

env:
  APP_DIR: templates/circle-basic/app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout main (bootstrap)
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) 解析 inputs 并写入环境变量 + 摘要
      - name: Resolve inputs → env & write summary
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          RUN_ID="${{ github.run_id }}" # 默认用当前 run 的 id 做回退
          # 如果 dispatch payload 里有 runId、branch，就用 payload 的
          if [[ -n "${{ github.event.client_payload.runId || '' }}" ]]; then
            RUN_ID="${{ github.event.client_payload.runId }}"
          fi

          RUN_BRANCH="${{ github.event.client_payload.branch || '' }}"
          [[ -z "$RUN_BRANCH" ]] && RUN_BRANCH="ndjc-run/${RUN_ID}"

          REQ_DIR="requests/${RUN_ID}"

          {
            echo "RUN_ID=$RUN_ID"
            echo "RUN_BRANCH=$RUN_BRANCH"
            echo "REQ_DIR=$REQ_DIR"
          } >> "$GITHUB_ENV"

          {
            echo "### NDJC build inputs"
            echo "- **Run ID:** \`$RUN_ID\`"
            echo "- **Run branch:** [\`$RUN_BRANCH\`](https://github.com/${{ github.repository }}/tree/$RUN_BRANCH)"
            echo "- **Requests (will be generated):** [\`$REQ_DIR\`](https://github.com/${{ github.repository }}/tree/$RUN_BRANCH/$REQ_DIR)"
          } >> "$GITHUB_STEP_SUMMARY"

      # 3) Checkout run branch（用于写日志/产物）
      - name: Checkout run branch (for build & logs)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RUN_BRANCH }}
          path: repo_run
          fetch-depth: 0

      # 4) Checkout main（fallback for requests）
      - name: Checkout main (fallback for requests)
        uses: actions/checkout@v4
        with:
          ref: main
          path: repo_main
          fetch-depth: 0

      # 5) 定位 02_plan.json：优先 run 分支，其次 main
      - name: Locate 02_plan.json (prefer run branch, fallback to main)
        id: locate_plan
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${RUN_ID}"
          REQ_DIR="${REQ_DIR}"

          PLAN_RUN="repo_run/${REQ_DIR}/02_plan.json"
          PLAN_MAIN="repo_main/${REQ_DIR}/02_plan.json"

          if [[ -f "$PLAN_RUN" ]]; then
            PLAN_JSON="$PLAN_RUN"
          elif [[ -f "$PLAN_MAIN" ]]; then
            PLAN_JSON="$PLAN_MAIN"
          else
            echo "::error::02_plan.json not found in either run branch ($PLAN_RUN) or main ($PLAN_MAIN)."
            exit 1
          fi

          echo "PLAN_JSON=$PLAN_JSON" >> "$GITHUB_ENV"
          echo "APPLY_JSON=repo_run/${REQ_DIR}/03_apply_result.json" >> "$GITHUB_ENV"

          {
            echo "- **Found 02_plan.json at**  \`${PLAN_JSON#repo_*/}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # 6) 让脚本可执行
      - name: Make ndjc-materialize.sh executable
        shell: bash
        run: chmod +x scripts/ndjc-materialize.sh

      # 7) Apply plan → 模板（注意这里改成用 $REQ_DIR 变量，不再手拼 “requests/” 前缀）
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          bash scripts/ndjc-materialize.sh \
            "${APP_DIR}" \
            "${PLAN_JSON}" \
            "${APPLY_JSON}"

      # 8) Java/Gradle 环境
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v4

      # 9) Debug 构建（按需）
      - name: Build (debug)
        shell: bash
        working-directory: ${{ env.APP_DIR }}
        run: ./gradlew assembleDebug --no-daemon

      # 10) 上传 materialize 日志（即使失败也便于排查）
      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-diag-${{ env.RUN_ID }}
          path: |
            repo_run/${{ env.REQ_DIR }}/actions-summary.txt
            repo_run/${{ env.REQ_DIR }}/summary.json
            repo_run/${{ env.REQ_DIR }}/03_apply_result.json
            build-logs/**/* 
            **/build/reports/**
            **/build/outputs/**

      # 11) 提交 apply 结果回 run 分支（保持之前的可见性）
      - name: Commit apply result back to run branch
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          cd repo_run
          git config user.name  ndjc-bot
          git config user.email ndjc-bot@users.noreply.github.com
          git add -A || true
          if ! git diff --cached --quiet; then
            git commit -m "NDJC materialize ${RUN_ID}: add error summary & logs"
            git push origin "${RUN_BRANCH}"
          fi

      # 12) Post Checkout (bootstrap) – 保持工作区整洁
      - name: Post Checkout (bootstrap)
        if: always()
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
