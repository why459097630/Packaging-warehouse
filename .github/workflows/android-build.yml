name: Android Build

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "template key (core/simple/form)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false

concurrency:
  group: android-build-${{ github.ref }}-${{ inputs.runId || 'NA' }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 防止半成品工程触发
      - name: Sanity check
        run: |
          test -f ./gradlew || { echo "gradlew missing"; exit 1; }
          test -d app || { echo "app/ missing"; exit 1; }
          test -f app/build.gradle -o -f app/build.gradle.kts || { echo "app Gradle file missing"; exit 1; }

      - name: Fingerprint
        run: |
          echo "HEAD -> $(git rev-parse --short HEAD)"
          echo "RunId='${{ inputs.runId }}' Template='${{ inputs.template }}' AppTitle='${{ inputs.appTitle }}' Pkg='${{ inputs.packageName }}'"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: |
          chmod +x ./gradlew
          ./gradlew --version

      # 可选：解码 keystore；存在即走 release 并期望签名
      - name: Decode keystore (optional)
        if: ${{ env.KS != '' }}
        run: |
          echo "${KS}" | base64 -d > "$HOME/release.jks"
          {
            echo "NDJC_KEYSTORE_PATH=$HOME/release.jks"
            echo "NDJC_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "NDJC_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "NDJC_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> "$GITHUB_ENV"
          ls -lh "$HOME/release.jks" || true

      - name: Build
        id: build
        shell: bash
        run: |
          set -e
          if [ -z "${KS}" ]; then
            echo "No keystore → build Debug"
            ./gradlew :app:clean :app:assembleDebug -x lint --stacktrace
            APK=$(ls -t app/build/outputs/apk/debug/*.apk | head -n1)
            VARIANT=debug
          else
            echo "Keystore present → build Release (Gradle will sign if build.gradle enables it)"
            ./gradlew :app:clean :app:assembleRelease -x lint --stacktrace
            # 先尝试获取已签名的 release apk（过滤掉 -unsigned）
            APK=$(ls -t app/build/outputs/apk/release/app-release*.apk | grep -v unsigned | head -n1 || true)
            if [ -n "$APK" ]; then
              VARIANT=release
            else
              # 暂时留空，交给后续“兜底签名”步骤处理
              VARIANT=release
              APK=""
            fi
          fi
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          echo "variant=$VARIANT" >> "$GITHUB_OUTPUT"
          if [ -n "$APK" ]; then ls -lh "$APK"; fi
          ls -lh app/build/outputs/apk/release || true

      # ✅ 兜底签名：如果只有 unsigned 且 keystore 存在，则现场签出 app-release.apk
      - name: Fallback sign release APK (if unsigned but keystore present)
        if: ${{ env.KS != '' }}
        shell: bash
        run: |
          set -e
          # 若上一阶段没找到已签名 apk，就尝试签名 unsigned
          if [ -z "${{ steps.build.outputs.apk }}" ]; then
            UNS=$(ls -t app/build/outputs/apk/release/*-unsigned.apk 2>/dev/null | head -n1 || true)
            if [ -n "$UNS" ]; then
              OUT="${UNS%-unsigned.apk}.apk"
              echo "Unsigned APK detected -> signing: $UNS -> $OUT"
              "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" sign \
                --ks "$NDJC_KEYSTORE_PATH" \
                --ks-pass pass:"$NDJC_KEYSTORE_PASSWORD" \
                --key-pass pass:"$NDJC_KEY_PASSWORD" \
                --ks-key-alias "$NDJC_KEY_ALIAS" \
                --out "$OUT" "$UNS"
              echo "apk=$OUT" >> "$GITHUB_OUTPUT"
              echo "variant=release" >> "$GITHUB_OUTPUT"
              ls -lh "$OUT"
            else
              echo "No unsigned release APK found; nothing to sign."
            fi
          fi

      - name: List release outputs
        if: ${{ steps.build.outputs.variant == 'release' }}
        run: ls -lh app/build/outputs/apk/release || true

      - name: Verify Release signature
        if: ${{ steps.build.outputs.variant == 'release' }}
        run: |
          APK="${{ steps.build.outputs.apk }}"
          if [ -z "$APK" ]; then
            # 兜底步骤可能更新了输出，需要从 GITHUB_OUTPUT 接力（由前一步设置）
            APK="$(grep '^apk=' $GITHUB_OUTPUT | tail -n1 | cut -d= -f2-)"
          fi
          test -n "$APK" || { echo "No release APK to verify"; exit 1; }
          "$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner" verify --verbose --print-certs "$APK"

      - name: Summarize
        run: |
          P="${{ steps.build.outputs.apk }}"
          if [ -z "$P" ]; then
            P="$(grep '^apk=' $GITHUB_OUTPUT | tail -n1 | cut -d= -f2-)"
          fi
          APPID=$("$ANDROID_SDK_ROOT/cmdli
