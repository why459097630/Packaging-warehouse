name: Android Build (NDJC)

on:
  workflow_dispatch:
    inputs:
      runId:
        description: "NDJC run id"
        required: false
      template:
        description: "Template key (circle/flow/map/shop/showcase)"
        required: false
      appTitle:
        description: "App title"
        required: false
      packageName:
        description: "Android applicationId"
        required: false
      branch:
        description: "Branch to build (e.g. ndjc-run/<runId>)"
        required: false
      app_dir:
        description: "Android module dir (e.g. templates/circle-basic/app or app)"
        required: false
      preflight_mode:
        description: "Preflight mode: warn (default) or strict"
        required: false
        default: "warn"
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

concurrency:
  group: android-build-${{ github.event_name }}-${{ inputs.runId || github.event.client_payload.runId || inputs.branch || github.event.client_payload.ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KS: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    steps:
      - name: Checkout branch (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.event.client_payload.ref || github.ref }}

      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # ---------- runId / branch ----------
          RUN_ID="${{ inputs.runId }}"
          if [ -z "${RUN_ID}" ]; then RUN_ID="${{ github.event.client_payload.runId }}"; fi
          if [ -z "${RUN_ID}" ]; then RUN_ID="ndjc-$(date -u +%Y%m%dT%H%M%SZ)"; fi
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_ENV"
          echo "runId=${RUN_ID}" >> "$GITHUB_OUTPUT"

          BR="${{ inputs.branch }}"
          if [ -z "${BR}" ]; then BR="${{ github.event.client_payload.ref }}"; fi
          if [ -z "${BR}" ]; then BR="${{ github.ref }}"; fi
          BR="${BR#refs/heads/}"
          echo "BUILD_BRANCH=${BR}" >> "$GITHUB_ENV"
          echo "branch=${BR}" >> "$GITHUB_OUTPUT"

          # ---------- requests dir & json paths (仅用于后续步骤引用；传脚本时只传纯 runId) ----------
          REQ_DIR="requests/${RUN_ID}"
          PLAN_JSON="${REQ_DIR}/02_plan.json"
          APPLY_JSON="${REQ_DIR}/03_apply_result.json"
          echo "REQ_DIR=${REQ_DIR}"     >> "$GITHUB_ENV"
          echo "PLAN_JSON=${PLAN_JSON}" >> "$GITHUB_ENV"
          echo "APPLY_JSON=${APPLY_JSON}" >> "$GITHUB_ENV"

          echo "Resolved RUN_ID=${RUN_ID}, BUILD_BRANCH=${BR}"

      - name: Guard | require run branch
        if: ${{ steps.resolve.outputs.branch == '' }}
        shell: bash
        run: |
          echo "::error::inputs.branch/client_payload.ref empty. Must provide a run branch like 'ndjc-run/<runId>'."
          exit 1

      - name: Checkout run branch (resolved)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.resolve.outputs.branch }}

      - name: NDJC | Show commit info
        shell: bash
        run: |
          echo "HEAD: $(git rev-parse HEAD)"
          echo "Triggered by: ${{ github.event_name }}"
          echo "inputs.branch: '${{ inputs.branch }}'"
          echo "client_payload.ref: '${{ github.event.client_payload.ref }}'"
          echo "client_payload.sha: '${{ github.event.client_payload.sha }}'"
          git show --name-only --oneline -1

      - name: Resolve project paths (APP_DIR/PROJ_DIR)
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ inputs.template || github.event.client_payload.template || '' }}"
          APP_DIR_IN="${{ inputs.app_dir || '' }}"
          APP_DIR=""
          if [ -n "$APP_DIR_IN" ]; then
            APP_DIR="$APP_DIR_IN"
          else
            if [ -f app/build.gradle ] || [ -f app/build.gradle.kts ]; then
              APP_DIR="app"
            elif [ -n "$TEMPLATE" ] && [ -d "templates/$TEMPLATE/app" ] && { [ -f "templates/$TEMPLATE/app/build.gradle" ] || [ -f "templates/$TEMPLATE/app/build.gradle.kts" ]; }; then
              APP_DIR="templates/$TEMPLATE/app"
            else
              for d in templates/*/app; do
                if [ -f "$d/build.gradle" ] || [ -f "$d/build.gradle.kts" ]; then APP_DIR="$d"; break; fi
              done
            fi
          fi
          if [ -z "$APP_DIR" ]; then
            echo "::error::Cannot locate Android module. Provide inputs.app_dir or ensure app/build.gradle exists."
            exit 1
          fi
          PROJ_DIR="${APP_DIR%/app}"
          if [ "$PROJ_DIR" = "$APP_DIR" ]; then PROJ_DIR="."; fi
          echo "APP_DIR=$APP_DIR"   >> "$GITHUB_ENV"
          echo "PROJ_DIR=$PROJ_DIR" >> "$GITHUB_ENV"
          echo "app_dir=$APP_DIR"   >> "$GITHUB_OUTPUT"
          echo "proj_dir=$PROJ_DIR" >> "$GITHUB_OUTPUT"
          echo "Resolved APP_DIR=$APP_DIR, PROJ_DIR=$PROJ_DIR"

      - name: Sanity check
        shell: bash
        run: |
          set -euo pipefail
          test -f ./gradlew || { echo "::error::gradlew missing"; exit 1; }
          test -d "$APP_DIR" || { echo "::error::APP_DIR '$APP_DIR' missing"; exit 1; }
          test -f "$APP_DIR/build.gradle" -o -f "$APP_DIR/build.gradle.kts" || { echo "::error::Gradle file missing under $APP_DIR"; exit 1; }
          test -f "$APP_DIR/src/main/AndroidManifest.xml" || { echo "::error::AndroidManifest.xml missing under $APP_DIR/src/main"; exit 1; }

      - name: Ensure Python (alias)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v python >/dev/null 2>&1; then
            sudo ln -sf /usr/bin/python3 /usr/local/bin/python
          fi
          python --version || true

      # 可选：预检 anchors/resources（脚本存在则执行）
      - name: NDJC | Preflight (anchors & resources)
        id: preflight
        shell: bash
        continue-on-error: ${{ (inputs.preflight_mode || 'warn') != 'strict' }}
        run: |
          set -euo pipefail
          mkdir -p anchors build-logs
          if [ -x scripts/ndjc-preflight.sh ]; then
            scripts/ndjc-preflight.sh "$APP_DIR" "${{ inputs.preflight_mode || 'warn' }}" | tee build-logs/preflight.log
          elif [ -x .github/scripts/ndjc-preflight.sh ]; then
            .github/scripts/ndjc-preflight.sh "$APP_DIR" "${{ inputs.preflight_mode || 'warn' }}" | tee build-logs/preflight.log
          else
            echo "::notice::no preflight script; skip"
          fi

      - name: NDJC | Upload preflight logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preflight-logs-${{ env.RUN_ID }}
          path: |
            anchors/**
            build-logs/preflight.log
          if-no-files-found: ignore

      # ===================== 关键改动在这里 =====================
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_DIR=$APP_DIR"
          echo "RUN_ID=$RUN_ID"
          # 只传「纯 runId」给脚本；脚本内部自己拼 requests/<runId>/02_plan.json
          scripts/ndjc-materialize.sh "$APP_DIR" "$RUN_ID"

      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: materialize-logs-${{ env.RUN_ID }}
          path: |
            build-logs/**
            requests/${{ env.RUN_ID }}/02_plan.json
            requests/${{ env.RUN_ID }}/03_apply_result.json
          if-no-files-found: ignore

      - name: NDJC | Guard apply result (strict)
        shell: bash
        run: |
          set -euo pipefail
          APPLY_JSON="requests/${RUN_ID}/03_apply_result.json"
          if [ ! -s "$APPLY_JSON" ]; then
            echo "::error::apply result not found at $APPLY_JSON (runId=$RUN_ID)."
            exit 1
          fi
          echo "apply result present: $APPLY_JSON"

      # ===== 下面保持你的原有探针 / 构建 / 签名 / 上传产物 等步骤 =====

      - name: Setup Java 17
        id: jdk
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          check-latest: true

      - name: Force JDK 17 for all next steps
        shell: bash
        run: |
          echo "JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          echo "${{ steps.jdk.outputs.path }}/bin" >> "$GITHUB_PATH"
          echo "ORG_GRADLE_JAVA_HOME=${{ steps.jdk.outputs.path }}" >> "$GITHUB_ENV"
          java -version

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build
        id: build
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build-logs
          echo "JAVA_HOME=$JAVA_HOME"; java -version
          export ORG_GRADLE_JAVA_HOME="$JAVA_HOME"
          if [ -z "${KS}" ]; then
            echo "No keystore → assembleDebug"
            ./gradlew -p "$PROJ_DIR" :app:clean :app:assembleDebug -x lint --stacktrace --info --warning-mode all 2>&1 | tee build-logs/build.log
            OUTDIR="$PROJ_DIR/app/build/outputs/apk/debug"
            VARIANT=debug
          else
            echo "Keystore present → assembleRelease"
            ./gradlew -p "$PROJ_DIR" :app:clean :app:assembleRelease -x lint --stacktrace --info --warning-mode all 2>&1 | tee build-logs/build.log
            OUTDIR="$PROJ_DIR/app/build/outputs/apk/release"
            VARIANT=release
          fi
          echo "APK_DIR=${OUTDIR:-$PROJ_DIR/app/build/outputs/apk/debug}" >> "$GITHUB_ENV"
          echo "VARIANT=${VARIANT:-debug}" >> "$GITHUB_ENV"

      - name: NDJC | Upload build logs (on failure too)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.RUN_ID }}
          path: build-logs/**
          if-no-files-found: ignore

      # ……（签名、校验、上传 APK、收尾摘要 等步骤保持你当前版本不变）……
