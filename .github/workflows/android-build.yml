name: generate-apk

on:
  repository_dispatch:
    types: [generate-apk]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (bootstrap)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 解析 runId / 目录 / 分支，并输出给后续步骤使用
      - name: Resolve inputs → env
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 从 inputs 或 repository_dispatch 的 client_payload 中取 runId
          RUN_ID="${{ inputs.runId || '' }}"
          if [ -z "$RUN_ID" ]; then
            RUN_ID="${{ github.event.client_payload.runId || '' }}"
          fi
          if [ -z "$RUN_ID" ]; then
            echo "::error::RUN_ID missing (neither inputs.runId nor client_payload.runId provided)"
            exit 1
          fi

          # run 分支名，按约定：ndjc-run/<RUN_ID>
          BRANCH="ndjc-run/${RUN_ID}"

          # requests 目录及三种文件路径
          REQ_DIR="requests/${RUN_ID}"
          PLAN_JSON="${REQ_DIR}/02_plan.json"
          APPLY_JSON="${REQ_DIR}/03_apply_result.json"

          # 模板根（按你当前仓库模板结构）
          APP_DIR="templates/circle-basic/app"

          echo "RUN_ID=$RUN_ID"           | tee -a "$GITHUB_ENV"
          echo "REQ_DIR=$REQ_DIR"         | tee -a "$GITHUB_ENV"
          echo "PLAN_JSON=$PLAN_JSON"     | tee -a "$GITHUB_ENV"
          echo "APPLY_JSON=$APPLY_JSON"   | tee -a "$GITHUB_ENV"
          echo "APP_DIR=$APP_DIR"         | tee -a "$GITHUB_ENV"
          echo "BRANCH=$BRANCH"           | tee -a "$GITHUB_ENV"

          # 同时作为输出给后续 steps 引用（例如 checkout）
          {
            echo "run_id=$RUN_ID"
            echo "branch=$BRANCH"
            echo "plan_json=$PLAN_JSON"
            echo "apply_json=$APPLY_JSON"
            echo "app_dir=$APP_DIR"
          } >> "$GITHUB_OUTPUT"

          echo "Resolved:"
          echo "  RUN_ID=$RUN_ID"
          echo "  BRANCH=$BRANCH"
          echo "  REQ_DIR=$REQ_DIR"
          echo "  PLAN_JSON=$PLAN_JSON"
          echo "  APPLY_JSON=$APPLY_JSON"
          echo "  APP_DIR=$APP_DIR"

      # 关键：切换到 run 分支（ndjc-run/<RUN_ID>），这样 requests/<RUN_ID>/02_plan.json 才存在
      - name: Checkout run branch (resolved)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.resolve.outputs.branch }}

      # 你的预检/快照/探针等可以继续保留，这里略…

      - name: Make ndjc-materialize.sh executable
        if: ${{ always() }}
        run: |
          chmod +x scripts/ndjc-materialize.sh

      # 物化：根据 02_plan.json 把模板锚点替换
      - name: NDJC | Materialize (apply plan → template)
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_DIR=${APP_DIR}"
          echo "PLAN_JSON=${PLAN_JSON}"
          test -f "${PLAN_JSON}" || { echo "::error::Plan JSON not found at ${PLAN_JSON}"; exit 1; }

          scripts/ndjc-materialize.sh \
            --plan "${PLAN_JSON}" \
            --app-dir "${APP_DIR}" \
            --result "${APPLY_JSON}"

      # （可选）把 03_apply_result.json / actions-summary.txt 等产物回写到 run 分支
      - name: NDJC | Upload materialize logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ndjc-materialize-${{ steps.resolve.outputs.run_id }}
          path: |
            ${{ env.REQ_DIR }}/03_apply_result.json
          if-no-files-found: ignore

      # 下面继续你的 Java/Gradle 环节…
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (debug)
        env:
          ORG_GRADLE_JAVA_HOME: ${{ env.JAVA_HOME }}
        run: |
          ./gradlew -p "${APP_DIR%/app}" :app:assembleDebug -x lint --stacktrace --info --warning-mode all

