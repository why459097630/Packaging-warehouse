name: Release APK

on:
  # 自动：在 Android 构建工作流成功后触发
  workflow_run:
    workflows: ["Android Build (3 Templates Matrix)"]
    types: [completed]
  # 手动兜底：需要时可在 Actions 里手动运行
  workflow_dispatch: {}

jobs:
  release:
    # 自动触发时：仅当上个工作流成功；手动触发时总是运行
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) 下载 APK 产物
      #   自动触发：从这次触发它的构建 run 上下载
      - name: Download APK artifacts (from triggering run)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: android-build-matrix.yml
          run_id: ${{ github.event.workflow_run.id }}
          name: app-release-.*
          name_is_regexp: true
          path: dist

      #   手动触发：从 main 分支上最近一次成功的构建下载
      - name: Download APK artifacts (latest successful on main)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: android-build-matrix.yml
          workflow_conclusion: success
          branch: main
          name: app-release-.*
          name_is_regexp: true
          path: dist

      - name: List downloaded tree
        run: ls -lR dist || true

      # 2) 将每个 artifact 里的 APK 重命名为唯一文件名（带模板名）
      - name: Rename APKs to unique names
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          # 遍历 dist 下每个 artifact 子目录
          for d in dist/*; do
            [ -d "$d" ] || continue
            base="$(basename "$d")"   # e.g. app-release-core-template
            apk_file=""
            for f in "$d"/*.apk; do
              apk_file="$f"; break
            done
            if [ -z "$apk_file" ]; then
              echo "No APK in $d, skip."
              rm -rf "$d"
              continue
            fi
            new="dist/${base}.apk"
            mv "$apk_file" "$new"
            rm -rf "$d"
            echo "Renamed to $new"
          done
          echo "Final files:"; ls -l dist

      # 3) 创建 Release 并上传重命名后的 APK
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Auto Release ${{ github.run_number }}
          body: "Auto release of latest APKs."
          files: dist/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
