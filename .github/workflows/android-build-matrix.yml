name: Android Build (matrix)

on:
  workflow_dispatch:
    inputs:
      template:
        description: "模板（core-template|form-template|simple-template）"
        required: true
        type: string
      prompt:
        description: "应用描述 / prompt"
        required: true
        type: string
      owner:
        description: "目标仓库 owner（生成代码要写入的仓库）"
        required: true
        type: string
      repo:
        description: "目标仓库 repo"
        required: true
        type: string
      branch:
        description: "目标分支"
        required: false
        default: "main"
        type: string
      apk_name:
        description: "APK 文件名前缀"
        required: false
        default: "app"
        type: string
      version_name:
        description: "版本名"
        required: false
        default: "1.0.0"
        type: string
      version_code:
        description: "版本号（整数）"
        required: false
        default: "1"
        type: string
      reason:                 # 关键：声明 reason，避免 422
        description: "触发原因/追踪标识（可选）"
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    name: Build Android
    runs-on: ubuntu-latest

    env:
      TEMPLATE:     ${{ inputs.template }}
      PROMPT:       ${{ inputs.prompt }}
      GH_OWNER:     ${{ inputs.owner }}
      GH_REPO:      ${{ inputs.repo }}
      GH_BRANCH:    ${{ inputs.branch }}
      APK_NAME:     ${{ inputs.apk_name }}
      VERSION_NAME: ${{ inputs.version_name }}
      VERSION_CODE: ${{ inputs.version_code }}
      REASON:       ${{ inputs.reason }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Print inputs (debug)
        run: |
          echo "TEMPLATE=$TEMPLATE"
          echo "PROMPT=$PROMPT"
          echo "TARGET=$GH_OWNER/$GH_REPO@$GH_BRANCH"
          echo "APK_NAME=$APK_NAME VERSION_NAME=$VERSION_NAME VERSION_CODE=$VERSION_CODE"
          echo "REASON=$REASON"

      # 计算是否具备签名所需的 4 个 secrets，并把结果写到 $GITHUB_ENV
      - name: Detect signing secrets
        env:
          S1: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
          S2: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          S3: ${{ secrets.RELEASE_KEY_ALIAS }}
          S4: ${{ secrets.RELEASE_KEY_ALIAS_PASSWORD }}
        run: |
          if [ -n "${S1}" ] && [ -n "${S2}" ] && [ -n "${S3}" ] && [ -n "${S4}" ]; then
            echo "SIGNING=true" >> $GITHUB_ENV
          else
            echo "SIGNING=false" >> $GITHUB_ENV
          fi

      # （如果你的 API 已经把模板内容写进仓库，这一步可以删掉或保留为空）
      # - name: Generate project code from template (optional)
      #   run: |
      #     echo "Generate code to repo based on $TEMPLATE ..."
      #     # 在这里把 PROMPT/模板写入到 app 源码

      # 有签名：解码 keystore
      - name: Decode release keystore
        if: env.SIGNING == 'true'
        run: |
          mkdir -p app
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > app/release.jks
          echo "STORE_FILE=app/release.jks" >> $GITHUB_ENV
          echo "STORE_PASSWORD=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.RELEASE_KEY_ALIAS_PASSWORD }}" >> $GITHUB_ENV

      # 有签名：打 release 包
      - name: Build release
        if: env.SIGNING == 'true'
        run: |
          ./gradlew --no-daemon clean :app:assembleRelease \
            -PversionName="${VERSION_NAME}" -PversionCode="${VERSION_CODE}"

      - name: Upload release APK
        if: env.SIGNING == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}-release
          path: app/build/outputs/apk/release/*.apk
          if-no-files-found: warn

      # 无签名：fallback 到 debug 包
      - name: Build debug (fallback)
        if: env.SIGNING != 'true'
        run: |
          ./gradlew --no-daemon clean :app:assembleDebug \
            -PversionName="${VERSION_NAME}" -PversionCode="${VERSION_CODE}"

      - name: Upload debug APK
        if: env.SIGNING != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}-debug
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
