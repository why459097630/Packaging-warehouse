name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ① 回显 GitHub 事件与原始 client_payload，便于定位“参数没带过来”
      - name: Echo raw GitHub event
        run: |
          echo '==== github.event ===='
          echo '${{ toJson(github.event) }}'
          echo '==== client_payload ===='
          echo '${{ toJson(github.event.client_payload) }}' > client_payload.json

      - name: Upload raw payload
        uses: actions/upload-artifact@v4
        with:
          name: client-payload-raw
          path: client_payload.json

      # ② JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # ③ 解析参数：同时兼容 snake_case 与 camelCase
      - name: Extract inputs
        id: in
        shell: bash
        run: |
          tpl='${{ github.event.client_payload.template }}'

          app_snake='${{ github.event.client_payload.app_name }}'
          app_camel='${{ github.event.client_payload.appName }}'
          base_snake='${{ github.event.client_payload.api_base }}'
          base_camel='${{ github.event.client_payload.apiBase }}'
          sec_snake='${{ github.event.client_payload.api_secret }}'
          sec_camel='${{ github.event.client_payload.apiSecret }}'

          app="${app_snake:-$app_camel}"
          base="${base_snake:-$base_camel}"
          secret="${sec_snake:-$sec_camel}"

          echo "template=${tpl}"   >> "$GITHUB_OUTPUT"
          echo "app_name=${app}"   >> "$GITHUB_OUTPUT"
          echo "api_base=${base}"  >> "$GITHUB_OUTPUT"
          echo "api_secret=${secret}" >> "$GITHUB_OUTPUT"

          echo "::group::Extracted inputs"
          echo "template=${tpl}"
          echo "app_name=${app}"
          echo "api_base=${base}"
          if [ -n "${secret}" ]; then echo "api_secret=***"; else echo "api_secret="; fi
          echo "::endgroup::"

      # ④ 严格校验：任一缺失则直接失败（快速暴露“没带过来”的情况）
      - name: Validate required inputs
        shell: bash
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        run: |
          miss=""
          [ -z "$TEMPLATE"  ] && miss="$miss template"
          [ -z "$APP_NAME"  ] && miss="$miss app_name"
          [ -z "$API_BASE"  ] && miss="$miss api_base"
          [ -z "$API_SECRET" ] && miss="$miss api_secret"
          if [ -n "$miss" ]; then
            echo "Missing required inputs:$miss"
            exit 1
          fi

      - name: Ensure gradlew executable
        run: chmod +x templates/**/gradlew || true

      # ⑤ 把参数写入 strings.xml（若文件不存在则创建），并保留快照工件
      - name: Inject API data into template
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          set -euo pipefail

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="${ROOT}/res/values"
          STRINGS="${VALUES}/strings.xml"
          STYLES="${VALUES}/styles.xml"
          mkdir -p "${VALUES}"

          # strings.xml 不存在则创建
          if [ ! -f "${STRINGS}" ]; then
            cat > "${STRINGS}" <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
          </resources>
          XML
          fi

          # styles.xml 不存在则写默认主题，避免 R 资源缺失
          if [ ! -f "${STYLES}" ]; then
            cat > "${STYLES}" <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
          </resources>
          XML
          fi

          # 先清理旧项
          sed -i '/name="app_name"/d'   "${STRINGS}" || true
          sed -i '/name="api_base"/d'   "${STRINGS}" || true
          sed -i '/name="api_secret"/d' "${STRINGS}" || true

          # 追加新值
          awk -v app="${APP_NAME}" -v base="${API_BASE}" -v secret="${API_SECRET}" '
            /<\/resources>/ && !done {
              print "    <string name=\"app_name\">"  app    "</string>";
              print "    <string name=\"api_base\">"  base   "</string>";
              print "    <string name=\"api_secret\">" secret "</string>";
              done=1
            }
            { print }
          ' "${STRINGS}" > "${STRINGS}.tmp" && mv "${STRINGS}.tmp" "${STRINGS}"

          # 保存快照，便于核对最终落库内容
          cp "${STRINGS}" "values-${TEMPLATE}.xml"

      - name: Upload values snapshot
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ steps.in.outputs.template }}
          path: values-${{ steps.in.outputs.template }}.xml

      # ⑥ 构建与产物
      - name: Build debug APK
        working-directory: templates/${{ steps.in.outputs.template }}
        run: ./gradlew --no-daemon clean assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk
