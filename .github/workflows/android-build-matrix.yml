# .github/workflows/android-build-matrix.yml
name: android-build-matrix

# ① 允许 API 触发 & 手动触发
on:
  repository_dispatch:
    types: [generate-apk]         # 必须和 API 的 event_type 一致
  workflow_dispatch:
    inputs:
      template:
        description: Template name
        required: false
      app_name:
        description: App name
        required: false
      version_name:
        description: Version name
        required: false
      version_code:
        description: Version code
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ② 同时兼容 repository_dispatch / workflow_dispatch 的参数
      - name: Extract inputs
        id: vars
        shell: bash
        run: |
          set -e
          get() { v="$1"; [ -n "$v" ] && echo "$v" || echo ""; }

          TEMPLATE=$(get "${{ github.event.client_payload.template }}")
          [ -z "$TEMPLATE" ] && TEMPLATE=$(get "${{ github.event.inputs.template }}")
          [ -z "$TEMPLATE" ] && TEMPLATE="form-template"

          APP_NAME=$(get "${{ github.event.client_payload.app_name }}")
          [ -z "$APP_NAME" ] && APP_NAME=$(get "${{ github.event.inputs.app_name }}")
          [ -z "$APP_NAME" ] && APP_NAME="MyApp"

          VERSION_NAME=$(get "${{ github.event.client_payload.version_name }}")
          [ -z "$VERSION_NAME" ] && VERSION_NAME=$(get "${{ github.event.inputs.version_name }}")
          [ -z "$VERSION_NAME" ] && VERSION_NAME="1.0.0"

          VERSION_CODE=$(get "${{ github.event.client_payload.version_code }}")
          [ -z "$VERSION_CODE" ] && VERSION_CODE=$(get "${{ github.event.inputs.version_code }}")
          [ -z "$VERSION_CODE" ] && VERSION_CODE="1"

          echo "template=$TEMPLATE"         >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME"         >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      # ③ 保障 gradlew 可执行位（解决 Permission denied）
      - name: Ensure gradlew executable
        shell: bash
        run: |
          set -e
          # 仓库里/模板里/生成工程里，凡是叫 gradlew 的都加执行位
          find . -type f -name gradlew -exec chmod +x {} +

      # 下面是你现有的步骤（示例占位），用上方解析出的变量：
      #   ${{ steps.vars.outputs.template }}
      #   ${{ steps.vars.outputs.app_name }}
      #   ${{ steps.vars.outputs.version_name }}
      #   ${{ steps.vars.outputs.version_code }}
      #
      # - name: Generate project from template
      #   run: |
      #     scripts/generate.sh \
      #       --template "${{ steps.vars.outputs.template }}" \
      #       --app-name "${{ steps.vars.outputs.app_name }}" \
      #       --version-name "${{ steps.vars.outputs.version_name }}" \
      #       --version-code "${{ steps.vars.outputs.version_code }}"

      # - name: Set up JDK
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: temurin
      #     java-version: '17'

      # - name: Build (release or debug)
      #   working-directory: ./Packaging-warehouse-app   # ← 你的实际工程目录
      #   run: |
      #     ./gradlew clean assembleDebug   # 或 assembleRelease（按你的签名策略）

      # - name: Upload APK
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: apk
      #     path: '**/*.apk'
