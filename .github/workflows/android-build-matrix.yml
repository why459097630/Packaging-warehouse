name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 安装 Android cmdline-tools + 必要的 SDK 包（34）
      - name: Install Android cmdline-tools + SDK 34
        shell: bash
        run: |
          set -eux
          export ANDROID_SDK_ROOT="$HOME/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"

          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip" -o /tmp/cmdtools.zip
          unzip -q /tmp/cmdtools.zip -d /tmp/

          # 放到 latest 目录，确保路径结构正确
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv /tmp/cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"

          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

          SDKMGR="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMGR" ]; then
            SDKMGR="$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/bin/sdkmanager"
          fi

          # 接受许可 & 安装
          set +o pipefail
          yes | "$SDKMGR" --licenses > /dev/null 2>&1 || true
          set -o pipefail
          yes | "$SDKMGR" "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # 读取前端传入 payload（兼容驼峰/下划线）
      - name: Extract inputs
        id: in
        shell: bash
        run: |
          echo "template=${{ github.event.client_payload.template }}" >> "$GITHUB_OUTPUT"
          echo "app_name=${{ github.event.client_payload.app_name || github.event.client_payload.appName }}" >> "$GITHUB_OUTPUT"
          echo "api_base=${{ github.event.client_payload.api_base || github.event.client_payload.apiBase }}" >> "$GITHUB_OUTPUT"
          echo "api_secret=${{ github.event.client_payload.api_secret || github.event.client_payload.apiSecret }}" >> "$GITHUB_OUTPUT"

      # 参数回显（仅在 secret 非空时做 mask，避免 warning）
      - name: Show resolved inputs (masked)
        shell: bash
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        run: |
          if [ -n "$API_SECRET" ]; then
            echo "::add-mask::$API_SECRET"
          fi
          echo "[inputs] template = $TEMPLATE"
          echo "[inputs] app_name = $APP_NAME"
          echo "[inputs] api_base  = $API_BASE"
          if [ -z "$API_SECRET" ]; then
            echo "[inputs] api_secret = (empty)"
          else
            echo "[inputs] api_secret = (masked)"
          fi

      # 模板存在性检查
      - name: Check template directory
        shell: bash
        run: |
          set -e
          if [ ! -d "templates/${{ steps.in.outputs.template }}" ]; then
            echo "Template directory not found: templates/${{ steps.in.outputs.template }}"
            exit 1
          fi

      # 安全地写入 strings.xml（转义特殊字符）
      - name: Inject API data into template (safe)
        shell: bash
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        run: |
          set -euo pipefail

          esc () { python3 - <<'PY' "$1"
import html,sys
print(html.escape(sys.argv[1], quote=True))
PY
          }

          APP_ESC="$(esc "${APP_NAME:-NDJC App}")"
          BASE_ESC="$(esc "${API_BASE:-}")"
          SEC_ESC="$(esc "${API_SECRET:-}")"

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="$ROOT/res/values"
          STRINGS="$VALUES/strings.xml"
          STYLES="$VALUES/styles.xml"
          mkdir -p "$VALUES"

          # strings.xml / styles.xml 若不存在则创建骨架
          if [ ! -f "$STRINGS" ]; then
            printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' '<resources>' '</resources>' > "$STRINGS"
          fi
          if [ ! -f "$STYLES" ]; then
            cat > "$STYLES" <<'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
</resources>
EOF
          fi

          # 去重旧项
          sed -i '/name="app_name"/d'   "$STRINGS" || true
          sed -i '/name="api_base"/d'   "$STRINGS" || true
          sed -i '/name="api_secret"/d' "$STRINGS" || true

          # 重新追加，并保证结尾 </resources>
          if tail -n 1 "$STRINGS" | grep -q '</resources>'; then
            # 去掉最后一行 </resources>
            sed -i '$d' "$STRINGS"
          fi
          {
            printf '    <string name="app_name">%s</string>\n'  "$APP_ESC"
            printf '    <string name="api_base">%s</string>\n'  "$BASE_ESC"
            printf '    <string name="api_secret">%s</string>\n' "$SEC_ESC"
            printf '</resources>\n'
          } >> "$STRINGS"

      - name: Verify written resources
        shell: bash
        run: |
          VALUES="templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml"
          echo "===== strings.xml preview ====="
          sed -n '1,120p' "$VALUES" || true
          echo "================================"
          grep -q 'name="app_name"'  "$VALUES" && \
          grep -q 'name="api_base"'  "$VALUES" && \
          grep -q 'name="api_secret"' "$VALUES" || { echo "strings.xml missing expected entries"; exit 1; }

      # 关键：使用 gradle-build-action，不依赖 ./gradlew
      - name: Build debug APK (Gradle action)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: templates/${{ steps.in.outputs.template }}
          arguments: clean assembleDebug --no-daemon

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ steps.in.outputs.template }}
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk

      - name: Upload values for audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ steps.in.outputs.template }}
          path: |
            templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml
            templates/${{ steps.in.outputs.template }}/app/src/main/AndroidManifest.xml
