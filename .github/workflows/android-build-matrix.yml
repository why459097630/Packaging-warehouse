name: Android CI (robust + no-empty-apk)

on:
  push:
  workflow_dispatch:
    inputs:
      marker_template:
        description: "Override: template (core-template|form-template|simple-template)"
        required: false
        type: string
      marker_prompt:
        description: "Override: prompt (if API未写入marker时可手动填)"
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    # 默认兜底（仍然会做反空包校验）
    env:
      DEFAULT_TEMPLATE: form-template
      DEFAULT_PROMPT: "CI fallback prompt: please provide a real prompt via API or workflow input"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Install tools (jq, unzip)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Determine template & prompt from marker (robust)
        id: marker
        shell: bash
        env:
          MARKER_TEMPLATE: ${{ github.event.inputs.marker_template }}
          MARKER_PROMPT:   ${{ github.event.inputs.marker_prompt }}
        run: |
          set -euo pipefail

          ASSETS="app/src/main/assets"
          mkdir -p "$ASSETS"

          # 1) 新格式：JSON
          LATEST_JSON=$(ls -1 "$ASSETS"/build_marker_*.json 2>/dev/null | sort | tail -n1 || true)
          TEMPLATE=""
          PROMPT=""

          if [[ -n "${LATEST_JSON:-}" ]]; then
            echo "Found JSON marker: $LATEST_JSON"
            TEMPLATE=$(jq -r '.template // empty' "$LATEST_JSON" || true)
            PROMPT=$(jq -r '.prompt // empty' "$LATEST_JSON" || true)
          else
            # 2) 旧格式：TXT (template=..., prompt=...)
            LEGACY_TXT="$ASSETS/build_marker.txt"
            if [[ -f "$LEGACY_TXT" ]]; then
              echo "Found legacy TXT marker: $LEGACY_TXT"
              TEMPLATE=$(grep -E '^template=' "$LEGACY_TXT" | head -n1 | cut -d= -f2- | tr -d '\r' | xargs || true)
              PROMPT=$(grep -E '^prompt='   "$LEGACY_TXT" | head -n1 | cut -d= -f2- | tr -d '\r'       || true)
            fi
          fi

          # 3) 手动触发输入 / 环境覆盖
          if [[ -z "${TEMPLATE:-}" && -n "${MARKER_TEMPLATE:-}" ]]; then
            TEMPLATE="$MARKER_TEMPLATE"
          fi
          if [[ -z "${PROMPT:-}" && -n "${MARKER_PROMPT:-}" ]]; then
            PROMPT="$MARKER_PROMPT"
          fi

          # 4) 兜底默认
          TEMPLATE="${TEMPLATE:-$DEFAULT_TEMPLATE}"
          PROMPT="${PROMPT:-$DEFAULT_PROMPT}"

          # 模板枚举校验
          case "$TEMPLATE" in
            core-template|form-template|simple-template) ;;
            *)
              echo "Invalid template '$TEMPLATE', fallback to $DEFAULT_TEMPLATE"
              TEMPLATE="$DEFAULT_TEMPLATE"
              ;;
          esac

          # 若没有现成 JSON，就生成一份，供后续“APK中必须包含该 marker”校验
          if [[ -z "${LATEST_JSON:-}" ]]; then
            TS=$(date -u +%Y%m%d%H%M%S)
            LATEST_JSON="$ASSETS/build_marker_${TS}.json"
            jq -n --arg t "$TEMPLATE" --arg p "$PROMPT" --arg ts "$TS" \
              '{template:$t, prompt:$p, createdAt:$ts}' > "$LATEST_JSON"
            echo "Materialized marker json: $LATEST_JSON"
          fi

          echo "template=$TEMPLATE"   >> "$GITHUB_OUTPUT"
          echo "marker=$LATEST_JSON"  >> "$GITHUB_OUTPUT"

          {
            echo "### Marker"
            echo "- template: \`$TEMPLATE\`"
            echo "- file: \`$LATEST_JSON\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Apply template to app/
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ steps.marker.outputs.template }}"
          echo "Applying template: $TEMPLATE"
          rsync -a --delete "templates/${TEMPLATE}/" "app/"

      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew --version

      - name: Build (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :app:assembleRelease --stacktrace --no-daemon

      - name: Load template-specific APK size threshold (optional)
        id: size
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ steps.marker.outputs.template }}"
          case "$TEMPLATE" in
            core-template)   MIN=3000000 ;;  # 3.0 MB
            form-template)   MIN=2000000 ;;  # 2.0 MB
            simple-template) MIN=1200000 ;;  # 1.2 MB
            *)               MIN=1000000 ;;
          esac
          echo "min=${MIN}" >> "$GITHUB_OUTPUT"

      - name: Verify release APK exists and size
        id: apks
        shell: bash
        run: |
          set -euo pipefail
          APK=$(ls -1 app/build/outputs/apk/release/*-release.apk 2>/dev/null | head -n1 || true)
          if [[ -z "${APK:-}" ]]; then
            echo "❌ No release APK produced."
            exit 1
          fi
          echo "apk=${APK}" >> "$GITHUB_OUTPUT"
          BYTES=$(stat -c%s "$APK")
          echo "APK size: $BYTES bytes"
          MIN=${{ steps.size.outputs.min }}
          if [[ "$BYTES" -lt "$MIN" ]]; then
            echo "❌ APK too small ($BYTES < $MIN) — likely empty."
            exit 1
          fi
          echo "✅ Size gate passed."

      - name: Deep verify APK contents (no-empty-apk hard gate)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.apks.outputs.apk }}"
          MARKER_BASENAME=$(basename "${{ steps.marker.outputs.marker }}")
          echo "Checking assets for: assets/${MARKER_BASENAME}"
          if ! unzip -l "$APK" | grep -q "assets/${MARKER_BASENAME}"; then
            echo "❌ Marker file not found inside APK assets — build likely did not include content."
            exit 1
          fi
          echo "✅ Marker asset present."

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.apks.outputs.apk }}
