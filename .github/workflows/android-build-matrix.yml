name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Extract inputs
        id: in
        run: |
          echo "template=${{ github.event.client_payload.template }}"     >> "$GITHUB_OUTPUT"
          echo "app_name=${{ github.event.client_payload.app_name }}"     >> "$GITHUB_OUTPUT"
          echo "api_base=${{ github.event.client_payload.api_base }}"     >> "$GITHUB_OUTPUT"
          echo "api_secret=${{ github.event.client_payload.api_secret }}" >> "$GITHUB_OUTPUT"

      - name: Ensure gradlew executable
        run: chmod +x templates/**/gradlew || true

      - name: Inject API data into template
        env:
          TEMPLATE: ${{ steps.in.outputs.template }}
          APP_NAME: ${{ steps.in.outputs.app_name }}
          API_BASE: ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          set -euo pipefail

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="${ROOT}/res/values"
          STRINGS="${VALUES}/strings.xml"
          STYLES="${VALUES}/styles.xml"
          mkdir -p "${VALUES}"

          # 1) 若 strings.xml 不存在，创建一个空骨架
          if [ ! -f "${STRINGS}" ]; then
            cat >"${STRINGS}" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
          </resources>
          EOF
          fi

          # 2) 若 styles.xml 不存在，写入一个默认主题，避免 R 资源缺失
          if [ ! -f "${STYLES}" ]; then
            cat >"${STYLES}" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
          </resources>
          EOF
          fi

          # 3) 清理旧项并写入新项
          sed -i '/name="app_name"/d'   "${STRINGS}" || true
          sed -i '/name="api_base"/d'   "${STRINGS}" || true
          sed -i '/name="api_secret"/d' "${STRINGS}" || true

          tmp="${STRINGS}.tmp"
          awk -v app="${APP_NAME}" -v base="${API_BASE}" -v secret="${API_SECRET}" '
            /<\/resources>/ && !done {
              print "    <string name=\"app_name\">"  app    "</string>";
              print "    <string name=\"api_base\">"  base   "</string>";
              print "    <string name=\"api_secret\">" secret "</string>";
              done=1
            }
            { print }
          ' "${STRINGS}" > "${tmp}" && mv "${tmp}" "${STRINGS}"

      - name: Build debug APK
        working-directory: templates/${{ steps.in.outputs.template }}
        run: ./gradlew clean assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk
