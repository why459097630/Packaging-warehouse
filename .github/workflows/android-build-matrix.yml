name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # 读取前端传入的 payload；兼容驼峰/下划线两种命名
      - name: Extract inputs
        id: in
        run: |
          echo "template=${{ github.event.client_payload.template }}" >> "$GITHUB_OUTPUT"
          echo "app_name=${{ github.event.client_payload.app_name || github.event.client_payload.appName }}" >> "$GITHUB_OUTPUT"
          echo "api_base=${{ github.event.client_payload.api_base || github.event.client_payload.apiBase }}" >> "$GITHUB_OUTPUT"
          echo "api_secret=${{ github.event.client_payload.api_secret || github.event.client_payload.apiSecret }}" >> "$GITHUB_OUTPUT"

      # 打印解析结果（secret 会被掩码），方便确认参数是否带过来
      - name: Show resolved inputs (masked)
        env:
          TEMPLATE:   ${{ steps.in.outputs.template }}
          APP_NAME:   ${{ steps.in.outputs.app_name }}
          API_BASE:   ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          echo "::add-mask::$API_SECRET"
          echo "[inputs] template = $TEMPLATE"
          echo "[inputs] app_name = $APP_NAME"
          echo "[inputs] api_base  = $API_BASE"
          if [ -z "$API_SECRET" ]; then
            echo "[inputs] api_secret = (empty)"
          else
            echo "[inputs] api_secret = (masked)"
          fi

      - name: Ensure gradlew executable
        run: chmod +x templates/**/gradlew || true

      # 模板目录存在性检查
      - name: Check template directory
        shell: bash
        run: |
          set -e
          if [ ! -d "templates/${{ steps.in.outputs.template }}" ]; then
            echo "Template directory not found: templates/${{ steps.in.outputs.template }}"
            exit 1
          fi

      # 写入 API 信息到 strings.xml（保持你原有逻辑）
      - name: Inject API data into template
        env:
          TEMPLATE:   ${{ steps.in.outputs.template }}
          APP_NAME:   ${{ steps.in.outputs.app_name }}
          API_BASE:   ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          set -euo pipefail

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="${ROOT}/res/values"
          STRINGS="${VALUES}/strings.xml"
          STYLES="${VALUES}/styles.xml"
          mkdir -p "${VALUES}"

          # 1) strings.xml 不存在则写空骨架
          if [ ! -f "${STRINGS}" ]; then
            cat >"${STRINGS}" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
          </resources>
          EOF
          fi

          # 2) styles.xml 不存在则写默认主题，避免 R 缺资源
          if [ ! -f "${STYLES}" ]; then
            cat >"${STYLES}" <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
          </resources>
          EOF
          fi

          # 3) 清理旧项并写入新项
          sed -i '/name="app_name"/d'   "${STRINGS}" || true
          sed -i '/name="api_base"/d'   "${STRINGS}" || true
          sed -i '/name="api_secret"/d' "${STRINGS}" || true

          tmp="${STRINGS}.tmp"
          awk -v app="${APP_NAME}" -v base="${API_BASE}" -v secret="${API_SECRET}" '
            /<\/resources>/ && !done {
              print "    <string name=\"app_name\">"  app    "</string>";
              print "    <string name=\"api_base\">"  base   "</string>";
              print "    <string name=\"api_secret\">" secret "</string>";
              done=1
            }
            { print }
          ' "${STRINGS}" > "${tmp}" && mv "${tmp}" "${STRINGS}"

      # 简要校验并打印片段，便于核对
      - name: Verify written resources
        shell: bash
        run: |
          VALUES="templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml"
          echo "===== strings.xml preview ====="
          sed -n '1,120p' "$VALUES" || true
          echo "================================"
          grep -q 'name="app_name"'  "$VALUES" && \
          grep -q 'name="api_base"'  "$VALUES" && \
          grep -q 'name="api_secret"' "$VALUES" || { echo "strings.xml missing expected entries"; exit 1; }

      # （可选）还原签名；存在则走 release 构建，不存在只打 debug
      - name: Restore keystore (optional)
        shell: bash
        env:
          KEYSTORE_BASE64:        ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD:      ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ALIAS:         ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_ALIAS_PASSWORD:${{ secrets.KEYSTORE_ALIAS_PASSWORD }}
        run: |
          set -e
          if [ -n "${KEYSTORE_BASE64:-}" ]; then
            echo "[signing] restore keystore"
            echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
            echo "KEYSTORE_PATH=$PWD/keystore.jks" >> $GITHUB_ENV
            echo "HAVE_KEYSTORE=true" >> $GITHUB_ENV
          else
            echo "HAVE_KEYSTORE=false" >> $GITHUB_ENV
          fi

      # 构建：始终打 debug；若有 keystore 再打 release & bundle；日志放大并保存
      - name: Build (debug + optional release) with verbose logs
        working-directory: templates/${{ steps.in.outputs.template }}
        env:
          ORG_GRADLE_PROJECT_org.gradle.jvmargs: -Xmx2g -Dfile.encoding=UTF-8
        shell: bash
        run: |
          set -e
          ./gradlew :app:clean :app:assembleDebug --stacktrace --info --no-daemon | tee ../../gradle.log
          if [ "${HAVE_KEYSTORE}" = "true" ]; then
            echo "[build] found keystore -> building release & bundle"
            ./gradlew :app:assembleRelease :app:bundleRelease --stacktrace --info --no-daemon | tee -a ../../gradle.log
          else
            echo "[build] no keystore -> skip release"
          fi

      # 列出输出，快速定位真实产物路径
      - name: List build outputs
        run: |
          echo "== outputs =="
          ls -R templates/${{ steps.in.outputs.template }}/app/build/outputs || true
          echo "== found =="
          find templates/${{ steps.in.outputs.template }}/app/build/outputs -type f \( -name "*.apk" -o -name "*.aab" \) -print || true

      # 没有任何 APK/AAB 就让构建失败（给出清晰错误）
      - name: Verify artifact exists
        run: |
          COUNT=$(find templates/${{ steps.in.outputs.template }}/app/build/outputs -type f \( -name "*.apk" -o -name "*.aab" \) | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "No APK/AAB produced under templates/${{ steps.in.outputs.template }}/app/build/outputs"
            exit 1
          fi

      # 上传 apk/aab（递归兜底；兼容 unsigned、多风味）
      - name: Upload APK/AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.in.outputs.template }}
          path: |
            templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/**/*.apk
            templates/${{ steps.in.outputs.template }}/app/build/outputs/bundle/**/*.aab

      # 把 gradle.log 与 values/Manifest 上传便于排查
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-and-res-${{ steps.in.outputs.template }}
          path: |
            gradle.log
            templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml
            templates/${{ steps.in.outputs.template }}/app/src/main/AndroidManifest.xml
