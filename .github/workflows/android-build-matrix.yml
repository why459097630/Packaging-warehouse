name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 读取 payload（兼容下划线/驼峰）
      - name: Extract inputs
        id: in
        run: |
          {
            echo "template=${{ github.event.client_payload.template }}";
            echo "app_name=${{ github.event.client_payload.app_name || github.event.client_payload.appName }}";
            echo "api_base=${{ github.event.client_payload.api_base || github.event.client_payload.apiBase }}";
            echo "api_secret=${{ github.event.client_payload.api_secret || github.event.client_payload.apiSecret }}";
          } >> "$GITHUB_OUTPUT"

      - name: Show resolved inputs (masked)
        env:
          TEMPLATE: "${{ steps.in.outputs.template }}"
          APP_NAME: "${{ steps.in.outputs.app_name }}"
          API_BASE: "${{ steps.in.outputs.api_base }}"
          API_SECRET: "${{ steps.in.outputs.api_secret }}"
        run: |
          if [ -n "$API_SECRET" ]; then
            echo "::add-mask::$API_SECRET"
            echo "[inputs] api_secret = (masked)"
          else
            echo "[inputs] api_secret = (empty)"
          fi
          echo "[inputs] template = $TEMPLATE"
          echo "[inputs] app_name = $APP_NAME"
          echo "[inputs] api_base  = $API_BASE"

      - name: Ensure gradlew executable
        run: |
          chmod +x "templates/${{ steps.in.outputs.template }}/gradlew" || true

      - name: Check template directory exists
        run: |
          test -d "templates/${{ steps.in.outputs.template }}" || { echo "Template not found: templates/${{ steps.in.outputs.template }}"; exit 1; }

      - name: Inject API data into template (safe)
        env:
          TEMPLATE: "${{ steps.in.outputs.template }}"
          APP_NAME: "${{ steps.in.outputs.app_name }}"
          API_BASE: "${{ steps.in.outputs.api_base }}"
          API_SECRET: "${{ steps.in.outputs.api_secret }}"
        run: |
          set -euo pipefail

          # 安全转义（避免把 &, <, >, " 等写坏到 XML）
          esc() { python3 -c 'import html,sys; print(html.escape(sys.argv[1] if len(sys.argv)>1 else "", quote=True))' "$1"; }

          APP_ESC="$(esc "${APP_NAME:-NDJC App}")"
          BASE_ESC="$(esc "${API_BASE:-}")"
          SEC_ESC="$(esc "${API_SECRET:-}")"

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="$ROOT/res/values"
          STRINGS="$VALUES/strings.xml"
          STYLES="$VALUES/styles.xml"
          mkdir -p "$VALUES"

          # 不存在就初始化
          [ -f "$STRINGS" ] || printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' '<resources></resources>' > "$STRINGS"
          [ -f "$STYLES" ]  || cat >"$STYLES" <<'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
</resources>
EOF

          # 去重并在 </resources> 之前插入三条
          sed -i '/name="app_name"/d;/name="api_base"/d;/name="api_secret"/d' "$STRINGS" || true
          tmp="${STRINGS}.tmp"
          awk -v a="$APP_ESC" -v b="$BASE_ESC" -v s="$SEC_ESC" '
            /<\/resources>/ && !x {
              print "  <string name=\"app_name\">" a "</string>";
              print "  <string name=\"api_base\">" b "</string>";
              print "  <string name=\"api_secret\">" s "</string>";
              x=1
            }
            { print }
          ' "$STRINGS" > "$tmp" && mv "$tmp" "$STRINGS"

      - name: Build debug APK
        working-directory: "templates/${{ steps.in.outputs.template }}"
        run: ./gradlew clean assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ steps.in.outputs.template }}
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk

      - name: Upload values for audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ steps.in.outputs.template }}
          path: |
            templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml
            templates/${{ steps.in.outputs.template }}/app/src/main/AndroidManifest.xml
