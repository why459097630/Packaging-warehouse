name: Android CI (robust + no-empty-apk)

on:
  push:
  workflow_dispatch:

env:
  # APK 体积下限（字节）。按你的模板实际情况可再上调，比如 4_000_000
  MIN_APK_BYTES: "3000000"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # 可选：安装/准备 Android SDK（AGP 也能自动拉取，保守起见放一层）
      - name: Set up Android SDK (optional)
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: |
          chmod +x gradlew || true
          find . -name gradlew -type f -exec chmod +x {} \; || true

      # 1) 从标记文件里“稳健”读取模板；找不到则回退为 form-template
      - name: Determine template from marker (robust with fallback)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="form-template"

          # 支持写入 app/src/main/assets/build_marker*.txt（取最新）
          if compgen -G "app/src/main/assets/build_marker*.txt" > /dev/null; then
            FILE=$(ls -1t app/src/main/assets/build_marker*.txt | head -n1)
            CAND=$(head -n1 "$FILE" | sed 's/\r//g' | xargs || true)
            if [[ "$CAND" =~ ^(core-template|form-template|simple-template)$ ]]; then
              TEMPLATE="$CAND"
            fi
          fi

          echo "template=$TEMPLATE" >> "$GITHUB_OUTPUT"
          echo "Using template: $TEMPLATE"

      # 2) 同步模板 —— 不仅拷贝 app，还要把根级 Gradle 文件也覆盖（否则会缺任务/版本不匹配）
      - name: Apply template to project
        shell: bash
        run: |
          set -euo pipefail
          TPL="${{ steps.pick.outputs.template }}"

          echo "Sync templates/$TPL -> project"
          rsync -a --delete "templates/$TPL/app/" "app/"

          for f in build.gradle settings.gradle gradle.properties; do
            if [ -f "templates/$TPL/$f" ]; then
              cp -f "templates/$TPL/$f" "./$f"
              echo "Applied $f from template"
            fi
          done

      # 3) 快速失败：基本文件是否存在，源/资源是否完全为空
      - name: Validate module is not empty (fail-fast)
        shell: bash
        run: |
          set -euo pipefail
          test -f app/src/main/AndroidManifest.xml || { echo "::error::缺少 app/src/main/AndroidManifest.xml"; exit 1; }

          RES=$(find app/src/main/res -type f 2>/dev/null | wc -l | tr -d ' ')
          SRC=$(find app/src/main -type f \( -name "*.kt" -o -name "*.java" \) 2>/dev/null | wc -l | tr -d ' ')
          echo "res files: $RES, source files: $SRC"

          if [ "${RES:-0}" -lt 1 ] && [ "${SRC:-0}" -lt 1 ]; then
            echo "::error::app/src/main 下没有任何资源或代码文件，疑似空项目"
            exit 1
          fi

      # 4) 先确认 :app 里确实存在 assembleRelease 任务（根因定位更直接）
      - name: Ensure :app:assembleRelease task exists
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :app:tasks --all > tasks.txt
          if ! grep -q "^assembleRelease" tasks.txt; then
            echo "::group:::app tasks"; cat tasks.txt; echo "::endgroup::"
            echo "::error::':app' 中未发现 assembleRelease 任务。请确认 app/build.gradle 使用 com.android.application 且包含 release 构建类型。"
            exit 1
          fi

      # 5) 真正编译
      - name: Build (unsigned)
        run: ./gradlew --no-daemon --stacktrace :app:assembleRelease

      # 6) 产物与体积校验（杜绝空包）
      - name: Verify release APK exists and size
        id: verify
        shell: bash
        env:
          MIN_APK_BYTES: ${{ env.MIN_APK_BYTES }}
        run: |
          set -euo pipefail
          APK=$(ls -1 app/build/outputs/apk/release/*-release*.apk | head -n1 || true)
          if [ -z "${APK:-}" ] || [ ! -f "$APK" ]; then
            echo "::error::未找到 release APK（app/build/outputs/apk/release/*-release*.apk）"
            exit 1
          fi
          SIZE=$(stat -c%s "$APK")
          echo "Release APK: $APK ($SIZE bytes)"

          echo "apk=$APK"  >> "$GITHUB_OUTPUT"
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"

          if [ "$SIZE" -lt "$MIN_APK_BYTES" ]; then
            echo "::error::APK 体积($SIZE) < 阈值($MIN_APK_BYTES)，疑似空包"
            exit 1
          fi

      # 7) 上传产物
      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.verify.outputs.apk }}
