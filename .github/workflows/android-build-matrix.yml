name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 1) 把收到的 client_payload 原样保存，便于排查
      - name: Upload raw payload
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > client-payload-raw.json
        shell: bash

      - name: Upload client-payload-raw.json
        uses: actions/upload-artifact@v4
        with:
          name: client-payload-raw
          path: client-payload-raw.json

      # 2) 兼容提取 & 输出
      - name: Extract inputs (compat snake/camel)
        id: in
        env:
          CP_TRACE_ID:        ${{ github.event.client_payload.trace_id }}
          CP_TEMPLATE:        ${{ github.event.client_payload.template }}
          CP_APP_NAME:        ${{ github.event.client_payload.app_name }}
          CP_APP_NAME_CAMEL:  ${{ github.event.client_payload.appName }}
          CP_API_BASE:        ${{ github.event.client_payload.api_base }}
          CP_API_BASE_CAMEL:  ${{ github.event.client_payload.apiBase }}
          CP_API_SECRET:      ${{ github.event.client_payload.api_secret }}
          CP_API_SECRET_CAMEL:${{ github.event.client_payload.apiSecret }}
        run: |
          set -euo pipefail
          trace_id="${CP_TRACE_ID:-}"
          template="${CP_TEMPLATE:-}"

          app_name="${CP_APP_NAME:-}"
          [ -z "$app_name" ] && app_name="${CP_APP_NAME_CAMEL:-}"

          api_base="${CP_API_BASE:-}"
          [ -z "$api_base" ] && api_base="${CP_API_BASE_CAMEL:-}"

          api_secret="${CP_API_SECRET:-}"
          [ -z "$api_secret" ] && api_secret="${CP_API_SECRET_CAMEL:-}"

          echo "trace_id=$trace_id"    >> "$GITHUB_OUTPUT"
          echo "template=$template"    >> "$GITHUB_OUTPUT"
          echo "app_name=$app_name"    >> "$GITHUB_OUTPUT"
          echo "api_base=$api_base"    >> "$GITHUB_OUTPUT"
          echo "api_secret=$api_secret">> "$GITHUB_OUTPUT"
        shell: bash

      - name: Validate required inputs
        env:
          O_TRACE:     ${{ steps.in.outputs.trace_id }}
          O_TEMPLATE:  ${{ steps.in.outputs.template }}
          O_APP_NAME:  ${{ steps.in.outputs.app_name }}
          O_API_BASE:  ${{ steps.in.outputs.api_base }}
          O_API_SECRET:${{ steps.in.outputs.api_secret }}
        run: |
          set -euo pipefail
          echo "trace_id=${O_TRACE}"
          miss=""
          [ -z "${O_TEMPLATE}"  ] && miss="$miss template"
          [ -z "${O_APP_NAME}"  ] && miss="$miss app_name"
          [ -z "${O_API_BASE}"  ] && miss="$miss api_base"
          [ -z "${O_API_SECRET}" ] && miss="$miss api_secret"
          if [ -n "$miss" ]; then
            echo "Missing required inputs:$miss"
            exit 1
          fi
        shell: bash

      - name: Echo extracted inputs
        env:
          O_TRACE:     ${{ steps.in.outputs.trace_id }}
          O_TEMPLATE:  ${{ steps.in.outputs.template }}
          O_APP_NAME:  ${{ steps.in.outputs.app_name }}
          O_API_BASE:  ${{ steps.in.outputs.api_base }}
          O_API_SECRET:${{ steps.in.outputs.api_secret }}
        run: |
          echo "----- Extracted inputs -----"
          echo "trace_id      = ${O_TRACE}"
          printf 'template      = [%s]\n' "${O_TEMPLATE}"
          printf 'app_name      = [%s]  len=%s\n' "${O_APP_NAME}"  "${#O_APP_NAME}"
          printf 'api_base      = [%s]  len=%s\n' "${O_API_BASE}"  "${#O_API_BASE}"
          printf 'api_secret    = [%s]  len=%s\n' "${O_API_SECRET}" "${#O_API_SECRET}"
          echo "----------------------------"
        shell: bash

      - name: Ensure gradlew executable
        run: chmod +x templates/**/gradlew || true
        shell: bash

      # 3) 注入 strings.xml / styles.xml（若不存在则创建骨架）
      - name: Inject API data into template
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET:${{ steps.in.outputs.api_secret }}
        run: |
          set -euo pipefail

          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="${ROOT}/res/values"
          STRINGS="${VALUES}/strings.xml"
          STYLES="${VALUES}/styles.xml"

          mkdir -p "${VALUES}"

          # strings.xml skeleton
          if [ ! -f "${STRINGS}" ]; then
            cat >"${STRINGS}" <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
          </resources>
          XML
          fi

          # styles.xml skeleton
          if [ ! -f "${STYLES}" ]; then
            cat >"${STYLES}" <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>
          </resources>
          XML
          fi

          # 清除旧项
          sed -i '/name="app_name"/d'   "${STRINGS}" || true
          sed -i '/name="api_base"/d'   "${STRINGS}" || true
          sed -i '/name="api_secret"/d' "${STRINGS}" || true

          # 追加新项到 </resources> 之前
          tmp="${STRINGS}.tmp"
          awk -v app="${APP_NAME}" -v base="${API_BASE}" -v secret="${API_SECRET}" '
            /<\/resources>/ && !done {
              print "    <string name=\"app_name\">"  app    "</string>";
              print "    <string name=\"api_base\">"  base   "</string>";
              print "    <string name=\"api_secret\">" secret "</string>";
              done=1
            }
            { print }
          ' "${STRINGS}" > "${tmp}" && mv "${tmp}" "${STRINGS}"

          # 保存注入后的快照，便于排查
          cp "${STRINGS}" "values-${TEMPLATE}.xml"
        shell: bash

      - name: Upload values snapshot
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ steps.in.outputs.template }}
          path: values-${{ steps.in.outputs.template }}.xml

      # 4) 构建 APK
      - name: Build debug APK
        working-directory: templates/${{ steps.in.outputs.template }}
        run: ./gradlew --no-daemon clean assembleDebug
        shell: bash

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk
