name: Android CI (no-empty-apk with content-pack)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip

      # 1) 选择模板（从 marker/输入推断；简化：默认 form-template）
      - name: Pick template
        id: pick
        shell: bash
        run: |
          set -e
          T="form-template"
          if [ -f app/src/main/assets/build_marker.txt ]; then
            TT=$(grep -Eo 'core-template|form-template|simple-template' app/src/main/assets/build_marker.txt || true)
            [ -n "$TT" ] && T="$TT"
          fi
          echo "template=$T" >> $GITHUB_OUTPUT
          echo "Using template: $T"

      # 2) 应用模板到 app/（保持干净环境）
      - name: Apply template to app/
        shell: bash
        run: |
          set -e
          T="${{ steps.pick.outputs.template }}"
          rsync -a --delete "templates/$T/app/" "app/"

      # 3) 注入内容包（这是关键：模板之后再合入）
      - name: Inject content pack
        shell: bash
        run: |
          set -e
          if [ -d content_pack/app ]; then
            rsync -a content_pack/app/ app/
            echo "Injected content_pack into app/"
          else
            echo "No content_pack/app directory — if API未写入，这里会是空"
          fi

      # 4) Gradle 前硬闸：必须有我们注入的业务文件（否则 fail）
      - name: Pre-build hard gate (content exists)
        shell: bash
        run: |
          set -e
          test -f app/src/main/AndroidManifest.xml || { echo "::error::Missing AndroidManifest.xml"; exit 1; }
          test -f app/src/main/java/com/app/generated/MainActivity.java || { echo "::error::Missing generated MainActivity.java"; exit 1; }
          test -f app/src/main/res/layout/activity_generated.xml || { echo "::error::Missing layout/activity_generated.xml"; exit 1; }
          MARKER=$(ls -1 app/src/main/assets/build_marker_*.json 2>/dev/null || true)
          [ -n "$MARKER" ] || { echo "::error::No build_marker json in assets"; exit 1; }
          echo "Marker: $MARKER"
          # 至少1个layout + 至少1个源码，进一步兜底
          L=$(find app/src/main/res/layout -name '*.xml' | wc -l | xargs)
          S=$(find app/src/main/java -name '*.java' -o -name '*.kt' | wc -l | xargs)
          [ "$L" -ge 1 ] || { echo "::error::no layout"; exit 1; }
          [ "$S" -ge 1 ] || { echo "::error::no source"; exit 1; }

      - name: Prepare Gradle wrapper
        run: |
          set -e
          chmod +x gradlew
          ./gradlew --version

      # 5) 智能选择构建任务
      - name: Choose Gradle task
        id: choose
        shell: bash
        run: |
          set -e
          if ./gradlew -q :app:tasks --all | grep -q '^assembleRelease'; then
            echo "task=:app:assembleRelease" >> $GITHUB_OUTPUT
            echo "variant=release" >> $GITHUB_OUTPUT
          else
            echo "task=:app:assembleDebug" >> $GITHUB_OUTPUT
            echo "variant=debug" >> $GITHUB_OUTPUT
          fi

      - name: Build
        run: ./gradlew --no-daemon --stacktrace ${{ steps.choose.outputs.task }}

      - name: Locate APK
        id: locate
        shell: bash
        run: |
          set -e
          v="${{ steps.choose.outputs.variant }}"
          APK=$(ls -1 app/build/outputs/apk/$v/*-$v*.apk 2>/dev/null | head -n1 || true)
          [ -n "$APK" ] || { echo "::error::No APK under outputs/apk/$v"; exit 1; }
          echo "apk=$APK" >> $GITHUB_OUTPUT
          echo "Found $APK"

      # 6) Gradle 后硬闸：真正拦下“空壳”
      - name: Post-build hard gate (no-empty-apk)
        shell: bash
        run: |
          set -e
          APK="${{ steps.locate.outputs.apk }}"
          SIZE=$(stat -c%s "$APK")
          [ "$SIZE" -ge 2500000 ] || { echo "::error::APK too small ($SIZE)"; exit 1; }
          unzip -l "$APK" > /tmp/list.txt
          grep -q 'AndroidManifest.xml' /tmp/list.txt || { echo "::error::Manifest missing in APK"; exit 1; }
          grep -q 'classes.dex' /tmp/list.txt || { echo "::error::classes.dex missing in APK"; exit 1; }
          # 资源数量
          RES=$(grep -E ' res/(layout|drawable|mipmap)/' /tmp/list.txt | wc -l | xargs)
          [ "$RES" -ge 3 ] || { echo "::error::not enough resources in APK ($RES)"; exit 1; }
          # marker 必须被打入 assets
          MARK=$(basename $(ls -1 app/src/main/assets/build_marker_*.json | head -n1))
          unzip -l "$APK" | grep -q "assets/$MARK" || { echo "::error::marker not inside APK"; exit 1; }
          echo "✓ APK structure ok"

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-${{ steps.choose.outputs.variant }}-apk
          path: ${{ steps.locate.outputs.apk }}
