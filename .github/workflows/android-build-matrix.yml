name: Android CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make scripts executable
        run: |
          chmod +x ./gradlew || true
          chmod +x .github/scripts/apply_api_payload.sh || true

      # ========= 仅供联调演示：生成一份“API返回”的最小payload =========
      # 之后把这步改成：从你的服务拉取代码，并写入 /tmp/*.txt，然后调用脚本
      - name: Prepare demo API payload (replace with real API)
        shell: bash
        run: |
          set -e
          # 写 MainActivity.java
          printf '%s\n' \
'package com.example.meditationtimer;' \
'' \
'import android.os.Bundle;' \
'import android.widget.TextView;' \
'import androidx.appcompat.app.AppCompatActivity;' \
'' \
'public class MainActivity extends AppCompatActivity {' \
'  @Override' \
'  protected void onCreate(Bundle savedInstanceState) {' \
'    super.onCreate(savedInstanceState);' \
'    setContentView(R.layout.activity_main);' \
'    TextView tv = findViewById(R.id.textHello);' \
'    if (tv != null) tv.setText(getString(R.string.hello_text));' \
'  }' \
'}' > /tmp/MainActivity.java.txt

          # 写 activity_main.xml
          printf '%s\n' \
'<?xml version="1.0" encoding="utf-8"?>' \
'<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"' \
'  android:orientation="vertical" android:gravity="center"' \
'  android:layout_width="match_parent" android:layout_height="match_parent">' \
'  <TextView' \
'    android:id="@+id/textHello"' \
'    android:text="@string/hello_text"' \
'    android:layout_width="wrap_content"' \
'    android:layout_height="wrap_content"/>' \
'</LinearLayout>' > /tmp/activity_main.xml.txt

          # 写 strings.xml
          printf '%s\n' \
'<resources>' \
'  <string name="app_name">Niandong Demo</string>' \
'  <string name="hello_text">Hello from API (CI)</string>' \
'</resources>' > /tmp/strings.xml.txt

      # ========= 把“API返回”的三段源码喂给脚本，落盘到 app/src =========
      - name: Apply API payload into project
        shell: bash
        run: |
          set -e
          export MAIN_JAVA="$(cat /tmp/MainActivity.java.txt)"
          export LAYOUT_XML="$(cat /tmp/activity_main.xml.txt)"
          export STRINGS_XML="$(cat /tmp/strings.xml.txt)"
          .github/scripts/apply_api_payload.sh

      - name: Build APK
        run: ./gradlew --stacktrace --no-daemon assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
