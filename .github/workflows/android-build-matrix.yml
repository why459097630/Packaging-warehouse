name: Android CI Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      expect_text:
        description: "期望在 UI 中出现的文本（留空则从 strings.xml:hello_text 自动抽取）"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [30]
        target: [default]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ========== 如果缺源码则写入兜底版本（防空包） ==========
      - name: Ensure generated sources exist (create fallback if missing)
        run: |
          set -e
          mkdir -p app/src/main/java/com/example/meditationtimer
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values

          # MainActivity.java
          if [ ! -s app/src/main/java/com/example/meditationtimer/MainActivity.java ]; then
            echo "[fallback] writing MainActivity.java"
            cat <<'EOF' > app/src/main/java/com/example/meditationtimer/MainActivity.java
            package com.example.meditationtimer;

            import android.os.Bundle;
            import android.widget.TextView;
            import androidx.appcompat.app.AppCompatActivity;

            public class MainActivity extends AppCompatActivity {
                @Override
                protected void onCreate(Bundle savedInstanceState) {
                    super.onCreate(savedInstanceState);
                    setContentView(R.layout.activity_main);
                    TextView tv = findViewById(R.id.textHello);
                    if (tv != null) {
                        tv.setText(getString(R.string.hello_text));
                    }
                }
            }
            EOF
          else
            echo "MainActivity.java already present"
          fi

          # layout
          if [ ! -s app/src/main/res/layout/activity_main.xml ]; then
            echo "[fallback] writing activity_main.xml"
            cat <<'EOF' > app/src/main/res/layout/activity_main.xml
            <?xml version="1.0" encoding="utf-8"?>
            <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
                android:orientation="vertical"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="match_parent">
              <TextView
                  android:id="@+id/textHello"
                  android:text="@string/hello_text"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"/>
            </LinearLayout>
            EOF
          else
            echo "activity_main.xml already present"
          fi

          # strings
          if [ ! -s app/src/main/res/values/strings.xml ]; then
            echo "[fallback] writing strings.xml"
            cat <<'EOF' > app/src/main/res/values/strings.xml
            <resources>
              <string name="app_name">Niandong Demo</string>
              <string name="hello_text">Hello from API (fallback)</string>
            </resources>
            EOF
          else
            echo "strings.xml already present"
          fi

      # ========== 动态推导 EXPECT_TEXT ==========
      - name: Derive EXPECT_TEXT (input/commit/strings.xml)
        id: derive_text
        run: |
          set -e
          INPUT="${{ github.event.inputs.expect_text }}"
          if [ -n "$INPUT" ]; then
            echo "EXPECT_TEXT from workflow input: $INPUT"
            echo "EXPECT_TEXT=$INPUT" >> "$GITHUB_ENV"
            exit 0
          fi
          MSG="${{ github.event.head_commit.message }}"
          if echo "$MSG" | grep -q 'EXPECT='; then
            VAL="$(echo "$MSG" | sed -n "s/.*EXPECT=\(.*\)$/\1/p" | head -n1)"
            if [ -n "$VAL" ]; then
              echo "EXPECT_TEXT from commit message: $VAL"
              echo "EXPECT_TEXT=$VAL" >> "$GITHUB_ENV"
              exit 0
            fi
          fi
          if [ -f app/src/main/res/values/strings.xml ]; then
            VAL="$(sed -n 's/.*<string name="hello_text">\([^<]*\)<.*/\1/p' app/src/main/res/values/strings.xml | head -n1)"
            if [ -n "$VAL" ]; then
              echo "EXPECT_TEXT from strings.xml: $VAL"
              echo "EXPECT_TEXT=$VAL" >> "$GITHUB_ENV"
              exit 0
            fi
          fi
          echo "No EXPECT_TEXT found; fallback to keyword mode."
          echo "EXPECT_TEXT=" >> "$GITHUB_ENV"

      # ========== 源码可视化 ==========
      - name: Show generated sources (debug)
        run: |
          echo "=== MainActivity.java ==="
          sed -n '1,200p' app/src/main/java/com/example/meditationtimer/MainActivity.java || true
          echo "=== activity_main.xml ==="
          sed -n '1,200p' app/src/main/res/layout/activity_main.xml || true
          echo "=== strings.xml ==="
          cat app/src/main/res/values/strings.xml || true

      # ========== 存在性校验 ==========
      - name: Verify generated sources exist
        run: |
          set -e
          test -s app/src/main/java/com/example/meditationtimer/MainActivity.java || { echo "MainActivity.java missing"; exit 1; }
          test -s app/src/main/res/layout/activity_main.xml || { echo "activity_main.xml missing"; exit 1; }
          test -s app/src/main/res/values/strings.xml || { echo "strings.xml missing"; exit 1; }

      # ========== 构建 ==========
      - name: Gradle Build
        run: ./gradlew --stacktrace --no-daemon clean assembleDebug

      # ========== APK 内含代码 + 资源校验 ==========
      - name: Verify APK contains generated code
        run: |
          set -e
          APK="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"
          test -f "$APK" || { echo "No APK found"; exit 1; }
          echo "APK => $APK"
          if ! command -v aapt >/dev/null 2>&1; then
            sdkmanager --install "build-tools;34.0.0"
            export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"
          fi
          PKG="$(aapt dump badging "$APK" | awk -F"'" '/package: name=/{print $2}')"
          ACT="$(aapt dump badging "$APK" | awk -F"'" '/launchable-activity: name=/{print $2}')"
          echo "Detected package: $PKG"
          echo "Launchable activity: $ACT"
          [ "$PKG" = "com.example.meditationtimer" ] || { echo "Unexpected package: $PKG"; exit 1; }
          [ "$ACT" = "com.example.meditationtimer.MainActivity" ] || { echo "Unexpected launcher: $ACT"; exit 1; }

          FOUND=0
          for dex in $(unzip -Z1 "$APK" 'classes*.dex'); do
            echo "Scanning $dex ..."
            if unzip -p "$APK" "$dex" 2>/dev/null | strings | grep -qE 'L?com/example/meditationtimer/MainActivity;?'; then
              FOUND=1; break
            fi
          done
          [ "$FOUND" -eq 1 ] || { echo "MainActivity not found in any classes*.dex"; exit 1; }

          echo "---- Dump all strings with values ----"
          aapt dump --values resources "$APK" | tee /tmp/aapt_all.txt

          if [ -n "$EXPECT_TEXT" ]; then
            echo "EXPECT_TEXT set => enforcing match: $EXPECT_TEXT"
            grep -qF "$EXPECT_TEXT" /tmp/aapt_all.txt || { echo "hello_text does not contain EXPECT_TEXT"; exit 1; }
          else
            echo "EXPECT_TEXT not set => fallback keyword check"
            grep -q "Hello from API" /tmp/aapt_all.txt || { echo "keyword 'Hello from API' not found"; exit 1; }
          fi

          SIZE=$(stat -c%s "$APK")
          echo "APK size: $SIZE bytes"
          [ "$SIZE" -gt 1000000 ] || { echo "APK too small (<1MB)"; exit 1; }
          echo "APK verification passed."

      # ========== 上传 APK ==========
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7

      # ========== 模拟器 15s 冒烟 + UI 文案验收 ==========
      - name: Emulator smoke run (15s crash monitor + UI check)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: pixel_5
          disable-animations: true
          script: |
            set -e
            APK_PATH="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"; [ -n "$APK_PATH" ] || { echo "No APK"; exit 1; }
            command -v aapt >/dev/null 2>&1 || { sdkmanager --install "build-tools;34.0.0"; export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"; }
            PKG="$(aapt dump badging "$APK_PATH" | awk -F\" '/package: name=/{print $2}')"
            ACT="$(aapt dump badging "$APK_PATH" | awk -F\" '/launchable-activity: name=/{print $2}')"
            echo "Detected package: $PKG"; echo "Detected launcher: $ACT"

            adb install -r "$APK_PATH" >/dev/null
            adb logcat -c
            adb shell am start -n "${PKG}/${ACT}"
            sleep 3

            adb shell uiautomator dump --compressed /sdcard/window_dump.xml >/dev/null 2>&1 || true
            adb pull /sdcard/window_dump.xml /tmp/window_dump.xml >/dev/null 2>&1 || true
            echo "---- UI dump snippet ----"
            head -n 60 /tmp/window_dump.xml || true

            TXT="${EXPECT_TEXT:-Hello from API}"
            if grep -q "$TXT" /tmp/window_dump.xml; then
              echo "UI check passed: found text => $TXT"
            else
              echo "UI text not found: $TXT"; tail -n 200 /tmp/window_dump.xml || true; exit 1
            fi

            timeout 15s sh -c 'adb logcat | tee /tmp/logcat.txt | grep -q -E "FATAL EXCEPTION|Process[[:space:]].*'"$PKG"'[[:space:]].*has died"'
            RES=$?
            [ "$RES" -eq 0 ] && { echo "Crash detected during smoke run:"; tail -n 200 /tmp/logcat.txt || true; exit 1; } || echo "Smoke run passed (no fatal crash in 15s)."
