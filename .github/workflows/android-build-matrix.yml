name: Android CI (no-empty-apk with content-pack)

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y aapt apksigner jq unzip

      - name: Pick template
        id: pick
        run: |
          set -euo pipefail
          if [[ -f app/template.marker ]]; then
            TEMPLATE="$(cat app/template.marker)"
          else
            # 默认 form-template；你也可以从提交信息或路径读取
            TEMPLATE="form-template"
          fi
          echo "template=$TEMPLATE" >> $GITHUB_OUTPUT
          echo "Using template: $TEMPLATE"

      - name: Apply template to app/
        run: |
          set -euo pipefail
          # 模板此处若需要覆盖基础文件，按需处理；通常 app 目录已有模板，不需要额外替换

      # === 关键：把 content_pack 注入到 app/ ===
      - name: Inject content pack
        run: |
          set -euo pipefail
          if [[ ! -d content_pack/app ]]; then
            echo "No content_pack/app found in repo. Did the API commit succeed?"
            echo "Tree:"; ls -R
            exit 1
          fi
          rsync -av --delete content_pack/app/ app/
          echo "After injection:"
          find app/src/main -maxdepth 6 -type f \( -name "MainActivity.java" -o -name "activity_generated.xml" -o -name "strings_generated.xml" -o -name "build_marker_*.json" \) -print || true

      # === 预构建硬闸：必须存在内容 ===
      - name: Pre-build hard gate (content exists)
        run: |
          set -euo pipefail
          echo "Check generated artifacts..."
          FOUND_JAVA="$(find app/src/main/java -type f -path "*/generated/MainActivity.java" | head -n1 || true)"
          FOUND_LAYOUT="$(find app/src/main/res/layout -type f -name "activity_generated.xml" | head -n1 || true)"
          FOUND_STRINGS="$(find app/src/main/res/values -type f -name "strings_generated.xml" | head -n1 || true)"
          FOUND_MARKER="$(find app/src/main/assets -type f -name "build_marker_*.json" | head -n1 || true)"

          echo "FOUND_JAVA=$FOUND_JAVA"
          echo "FOUND_LAYOUT=$FOUND_LAYOUT"
          echo "FOUND_STRINGS=$FOUND_STRINGS"
          echo "FOUND_MARKER=$FOUND_MARKER"

          [[ -n "$FOUND_JAVA" ]]    || { echo "Error: Missing generated MainActivity.java"; exit 1; }
          [[ -n "$FOUND_LAYOUT" ]]  || { echo "Error: Missing layout activity_generated.xml"; exit 1; }
          [[ -n "$FOUND_STRINGS" ]] || { echo "Error: Missing strings_generated.xml"; exit 1; }
          [[ -n "$FOUND_MARKER" ]]  || { echo "Error: Missing build_marker_*.json"; exit 1; }

      - name: Prepare Gradle wrapper
        run: |
          chmod +x ./gradlew

      - name: Choose Gradle task (assembleRelease -> assembleDebug)
        id: gradle
        run: |
          set -euo pipefail
          TASK="assembleRelease"
          echo "task=$TASK" >> $GITHUB_OUTPUT

      - name: Build (unsigned)
        run: |
          set -euo pipefail
          ./gradlew --no-daemon -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m" app:${{ steps.gradle.outputs.task }}

      - name: Locate APK
        id: locate
        run: |
          set -euo pipefail
          APK=$(ls -1 app/build/outputs/apk/*/*.apk | head -n1 || true)
          echo "apk=$APK" >> $GITHUB_OUTPUT
          [[ -n "$APK" ]] || { echo "No APK produced"; exit 1; }
          echo "APK=$APK"

      # === 构建后硬闸：APK 绝不能为空 ===
      - name: Post-build hard gate (no-empty-apk)
        run: |
          set -euo pipefail
          APK="${{ steps.locate.outputs.apk }}"
          echo "Verify $APK"

          # aapt dump 清单，检查可启动 Activity
          aapt dump badging "$APK" | tee /tmp/aapt.txt
          LAUNCHABLE=$(grep -Eo "launchable-activity: name='[^']+'" /tmp/aapt.txt | head -n1 || true)
          [[ -n "$LAUNCHABLE" ]] || { echo "No launchable activity"; exit 1; }

          # 检查 dex/manifest/资源是否存在且尺寸合理
          UNZ=/tmp/apk_unz && rm -rf "$UNZ" && mkdir -p "$UNZ"
          unzip -q "$APK" -d "$UNZ"
          test -s "$UNZ/AndroidManifest.xml" || { echo "Missing manifest"; exit 1; }
          test -s "$UNZ/classes.dex"         || { echo "Missing classes.dex"; exit 1; }
          test -d "$UNZ/res"                 || { echo "Missing res"; exit 1; }

          # 体积/文件数简易阈值（可按需调整）
          FILES=$(find "$UNZ" -type f | wc -l)
          SIZE=$(stat -c%s "$APK")
          echo "FILES=$FILES SIZE=$SIZE"
          [[ $FILES -ge 200 ]] || { echo "APK too small (files<$FILES)"; exit 1; }
          [[ $SIZE  -ge 3000000 ]] || { echo "APK too small (size<$SIZE)"; exit 1; }

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.locate.outputs.apk }}
