name: Android CI (robust + no-empty-apk)

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'templates/**'
      - '.github/workflows/android-build-matrix.yml'
  workflow_dispatch:
    inputs:
      template:
        description: "Override template (core-template|form-template|simple-template)"
        required: false
        default: ""
      minApkSizeKB:
        description: "Fail if release APK size < this KB"
        required: false
        default: "100"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '17'
      MIN_APK_KB: ${{ inputs.minApkSizeKB || '100' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 1) 解析模板：dispatch > assets 标记 > 仓库 grep > 回退 form-template
      - name: Determine template from marker (robust with fallback)
        id: pick
        shell: bash
        run: |
          set -euo pipefail

          if [[ -n "${{ inputs.template }}" ]]; then
            tmpl="${{ inputs.template }}"
            echo "template set by dispatch: $tmpl"
          else
            tmpl="$(grep -Eroh '(core-template|form-template|simple-template)' app/src/main/assets 2>/dev/null | head -n1 || true)"
            if [[ -z "${tmpl:-}" ]]; then
              tmpl="$(git grep -Eo '(core-template|form-template|simple-template)' -- '**/*.txt' ':/app' 2>/dev/null | head -n1 | awk '{print $1}' || true)"
            fi
            if [[ -z "${tmpl:-}" ]]; then
              echo "::warning ::No template marker found. fallback -> form-template"
              tmpl="form-template"
            fi
          fi

          case "$tmpl" in
            core-template|form-template|simple-template) ;;
            *) echo "::warning ::Invalid template '$tmpl'. fallback -> form-template"; tmpl="form-template" ;;
          esac

          echo "template=$tmpl" >> "$GITHUB_OUTPUT"
          echo "Template resolved: $tmpl"

      # 2) 应用模板到 app/
      - name: Apply template to app/
        shell: bash
        run: |
          set -euo pipefail
          tmpl="${{ steps.pick.outputs.template }}"
          src="templates/${tmpl}/app"
          dst="app"

          if [[ ! -d "$src" ]]; then
            echo "::error::Template path not found: $src"
            exit 1
          fi

          echo "Cleaning ${dst}/src/main ..."
          rm -rf "${dst:?}/src/main"
          mkdir -p "${dst}/src"

          echo "Copy ${src}/src/main -> ${dst}/src/main"
          rsync -a --delete "${src}/src/main/" "${dst}/src/main/"

          if [[ -f "${src}/build.gradle" ]]; then
            cp -f "${src}/build.gradle" "${dst}/build.gradle"
          fi
          if [[ -f "${src}/build.gradle.kts" ]]; then
            cp -f "${src}/build.gradle.kts" "${dst}/build.gradle.kts"
          fi

          echo "=== Tree after applying template ==="
          (command -v tree >/dev/null && tree -L 3 app/src || find app/src -maxdepth 3 -print)

      # 3) 编译前“防空包”校验（不使用 set -e，务必把原因打印出来）
      - name: Validate module is not empty (fail-fast but verbose)
        shell: bash
        run: |
          set -u  # 不用 -e，保证都能打印完再 exit 1

          echo "PWD: $(pwd)"
          echo "ls -la:"
          ls -la || true
          echo "ls -la app/src/main:"
          ls -la app/src/main || true

          if [[ ! -f app/src/main/AndroidManifest.xml ]]; then
            echo "::error::Missing AndroidManifest.xml under app/src/main/"
            exit 1
          fi

          count_src () {
            local total=0 n=0
            if [[ -d "app/src/main/java" ]]; then
              n=$(find app/src/main/java -type f \( -name '*.kt' -o -name '*.java' \) 2>/dev/null | wc -l || echo 0)
              total=$(( total + n ))
            fi
            if [[ -d "app/src/main/kotlin" ]]; then
              n=$(find app/src/main/kotlin -type f \( -name '*.kt' -o -name '*.java' \) 2>/dev/null | wc -l || echo 0)
              total=$(( total + n ))
            fi
            echo "${total}"
          }

          count_res () {
            if [[ -d "app/src/main/res" ]]; then
              find app/src/main/res -type f 2>/dev/null | wc -l || echo 0
            else
              echo 0
            fi
          }

          count_assets () {
            if [[ -d "app/src/main/assets" ]]; then
              find app/src/main/assets -type f 2>/dev/null | wc -l || echo 0
            else
              echo 0
            fi
          }

          src_total=$(count_src)
          res_total=$(count_res)
          assets_total=$(count_assets)

          echo "Source files (java|kotlin): ${src_total}"
          echo "Resource files (res):       ${res_total}"
          echo "Asset files (assets):       ${assets_total}"

          # 至少要有：源码 >=1，且 (资源>=1 或 资产>=1) —— 防纯空壳
          fail=0
          if [[ "${src_total}" -lt 1 ]]; then
            echo "::error::No source files under app/src/main/java|kotlin"
            fail=1
          fi
          if [[ "${res_total}" -lt 1 && "${assets_total}" -lt 1 ]]; then
            echo "::error::Neither res nor assets exist under app/src/main/ (both empty)"
            fail=1
          fi

          if [[ "$fail" -ne 0 ]]; then
            echo ">>> Directory tree for debugging:"
            (command -v tree >/dev/null && tree -L 4 app/src || find app/src -maxdepth 4 -print)
            exit 1
          fi

          echo "Pre-build validation passed ✅"

      # 4) 可选：修补 namespace
      - name: Patch Gradle namespace (optional)
        shell: bash
        run: |
          set -euo pipefail
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY##*/}"; repo="${repo,,}"
          ns="com.${owner//[^a-z0-9]/}.app.${repo//[^a-z0-9]/}"

          if [[ -f app/build.gradle ]]; then
            sed -i -E "s/namespace\\s*=\\s*\"[^\"]+\"/namespace \"$ns\"/g" app/build.gradle || true
          fi
          if [[ -f app/build.gradle.kts ]]; then
            sed -i -E "s/namespace\\s*=\\s*\"[^\"]+\"/namespace = \"$ns\"/g" app/build.gradle.kts || true
          fi
          if grep -q 'package="com.example' app/src/main/AndroidManifest.xml 2>/dev/null; then
            sed -i -E "s/package=\"[^\"]+\"/package=\"$ns\"/g" app/src/main/AndroidManifest.xml || true
          fi
          echo "Namespace set to: $ns"

      # 5) 编译（unsigned）
      - name: Build (unsigned)
        run: ./gradlew --no-daemon clean :app:assembleRelease

      # 6) 产物体积阈值（防空包）
      - name: Verify release APK exists and size
        id: apkcheck
        shell: bash
        run: |
          set -euo pipefail
          APK=$(ls -1 app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)
          if [[ -z "${APK}" ]]; then
            echo "::error::No release APK produced under app/build/outputs/apk/release"
            exit 1
          fi
          size_kb=$(( $(stat -c%s "$APK") / 1024 ))
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          echo "size_kb=$size_kb" >> "$GITHUB_OUTPUT"
          echo "APK: $APK ($size_kb KB)"

          min_kb="${{ env.MIN_APK_KB }}"
          if [[ "${size_kb}" -lt "${min_kb}" ]]; then
            echo "::error::APK too small (${size_kb}KB < ${min_kb}KB). Failing to prevent empty APK."
            exit 1
          fi

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.apkcheck.outputs.apk }}
          if-no-files-found: error
