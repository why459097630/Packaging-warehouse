name: Android CI (robust + no-empty-apk)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  MODULE_PATH: app
  APK_NAME: unsigned-release-apk
  MARKER_PATH: app/src/main/assets/build_marker.txt

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Determine template from marker (robust with fallback)
        id: marker
        shell: bash
        run: |
          set -euo pipefail
          t=""
          if [[ -n "${TEMPLATE:-}" ]]; then
            t="${TEMPLATE}"
          elif [[ -f "${MARKER_PATH}" ]]; then
            # 读标记文件并去掉所有空白/CR/LF
            t="$(tr -d '\r\n ' < "${MARKER_PATH}")"
          fi

          case "$t" in
            core-template|form-template|simple-template)
              echo "template=${t}" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "Invalid or missing template in marker. Expected one of: core-template|form-template|simple-template"
              echo "template=" >> "$GITHUB_OUTPUT"
              exit 1
              ;;
          esac

      - name: Apply template to app/
        if: steps.marker.outputs.template != ''
        shell: bash
        run: |
          set -euo pipefail
          tpl="templates/${{ steps.marker.outputs.template }}"
          [[ -d "$tpl" ]] || { echo "Template dir not found: $tpl"; exit 1; }
          # 合并模板（不覆盖已存在的具体实现）
          rsync -a --ignore-existing "$tpl/" "${MODULE_PATH}/"

      - name: Validate module is not empty (fail-fast)
        shell: bash
        run: |
          set -euo pipefail
          # 1) 不能没有源码
          if ! ls ${MODULE_PATH}/src/main/java/* -R >/dev/null 2>&1 && \
             ! ls ${MODULE_PATH}/src/main/kotlin/* -R >/dev/null 2>&1; then
            echo "❌ No Java/Kotlin source files under ${MODULE_PATH}/src/main"
            exit 1
          fi

          # 2) 不能缺 AndroidManifest.xml
          if [[ ! -f "${MODULE_PATH}/src/main/AndroidManifest.xml" ]]; then
            echo "❌ Missing ${MODULE_PATH}/src/main/AndroidManifest.xml"
            exit 1
          fi

          # 3) 不能出现历史遗留的禁用项（例如 android.enableAapt2）
          if [[ -f "gradle.properties" ]] && grep -q "^android\.enableAapt2" gradle.properties; then
            echo "❌ Found deprecated 'android.enableAapt2' in gradle.properties. Remove it."
            exit 1
          fi

      - name: Build (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :${MODULE_PATH}:assembleRelease --stacktrace

      - name: Verify release APK exists and size
        shell: bash
        run: |
          set -euo pipefail
          apk=$(ls ${MODULE_PATH}/build/outputs/apk/release/*.apk | head -n1 || true)
          if [[ -z "$apk" ]]; then
            echo "❌ Release APK not found."
            exit 1
          fi
          size=$(stat -c%s "$apk")
          echo "APK: $apk, size: $size bytes"
          # 小于 3MB 判定为空包（你可以再调大/调小）
          if [[ "$size" -lt 3145728 ]]; then
            echo "❌ APK is too small (likely empty)."
            exit 1
          fi
          echo "APK_PATH=$apk" >> $GITHUB_ENV

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}
          path: ${{ env.APK_PATH }}
