name: Android Build (Matrix)

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "App display name (用于 Release 标题)"
      package_name:
        description: "Android package name"
        default: "com.example.generated"
      commit_sha:
        description: "Commit SHA that triggered the build"
      template_slug:
        description: "Template slug"
        default: "simple-template"

permissions:
  contents: write

concurrency:
  group: build-${{ github.actor }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PROJECT_DIR: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 识别 gradlew 路径并修复权限/CRLF
      - name: Ensure gradlew executable (and fix CRLF)
        shell: bash
        run: |
          set -e
          if [ -f "./gradlew" ]; then
            sed -i 's/\r$//' gradlew || true
            chmod +x gradlew
            echo "PROJECT_DIR=." >> $GITHUB_ENV
          elif [ -f "android/gradlew" ]; then
            sed -i 's/\r$//' android/gradlew || true
            chmod +x android/gradlew
            echo "PROJECT_DIR=android" >> $GITHUB_ENV
          else
            echo "❌ gradlew not found (./gradlew or android/gradlew)" >&2
            exit 1
          fi

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 关闭缓存（稳定优先）
      - name: Setup Gradle (no cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true

      # 写入 CI 的 Android SDK 路径
      - name: Fix Android SDK path for CI
        run: |
          echo "sdk.dir=${ANDROID_SDK_ROOT:-$ANDROID_HOME}" > ${{ env.PROJECT_DIR }}/local.properties
          cat ${{ env.PROJECT_DIR }}/local.properties

      - name: Accept Android SDK licenses
        run: |
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/tools/bin/sdkmanager" --licenses || true

      # 生成 debug.keystore（作为 fallback，Secrets 缺失时仍可内测）
      - name: Ensure Android debug keystore
        shell: bash
        run: |
          set -e
          mkdir -p "${HOME}/.android"
          if [ ! -f "${HOME}/.android/debug.keystore" ]; then
            keytool -genkeypair -alias AndroidDebugKey \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US" \
              -storetype JKS \
              -keystore "${HOME}/.android/debug.keystore" \
              -storepass android -keypass android
          fi
          echo "ANDROID_DEBUG_KEYSTORE=${HOME}/.android/debug.keystore" >> $GITHUB_ENV

      # 使用你仓库里已有的 Secrets（ANDROID_*）解码 release keystore 并映射为构建期变量
      - name: (Optional) Setup release keystore from secrets
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          set -e
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$HOME/release.keystore"
          echo "RELEASE_KEYSTORE=$HOME/release.keystore" >> $GITHUB_ENV
          echo "RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "RELEASE_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> $GITHUB_ENV

      # Gradle wrapper 网络超时兜底
      - name: Set wrapper timeout env
        run: |
          echo "GRADLE_OPTS=-Dorg.gradle.wrapper.networkTimeout=600000" >> $GITHUB_ENV
          echo "JAVA_TOOL_OPTIONS=-Dorg.gradle.wrapper.networkTimeout=600000" >> $GITHUB_ENV

      # 预热 wrapper（最多重试 3 次）
      - name: Pre-warm Gradle wrapper (with retry)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          for i in 1 2 3; do
            echo "Warm-up attempt $i ..."
            if ./gradlew --version; then
              echo "Gradle wrapper ready."
              break
            fi
            sleep $((i * 10))
          done

      # 构建：同时产出 APK + AAB（详细日志）
      - name: Build release (APK + AAB)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_android_useAndroidX: "true"
          ORG_GRADLE_PROJECT_android_enableJetifier: "true"
          ORG_GRADLE_PROJECT_android_suppressUnsupportedCompileSdk: "true"
        run: |
          set -o pipefail
          ./gradlew --no-daemon assembleRelease bundleRelease -i --stacktrace -Dorg.gradle.jvmargs="-Xmx3g -Dfile.encoding=UTF-8"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
          if-no-files-found: error
          retention-days: 30

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: aab
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
          retention-days: 30

      - name: Create Release (prerelease)
        id: ghrelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: run-${{ github.run_id }}
          name: ${{ github.event.inputs.app_name || 'Generated App' }} · ${{ github.run_id }}
          files: |
            ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
            ${{ env.PROJECT_DIR }}/app/build/outputs/bundle/release/*.aab
          draft: false
          prerelease: true

      - name: Output URL
        run: |
          echo "Release: https://github.com/${{ github.repository }}/releases/tag/run-${{ github.run_id }}"
