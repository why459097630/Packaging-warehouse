name: Android CI (robust + no-empty-apk)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 可选：安装排查用的小工具
      - name: Install tools (jq, unzip)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: "34.0.0"
          ndk: false
          cmake: false

      # -------- 可选：从 marker 中读取模板/提示（没有就安全回退） --------
      - name: Determine template & prompt from marker (robust)
        id: marker
        shell: bash
        run: |
          set -euo pipefail
          json=$(ls -1 app/src/main/assets/build_marker_*.json 2>/dev/null || true)
          txt="app/src/main/assets/build_marker.txt"
          TEMPLATE="form-template"
          PROMPT=""

          if [[ -n "${json}" ]]; then
            echo "Marker JSON: ${json}"
            TEMPLATE=$(jq -r '.template // empty' "${json}" || true)
            PROMPT=$(jq -r '.prompt // empty'   "${json}" || true)
          elif [[ -f "${txt}" ]]; then
            echo "Marker TXT: ${txt}"
            # 支持 "template=form-template" / "prompt=xxxx" 的简单格式
            TEMPLATE=$(grep -E '^template=' "${txt}" | head -n1 | cut -d= -f2- || true)
            PROMPT=$(grep -E '^prompt='   "${txt}" | head -n1 | cut -d= -f2- || true)
          else
            echo "No marker found. Fallback to defaults."
          fi

          [[ -z "${TEMPLATE}" ]] && TEMPLATE="form-template"
          echo "template=${TEMPLATE}"
          echo "prompt=${PROMPT}"

          echo "template=${TEMPLATE}" >> "$GITHUB_OUTPUT"
          echo "prompt=${PROMPT}"     >> "$GITHUB_OUTPUT"

      # -------- 如你已有“应用模板”的步骤，保留/替换为你自己的命令 --------
      - name: Apply template to app/ (no-op placeholder)
        if: always()
        run: |
          echo "Template resolved: ${{ steps.marker.outputs.template }}"
          # 如果你需要，可在这里根据模板把代码拷到 app/ 里
          # 例如：rsync -a --delete "templates/${{ steps.marker.outputs.template }}/" app/

      - name: Prepare Gradle wrapper
        run: |
          chmod +x gradlew
          git ls-files | grep -E '\.sh$|gradlew$' | xargs -r chmod +x

      # -------- 智能选择构建任务：优先 release，不存在则退化为 debug --------
      - name: Choose Gradle task (assembleRelease -> assembleDebug)
        id: choose
        shell: bash
        run: |
          set -euo pipefail
          if ./gradlew -q :app:tasks --all | grep -qE '(^| )assembleRelease( |$)'; then
            TASK=":app:assembleRelease"
            VARIANT="release"
          elif ./gradlew -q :app:tasks --all | grep -qE '(^| )assembleDebug( |$)'; then
            TASK=":app:assembleDebug"
            VARIANT="debug"
          else
            echo "::error ::Neither assembleRelease nor assembleDebug exists under :app. Check your plugins/buildTypes."
            ./gradlew -q :app:tasks --all || true
            exit 1
          fi
          echo "task=${TASK}"       >> "$GITHUB_OUTPUT"
          echo "variant=${VARIANT}" >> "$GITHUB_OUTPUT"
          echo "Chosen task: ${TASK}, variant: ${VARIANT}"

      - name: Build (unsigned)
        run: |
          set -euo pipefail
          ./gradlew --no-daemon --stacktrace ${{ steps.choose.outputs.task }}

      # -------- 稳健地查找 APK 并导出路径 --------
      - name: Locate APK
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          VARIANT="${{ steps.choose.outputs.variant }}"
          APK_GLOB="app/build/outputs/apk/${VARIANT}/*-${VARIANT}.apk"
          APK_PATH=$(ls -1 ${APK_GLOB} 2>/dev/null | head -n1 || true)
          if [[ -z "${APK_PATH}" ]]; then
            echo "Fallback to generic find ..."
            APK_PATH=$(find app/build/outputs/apk -type f -name "*.apk" | head -n1 || true)
          fi
          if [[ -z "${APK_PATH}" ]]; then
            echo "::error ::No APK produced by Gradle."
            exit 1
          fi
          echo "apk=${APK_PATH}" >> "$GITHUB_OUTPUT"
          echo "Found APK: ${APK_PATH}"

      # -------- 强校验：卡住空包/只壳 APK --------
      - name: Enforce non-empty APK (size + dex + manifest)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.locate.outputs.apk }}"
          MIN_SIZE_BYTES=2500000   # 默认阈值 2.5MB；如需按模板细分，可在 marker 里扩展阈值
          SIZE=$(stat -c%s "${APK}")
          echo "APK size: ${SIZE} bytes"
          if [[ "${SIZE}" -lt "${MIN_SIZE_BYTES}" ]]; then
            echo "::error ::APK too small (< ${MIN_SIZE_BYTES} bytes)."
            exit 1
          fi
          unzip -l "${APK}" > /tmp/apk.lst
          grep -q 'AndroidManifest.xml' /tmp/apk.lst || { echo "::error ::AndroidManifest.xml missing in APK"; exit 1; }
          grep -q 'classes.dex'         /tmp/apk.lst || { echo "::error ::classes.dex missing in APK (likely empty)"; exit 1; }
          echo "APK structure looks valid."

      # （可选）输出 Gradle task 列表以便排查
      - name: List Gradle tasks (debug)
        if: failure()
        run: ./gradlew -q :app:tasks --all || true

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.locate.outputs.apk }}
          if-no-files-found: error
