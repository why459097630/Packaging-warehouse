name: Android CI (no-empty-apk + content-pack)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: android-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  JAVA_VERSION: "17"
  ANDROID_API: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  # 构建后“空包否决”阈值（字节）。视模板和资源大小可适当提高到 3_000_000+
  MIN_APK_SIZE: "2000000"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platforms;android-${{ env.ANDROID_API }}
            build-tools;${{ env.ANDROID_BUILD_TOOLS }}
            platform-tools

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #####################################################################
      # 0) 若 app 目录缺失，则用一个可编译的最小模板兜底（避免目录为空）
      #####################################################################
      - name: Ensure app/ exists (fallback to simple-template)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d app ] || [ -z "$(ls -A app || true)" ]; then
            if [ -d templates/simple-template/app ]; then
              echo "app/ is empty, copy templates/simple-template/app as base"
              rsync -a templates/simple-template/app/ app/
            else
              echo "::error::No app/ and no templates/simple-template/app to fallback."
              exit 1
            fi
          fi

      #####################################################################
      # 1) 注入 content_pack（由 API 写入仓库：content_pack/app/*）
      #####################################################################
      - name: Inject content pack
        shell: bash
        run: |
          set -euo pipefail
          echo "== repo top tree =="
          ls -la

          if [ ! -d content_pack/app ]; then
            echo "::error::No content_pack/app found in repo. Did the API commit succeed?"
            echo "== show repo tree (maxdepth=2) =="
            find . -maxdepth 2 -type d -print
            exit 1
          fi

          echo "== Copy content_pack/app/* -> app/ =="
          rsync -a --delete content_pack/app/ app/

          echo "== After injection (partial) =="
          find app -maxdepth 5 -type f | sed 's#^#  #g' | head -n 200

          # 关键文件存在性校验
          test -f app/src/main/AndroidManifest.xml || { echo "::error::Missing AndroidManifest.xml"; exit 1; }
          MAIN_FILE=$(grep -Rl --include="*.java" --include="*.kt" "class MainActivity" app/src/main/java || true)
          if [ -z "$MAIN_FILE" ]; then
            echo "::error::Missing MainActivity (java/kt)"
            exit 1
          fi

          # 从 Manifest 解析包名，并校验目录
          PKG=$(sed -n 's/.*package="\([^"]*\)".*/\1/p' app/src/main/AndroidManifest.xml | head -n1)
          if [ -z "$PKG" ]; then
            echo "::error::Cannot parse package name from AndroidManifest.xml"
            exit 1
          fi
          PKG_PATH=$(echo "$PKG" | tr '.' '/')
          if [ ! -d "app/src/main/java/$PKG_PATH" ]; then
            echo "::error::Java package path not match: app/src/main/java/$PKG_PATH"
            exit 1
          fi

          # 让 applicationId 与 Manifest 保持一致（如不一致则覆盖）
          if [ -f app/build.gradle ]; then
            sed -i.bak -E "s/applicationId \"[^\"]+\"/applicationId \"$PKG\"/g" app/build.gradle || true
          fi

          echo "Injected package: $PKG"

      #####################################################################
      # 2) 预编译硬闸：至少要有 1 个 java/kt 与 1 个 xml
      #####################################################################
      - name: Pre-build hard gate (content exists)
        shell: bash
        run: |
          set -euo pipefail
          JAVA_COUNT=$(find app/src/main/java -type f \( -name '*.java' -o -name '*.kt' \) | wc -l | tr -d ' ')
          XML_COUNT=$(find app/src/main/res -type f -name '*.xml' | wc -l | tr -d ' ')
          echo "JAVA=$JAVA_COUNT  XML=$XML_COUNT"
          if [ "$JAVA_COUNT" -lt 1 ] || [ "$XML_COUNT" -lt 1 ]; then
            echo "::error::Not enough content (java=$JAVA_COUNT xml=$XML_COUNT)"
            exit 1
          fi
          test -s app/src/main/AndroidManifest.xml

      #####################################################################
      # 3) Gradle 可执行 & 统一换行符
      #####################################################################
      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -euo pipefail
          sed -i 's/\r$//' gradlew || true
          chmod +x gradlew
          # 避免模板中 gradlew 未记录执行位：强制设置一遍
          git update-index --chmod=+x gradlew || true

      #####################################################################
      # 4) 选择 assemble 任务
      #####################################################################
      - name: Choose Gradle task (assembleRelease -> assembleDebug)
        id: pick_gradle_task
        shell: bash
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "task=assembleRelease" >> "$GITHUB_OUTPUT"
          else
            echo "task=assembleDebug" >> "$GITHUB_OUTPUT"
          fi
          echo "picked task: ${{ steps.pick_gradle_task.outputs.task }}"

      #####################################################################
      # 5) 构建
      #####################################################################
      - name: Build (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon -S :app:${{ steps.pick_gradle_task.outputs.task }}

      #####################################################################
      # 6) 定位 APK
      #####################################################################
      - name: Locate APK
        id: locate_apk
        shell: bash
        run: |
          set -euo pipefail
          APK=$(find app/build/outputs/apk -type f -name "*-release*.apk" -o -name "*-debug*.apk" | head -n1 || true)
          if [ -z "$APK" ]; then
            echo "::error::No APK produced"
            exit 1
          fi
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          echo "Found APK: $APK"

      #####################################################################
      # 7) 构建后硬闸：按大小兜底，杜绝空包
      #####################################################################
      - name: Post-build hard gate (no-empty-apk)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.locate_apk.outputs.apk }}"
          if [ -z "$APK" ]; then
            echo "::error::APK path missing"
            exit 1
          fi
          if stat --version >/dev/null 2>&1; then
            SIZE=$(stat -c%s "$APK")
          else
            SIZE=$(stat -f%z "$APK")
          fi
          echo "APK size: $SIZE"
          if [ "$SIZE" -lt "${{ env.MIN_APK_SIZE }}" ]; then
            echo "::error::APK too small (< ${{ env.MIN_APK_SIZE }}) — likely empty"
            exit 1
          fi

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.locate_apk.outputs.apk }}
