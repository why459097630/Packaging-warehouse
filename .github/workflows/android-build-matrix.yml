name: android-build-matrix

on:
  workflow_dispatch:
    inputs:
      template:
        description: "form-template | simple-template | core-template"
        required: true
        default: form-template
      version:
        description: "App version"
        required: true
        default: 1.0.0
      apk_name:
        description: "APK name"
        required: true
        default: MyApp
      api_base:
        description: "API base (optional)"
        required: false
        default: ""
      api_secret:
        description: "API secret (optional)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Ensure gradlew executable
        shell: bash
        run: |
          set -e
          find templates -name gradlew -type f -print0 | xargs -0 chmod +x

      - name: Inject API data into template
        shell: bash
        env:
          TEMPLATE: ${{ inputs.template }}
          APK_NAME: ${{ inputs.apk_name }}
          API_BASE: ${{ inputs.api_base }}
          API_SECRET: ${{ inputs.api_secret }}
        run: |
          set -euo pipefail
          ROOT="templates/${TEMPLATE}/app/src/main"
          VALUES="${ROOT}/res/values"
          STRINGS="${VALUES}/strings.xml"
          STYLES="${VALUES}/styles.xml"

          mkdir -p "${VALUES}"

          # strings.xml —— 创建或清理后再写入
          if [ ! -f "${STRINGS}" ]; then
            cat > "${STRINGS}" <<EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
</resources>
EOF
          fi

          sed -i '/name="app_name"/d'   "${STRINGS}"
          sed -i '/name="api_base"/d'   "${STRINGS}"
          sed -i '/name="api_secret"/d' "${STRINGS}"

          # 在 </resources> 之前插入字符串
          tmp="${STRINGS}.tmp"
          awk -v app="${APK_NAME}" -v base="${API_BASE}" -v secret="${API_SECRET}" '
            /<\/resources>/ && !done {
              print "    <string name=\"app_name\">" app "</string>"
              if (length(base))   print "    <string name=\"api_base\">" base "</string>"
              if (length(secret)) print "    <string name=\"api_secret\">" secret "</string>"
              done=1
            }
            { print }
          ' "${STRINGS}" > "${tmp}" && mv "${tmp}" "${STRINGS}"

          # styles.xml —— 创建或补齐 AppTheme
          if [ ! -f "${STYLES}" ]; then
            cat > "${STYLES}" <<EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="android:statusBarColor">@android:color/transparent</item>
    </style>
</resources>
EOF
          fi

          if ! grep -q 'style name="AppTheme"' "${STYLES}"; then
            tmp="${STYLES}.tmp"
            awk '
              /<\/resources>/ && !done {
                print "    <style name=\"AppTheme\" parent=\"Theme.MaterialComponents.DayNight.NoActionBar\">"
                print "        <item name=\"android:statusBarColor\">@android:color/transparent</item>"
                print "    </style>"
                done=1
              }
              { print }
            ' "${STYLES}" > "${tmp}" && mv "${tmp}" "${STYLES}"

      - name: Build debug APK
        working-directory: templates/${{ inputs.template }}
        run: ./gradlew clean assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.apk_name }}-${{ inputs.version }}-debug
          path: templates/${{ inputs.template }}/app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
