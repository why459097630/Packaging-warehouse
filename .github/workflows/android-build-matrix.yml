name: Android CI Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # 可选：设置后会在 APK/模拟器里严格匹配这个文本
      EXPECT_TEXT: ""   # 例如：Hello from API 2025-08-18T05:38:52

    strategy:
      matrix:
        api-level: [30]
        target: [default]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ---- 生成代码内容可视化 ----
      - name: Show generated sources (debug)
        run: |
          echo "=== MainActivity.java ==="
          sed -n '1,200p' app/src/main/java/com/example/meditationtimer/MainActivity.java || true
          echo "=== activity_main.xml ==="
          sed -n '1,200p' app/src/main/res/layout/activity_main.xml || true
          echo "=== strings.xml ==="
          cat app/src/main/res/values/strings.xml || true

      # ---- 生成文件存在性校验 ----
      - name: Verify generated sources exist
        run: |
          set -e
          test -f generated/.ok || { echo "missing generated/.ok"; exit 1; }
          test -s app/src/main/java/com/example/meditationtimer/MainActivity.java || { echo "MainActivity.java is empty/missing"; exit 1; }
          test -f app/src/main/res/layout/activity_main.xml || { echo "missing activity_main.xml"; exit 1; }
          test -f app/src/main/res/values/strings.xml || { echo "missing strings.xml"; exit 1; }

      # ---- 构建 ----
      - name: Gradle Build
        run: ./gradlew --stacktrace --no-daemon clean assembleDebug

      # ---- APK 内含代码 + 资源校验（多 DEX & 资源 dump）----
      - name: Verify APK contains generated code
        run: |
          set -e
          APK="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"
          test -f "$APK" || { echo "No APK found in app/build/outputs/apk/debug"; exit 1; }
          echo "APK => $APK"

          if ! command -v aapt >/dev/null 2>&1; then
            sdkmanager --install "build-tools;34.0.0"
            export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"
          fi

          PKG="$(aapt dump badging "$APK" | awk -F"'" '/package: name=/{print $2}')"
          ACT="$(aapt dump badging "$APK" | awk -F"'" '/launchable-activity: name=/{print $2}')"
          echo "Detected package: $PKG"
          echo "Launchable activity: $ACT"
          [ "$PKG" = "com.example.meditationtimer" ] || { echo "Unexpected package: $PKG"; exit 1; }
          [ "$ACT" = "com.example.meditationtimer.MainActivity" ] || { echo "Unexpected launcher: $ACT"; exit 1; }

          FOUND=0
          for dex in $(unzip -Z1 "$APK" 'classes*.dex'); do
            echo "Scanning $dex ..."
            if unzip -p "$APK" "$dex" 2>/dev/null | strings | grep -qE 'L?com/example/meditationtimer/MainActivity;?'; then
              FOUND=1; break
            fi
          done
          [ "$FOUND" -eq 1 ] || { echo "MainActivity not found in any classes*.dex"; exit 1; }

          echo "---- Dump hello_text from APK resources ----"
          aapt dump resources "$APK" \
            | awk '/resource 0x[0-9a-f]+ com.example.meditationtimer:string\/hello_text/{flag=1;next}/^resource /{flag=0}flag' \
            | tee /tmp/hello.txt

          if [ -n "$EXPECT_TEXT" ]; then
            echo "EXPECT_TEXT set => enforcing match: $EXPECT_TEXT"
            grep -q "$EXPECT_TEXT" /tmp/hello.txt || { echo "hello_text does not contain EXPECT_TEXT"; exit 1; }
          else
            echo "EXPECT_TEXT not set => skip strict text match."
          fi

          SIZE=$(stat -c%s "$APK")
          echo "APK size: $SIZE bytes"
          [ "$SIZE" -gt 1000000 ] || { echo "APK too small (<1MB), likely empty"; exit 1; }

          echo "APK verification passed."

      # ---- 上传 APK ----
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7

      # ---- 模拟器 15s 冒烟 + UI 实测验收（uiautomator dump）----
      - name: Emulator smoke run (15s crash monitor + UI check)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: pixel_5
          disable-animations: true
          script: |
            set -e
            APK_PATH="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"; [ -n "$APK_PATH" ] || { echo "No APK under app/build/outputs/apk/debug"; exit 1; }
            command -v aapt >/dev/null 2>&1 || { sdkmanager --install "build-tools;34.0.0"; export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"; }
            PKG="$(aapt dump badging "$APK_PATH" | awk -F\" '/package: name=/{print $2}')"
            ACT="$(aapt dump badging "$APK_PATH" | awk -F\" '/launchable-activity: name=/{print $2}')"
            echo "Detected package: $PKG"; echo "Detected launcher: $ACT"

            adb install -r "$APK_PATH" >/dev/null
            adb logcat -c
            adb shell am start -n "${PKG}/${ACT}"

            # 等待渲染稳定
            sleep 3

            # 抓取界面层级并校验文案
            adb shell uiautomator dump --compressed /sdcard/window_dump.xml >/dev/null 2>&1 || true
            adb pull /sdcard/window_dump.xml /tmp/window_dump.xml >/dev/null 2>&1 || true
            echo "---- UI dump snippet ----"
            head -n 60 /tmp/window_dump.xml || true

            TXT="${EXPECT_TEXT:-Hello from API}"
            if grep -q "$TXT" /tmp/window_dump.xml; then
              echo "UI check passed: found text => $TXT"
            else
              echo "UI text not found: $TXT"; tail -n 200 /tmp/window_dump.xml || true; exit 1
            fi

            # 15s 崩溃监视
            timeout 15s sh -c 'adb logcat | tee /tmp/logcat.txt | grep -q -E "FATAL EXCEPTION|Process[[:space:]].*'"$PKG"'[[:space:]].*has died"'
            RES=$?
            [ "$RES" -eq 0 ] && { echo "Crash detected during smoke run:"; tail -n 200 /tmp/logcat.txt || true; exit 1; } || echo "Smoke run passed (no fatal crash in 15s)."
