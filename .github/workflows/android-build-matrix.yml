name: Android CI (robust + no-empty-apk)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # 允许的模板白名单（不要改名）
      VALID_TEMPLATES: "core-template|form-template|simple-template"
      # 标记文件（前端或PowerShell会写入该文件，首行是模板名）
      MARKER_GLOB: "app/src/main/assets/build_marker*"
      # 允许根据模板给不同的最小体积阈值（可选）
      DEFAULT_MIN_APK_SIZE: "1000000" # 1MB

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 读取标记文件得到模板名；无效或缺失时降级为 form-template
      - name: Determine template from marker (robust with fallback)
        shell: bash
        run: |
          set -euo pipefail
          echo "== Detect template from marker =="
          TEMPLATE=""
          MARKER="$(ls ${MARKER_GLOB} 2>/dev/null | head -n1 || true)"
          if [[ -n "${MARKER}" ]]; then
            TEMPLATE="$(sed -n '1p' "${MARKER}" | tr -d '\r' | xargs || true)"
          fi
          if [[ -z "${TEMPLATE}" ]]; then
            echo "::warning::Marker not found or empty. Fallback to form-template"
            TEMPLATE="form-template"
          fi
          case "${TEMPLATE}" in
            core-template|form-template|simple-template) : ;;
            *)
              echo "::warning::Invalid template '${TEMPLATE}'. Expected one of: ${VALID_TEMPLATES}. Fallback to form-template"
              TEMPLATE="form-template"
              ;;
          esac
          echo "TEMPLATE=${TEMPLATE}"
          echo "TEMPLATE=${TEMPLATE}" >> "$GITHUB_ENV"

      # 把模板应用到 app/；并在缺少 wrapper 时把 gradlew / gradle wrapper 也带到根目录
      - name: Apply template to app/
        shell: bash
        run: |
          set -euo pipefail
          echo "Applying template: ${TEMPLATE}"
          rsync -a --delete "templates/${TEMPLATE}/app/" "app/"
          if [[ ! -f gradlew ]]; then
            rsync -a "templates/${TEMPLATE}/gradlew" . 2>/dev/null || true
            rsync -a "templates/${TEMPLATE}/gradle" ./gradle 2>/dev/null || true
            rsync -a "templates/${TEMPLATE}/gradle.properties" . 2>/dev/null || true
            rsync -a "templates/${TEMPLATE}/settings.gradle"* . 2>/dev/null || true
            rsync -a "templates/${TEMPLATE}/build.gradle"* . 2>/dev/null || true
          fi
          chmod +x gradlew || true
          echo "== Files under app/src/main (maxdepth=2) =="
          find app/src/main -maxdepth 2 -type f -print | sed 's/^/  /' || true

      # 失败即停：清点最少三件套（Manifest / res / 源码）
      - name: Validate module is not empty (fail-fast)
        shell: bash
        run: |
          set -euo pipefail
          echo "== Fail-fast check for minimal module content =="

          test -f app/src/main/AndroidManifest.xml \
            || { echo "::error::Missing app/src/main/AndroidManifest.xml"; exit 1; }

          test -d app/src/main/res \
            || { echo "::error::Missing app/src/main/res directory"; exit 1; }
          RES=$(find app/src/main/res -type f | wc -l | xargs)
          echo "res files: ${RES}"
          [[ "${RES}" -ge 1 ]] || { echo "::error::No resource files in res/"; exit 1; }

          SRC=$(find app/src/main -type f \( -name '*.kt' -o -name '*.java' \) | wc -l | xargs)
          echo "source files: ${SRC}"
          [[ "${SRC}" -ge 1 ]] || { echo "::error::No Kotlin/Java sources"; exit 1; }

      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -e
          chmod +x gradlew
          ./gradlew --version

      - name: Build (unsigned)
        shell: bash
        run: |
          set -e
          ./gradlew --no-daemon -stacktrace :app:assembleRelease

      # 可选：按模板定制最小体积阈值（没有就用默认 1MB）
      - name: Load template-specific APK size threshold (optional)
        id: threshold
        shell: bash
        run: |
          set -euo pipefail
          case "${TEMPLATE}" in
            core-template)   MIN=${DEFAULT_MIN_APK_SIZE} ;;
            form-template)   MIN=${DEFAULT_MIN_APK_SIZE} ;;
            simple-template) MIN=${DEFAULT_MIN_APK_SIZE} ;;
            *)               MIN=${DEFAULT_MIN_APK_SIZE} ;;
          esac
          echo "min=${MIN}" >> "$GITHUB_OUTPUT"

      - name: Verify release APK exists and size
        shell: bash
        run: |
          set -euo pipefail
          GLOB="app/build/outputs/apk/release/*-release.apk"
          APKS=( $GLOB )
          [[ ${#APKS[@]} -ge 1 ]] || { echo "::error::No release APK produced"; exit 1; }
          for apk in "${APKS[@]}"; do
            # stat -c 在不同内核有差异，兼容一个
            if stat --version >/dev/null 2>&1; then
              SIZE=$(stat -c%s "$apk")
            else
              SIZE=$(wc -c <"$apk")
            fi
            echo "APK: $apk  size=${SIZE}"
            [[ "${SIZE}" -ge "${{ steps.threshold.outputs.min }}" ]] \
              || { echo "::error::APK too small (< ${{ steps.threshold.outputs.min }} bytes)"; exit 1; }
          done

      # 深度校验：解包检查 classes.dex / AndroidManifest.xml / resources.arsc 或 res 文件
      - name: Deep verify APK contents (no-empty-apk hard gate)
        shell: bash
        run: |
          set -euo pipefail
          GLOB="app/build/outputs/apk/release/*-release.apk"
          for apk in $GLOB; do
            echo "== Inspect $apk =="
            TMP=$(mktemp -d)
            unzip -qq "$apk" -d "$TMP"

            test -f "$TMP/AndroidManifest.xml" \
              || { echo "::error::Missing AndroidManifest.xml inside APK"; exit 1; }

            # classes.dex 至少要有 1 个
            DEX_COUNT=$(find "$TMP" -maxdepth 1 -name 'classes*.dex' | wc -l | xargs)
            echo "dex files: ${DEX_COUNT}"
            [[ "${DEX_COUNT}" -ge 1 ]] \
              || { echo "::error::No classes.dex in APK (empty code)"; exit 1; }

            # 资源：resources.arsc 或 res/ 下至少1个文件
            if [[ ! -f "$TMP/resources.arsc" ]]; then
              RESC=$(find "$TMP/res" -type f | wc -l | xargs 2>/dev/null || echo 0)
              echo "res files in APK: ${RESC}"
              [[ "${RESC}" -ge 1 ]] \
                || { echo "::error::No resources.arsc and res/ is empty"; exit 1; }
            fi

            # 允许 assets/ 为空，不作为硬门槛
            rm -rf "$TMP"
          done

      # （可选）借助 aapt 打印包名等，便于调试
      - name: Inspect manifest (aapt badging)
        shell: bash
        continue-on-error: true
        run: |
          set -e
          AAPT=$(ls "${ANDROID_HOME}/build-tools"/*/aapt 2>/dev/null | sort -V | tail -n1 || true)
          if [[ -x "${AAPT}" ]]; then
            for apk in app/build/outputs/apk/release/*-release.apk; do
              echo "== aapt dump badging: $apk =="
              "${AAPT}" dump badging "$apk" | head -n 20 || true
            done
          else
            echo "::warning::aapt not found, skip badging"
          fi

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: app/build/outputs/apk/release/*-release.apk
