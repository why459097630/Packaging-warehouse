name: Android CI (robust + no-empty-apk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      TEMPLATE:
        description: 'Template override (core-template|form-template|simple-template)'
        default: ''
        required: false

permissions:
  contents: read

concurrency:
  group: android-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MODULE: app
      JAVA_VERSION: '17'
      # 允许手动覆盖模板：在 workflow_dispatch 时从 inputs 带入
      TEMPLATE: ${{ github.event.inputs.TEMPLATE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Make gradlew executable
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      # -------- 关键：更健壮的模板识别，不会再在这里终止 -------
      - name: Determine template from marker (robust with fallback)
        id: marker
        shell: bash
        run: |
          set -euo pipefail
          ALLOWED="core-template|form-template|simple-template"
          TPL="${TEMPLATE:-}"

          # 1) 找 build_marker 文件（允许没有模板名）
          MARKER="$(git ls-files 'app/src/main/assets/build_marker*' | tail -n1 || true)"

          # 2) 从文件名解析
          if [[ -z "${TPL}" && -n "${MARKER}" ]] && echo "${MARKER}" | grep -E -o "${ALLOWED}" >/dev/null; then
            TPL="$(echo "${MARKER}" | grep -E -o "${ALLOWED}" | head -n1)"
          fi

          # 3) 从文件内容解析（template=xxx 或文本/JSON里包含模板名）
          if [[ -z "${TPL}" && -n "${MARKER}" ]]; then
            if grep -E -o "${ALLOWED}" -m1 "${MARKER}" >/dev/null; then
              TPL="$(grep -E -o "${ALLOWED}" -m1 "${MARKER}")"
            elif head -n1 "${MARKER}" | grep -q 'template='; then
              TPL="$(head -n1 "${MARKER}" | sed -nE 's/.*template=([a-z-]+).*/\1/p')"
            fi
          fi

          # 4) 从最近一次 commit message 兜底（推荐你使用形如：apk: <tpl> | <time>）
          if [[ -z "${TPL}" ]]; then
            MSG="$(git log -1 --pretty=%B || true)"
            if echo "${MSG}" | grep -E -o "${ALLOWED}" >/dev/null; then
              TPL="$(echo "${MSG}" | grep -E -o "${ALLOWED}" | head -n1)"
            fi
          fi

          # 5) 最终兜底：默认 form-template
          if [[ -z "${TPL}" ]]; then
            TPL="form-template"
            echo "::warning::Template not found, falling back to ${TPL}"
          fi

          echo "template=${TPL}" >> "${GITHUB_OUTPUT}"
          echo "Using template=${TPL}"

      # -------- 应用模板到工程根目录（覆盖 app/、gradle、settings.gradle 等） -------
      - name: Apply template to project
        shell: bash
        run: |
          set -euo pipefail
          TPL='${{ steps.marker.outputs.template }}'
          SRC="templates/${TPL}"

          test -d "${SRC}" || { echo "Template directory ${SRC} not found"; exit 1; }

          # 排除不应覆盖的目录
          rsync -a "${SRC}/" ./ \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'README.md'

          echo "Template ${TPL} applied."

      # -------- 预检：确保不是“空工程” -------
      - name: Validate module is not empty (fail-fast)
        shell: bash
        run: |
          set -euo pipefail
          MANIFEST="${{ env.MODULE }}/src/main/AndroidManifest.xml"
          test -f "${MANIFEST}" || { echo "AndroidManifest.xml not found"; exit 1; }

          # MAIN/LAUNCHER
          if ! grep -q 'android.intent.action.MAIN' "${MANIFEST}"; then
            echo "No MAIN intent found in Manifest"; exit 1
          fi
          if ! grep -q 'android.intent.category.LAUNCHER' "${MANIFEST}"; then
            echo "No LAUNCHER category found in Manifest"; exit 1
          fi

          # 至少有一份代码或 Kotlin/Java 源
          SRC_DIR="${{ env.MODULE }}/src/main/java"
          if [ ! -d "${SRC_DIR}" ] || [ "$(find "${SRC_DIR}" -type f \( -name '*.kt' -o -name '*.java' \) | wc -l)" -eq 0 ]; then
            echo "No Kotlin/Java sources under ${SRC_DIR}"; exit 1
          fi

          # 至少有一份布局/资源
          RES_DIR="${{ env.MODULE }}/src/main/res"
          if [ ! -d "${RES_DIR}" ] || [ "$(find "${RES_DIR}" -type f | wc -l)" -eq 0 ]; then
            echo "No resources under ${RES_DIR}"; exit 1
          fi

          echo "Pre-check passed."

      # -------- 编译：关闭收缩，尽量保留内容，避免被优化成“空” -------
      - name: Build (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew :${{ env.MODULE }}:assembleRelease \
            -Pandroid.enableR8=false \
            -Pandroid.enableProguard=false \
            -PciBuild=true \
            --no-daemon --stacktrace

      # -------- 终检：APK 内容体量阈值（classes.dex、res/），不达标直接失败 -------
      - name: Verify release APK exists and size
        id: verify
        shell: bash
        run: |
          set -euo pipefail
          APK=$(ls ${{ env.MODULE }}/build/outputs/apk/release/*-release*.apk | head -n1 || true)
          test -f "${APK}" || { echo "Release APK not found"; exit 1; }

          # 计算 classes.dex 字节数
          DEX_BYTES=$(unzip -p "${APK}" classes.dex | wc -c | tr -d ' ')
          # 计算 res/ 下所有文件总字节（用 unzip -Z -v）
          RES_BYTES=$(unzip -Z -v "${APK}" | awk '/ res\// {sum+=$7} END{print sum+0}')

          echo "APK: ${APK}"
          echo "classes.dex bytes: ${DEX_BYTES}"
          echo "res/ bytes: ${RES_BYTES}"

          # 阈值（可按实际模板微调）
          MIN_DEX=50000     # 50KB
          MIN_RES=10000     # 10KB

          if [ "${DEX_BYTES}" -lt "${MIN_DEX}" ]; then
            echo "::error ::classes.dex too small (${DEX_BYTES} < ${MIN_DEX}) -> treat as empty APK"; exit 1
          fi
          if [ "${RES_BYTES}" -lt "${MIN_RES}" ]; then
            echo "::error ::res/ too small (${RES_BYTES} < ${MIN_RES}) -> treat as empty APK"; exit 1
          fi

          echo "apk_path=${APK}" >> "${GITHUB_OUTPUT}"
          echo "Content checks passed."

      - name: Upload unsigned APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.verify.outputs.apk_path }}
          if-no-files-found: error
