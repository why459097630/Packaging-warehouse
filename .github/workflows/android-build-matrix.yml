name: Android CI (non-empty-apk with content-pack)

on:
  push:
    branches: [ main ]
    paths:
      - 'content-packs/**'                   # 👈 API 写入的文件，push 时自动触发
      - '.github/workflows/android-build-matrix.yml'
      - 'app/**'
      - 'android/**'
      - 'gradle/**'
      - 'build.gradle*'
      - 'settings.gradle*'
  repository_dispatch:
    types: [build-apk]                       # 👈 API 的 repository_dispatch 事件
  workflow_dispatch:
    inputs:
      template:
        description: 'template name'
        required: false
      commit_sha:
        description: 'content commit sha'
        required: false

permissions:
  contents: read
  actions: read

concurrency:
  group: android-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # 允许你通过 workflow_dispatch 传模板；不是必须
      TEMPLATE_NAME: ${{ github.event.inputs.template }}
      # 产物上传的名字
      ARTIFACT_NAME: apk-output

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print event & payload
        run: |
          echo "event: ${{ github.event_name }}"
          echo "payload: ${{ toJson(github.event.client_payload) }}"
          ls -la
          ls -la content-packs || true
          test -f content-packs/current.json && cat content-packs/current.json || echo "no content-packs/current.json"

      # Java 17（Android Gradle Plugin 8+ 推荐）
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 安装 Android SDK（更稳的预置 Action，避免你之前遇到的 pipe 错误）
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Gradle 缓存
      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Ensure gradlew executable
        run: |
          chmod +x ./gradlew || true

      # ===== 注入内容包（关键）=====
      - name: Inject content pack into assets
        shell: bash
        run: |
          set -e
          if [[ -f content-packs/current.json ]]; then
            echo "Found content-packs/current.json"
            # 原生 Android 常见目录
            mkdir -p app/src/main/assets || true
            cp -f content-packs/current.json app/src/main/assets/content.json 2>/dev/null || true

            # React Native 常见目录
            mkdir -p android/app/src/main/assets || true
            cp -f content-packs/current.json android/app/src/main/assets/content.json 2>/dev/null || true

            echo "Content pack copied to assets (if paths exist)."
          else
            echo "::warning::content-packs/current.json not found, build will continue but may produce empty app."
          fi

      # ===== 非空校验，避免空 APK =====
      - name: Pre-build non-empty gate
        shell: bash
        run: |
          set -e
          TARGETS=()
          [[ -f app/src/main/assets/content.json ]] && TARGETS+=("app/src/main/assets/content.json")
          [[ -f android/app/src/main/assets/content.json ]] && TARGETS+=("android/app/src/main/assets/content.json")

          if [[ ${#TARGETS[@]} -eq 0 ]]; then
            echo "::warning::No assets content.json found. Trying to continue, but this likely leads to empty APK."
            exit 0
          fi

          for f in "${TARGETS[@]}"; do
            if [[ ! -s "$f" ]]; then
              echo "::error::$f exists but is empty -> failing to prevent empty APK."
              exit 1
            fi
            echo "OK non-empty: $f"
          done

      # ===== 可选：签名（存在才执行），否则走 Debug =====
      - name: Decode release keystore (optional)
        if: ${{ secrets.RELEASE_KEYSTORE_BASE64 && secrets.RELEASE_KEYSTORE_PASSWORD && secrets.RELEASE_KEY_ALIAS && secrets.RELEASE_KEY_ALIAS_PASSWORD }}
        shell: bash
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > release.keystore
          ls -la release.keystore

      - name: Build (release if signed; else debug)
        shell: bash
        env:
          # 供 Gradle 读取的签名信息（按你工程里 signingConfig 的变量命名需要）
          KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.RELEASE_KEY_ALIAS_PASSWORD }}
        run: |
          set -e
          if [[ -f release.keystore ]]; then
            echo "== Building release =="
            # 如果你的工程里 signingConfig 使用的是环境变量，这里确保 gradle 脚本能读到
            export ANDROID_KEYSTORE=$(pwd)/release.keystore
            ./gradlew --no-daemon assembleRelease
          else
            echo "== No keystore, building debug =="
            ./gradlew --no-daemon assembleDebug
          fi

      - name: Locate APKs
        id: apks
        shell: bash
        run: |
          set -e
          echo "APK list:"
          find . -type f -name "*.apk" -print | tee /tmp/apk-list.txt
          COUNT=$(wc -l </tmp/apk-list.txt | tr -d ' ')
          if [[ "$COUNT" -eq 0 ]]; then
            echo "::error::No APK produced."
            exit 1
          fi
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            **/*.apk
          if-no-files-found: error
