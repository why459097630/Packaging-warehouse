name: android-build-matrix

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_VERSION: '17'
      # 统一使用 Runner 自带的 SDK 路径
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      APP_DIR: app   # 如果你的模块不是 app，这里改成真实模块名

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # === 仅使用 Runner 自带 SDK，统一路径 ===
      - name: Accept licenses & ensure build-tools/platforms exist
        run: |
          set -eux
          echo "ANDROID_HOME=$ANDROID_HOME"
          ls -la "$ANDROID_HOME" || true

          # 有些镜像上 cmdline-tools 已经有 latest，如果没有就列个目录帮助排错
          if [ ! -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "cmdline-tools/latest not found, listing available:"
            ls -R "$ANDROID_HOME/cmdline-tools" || true
          fi

          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "build-tools;34.0.0" \
            "platforms;android-34"

      # === 探针文件：确保资源路径可被打进包 ===
      - name: Debug probe — add marker files
        run: |
          set -eux
          mkdir -p "$APP_DIR/src/main/assets/generated"
          mkdir -p "$APP_DIR/src/main/res/raw"
          echo "probe $(date -u +%FT%TZ)" > "$APP_DIR/src/main/assets/generated/__probe.txt"
          echo '{ "probe": true, "time": "'"$(date -u +%FT%TZ)"'" }' > "$APP_DIR/src/main/res/raw/probe.json"
          echo "Tree of $APP_DIR/src/main:"
          ls -R "$APP_DIR/src/main" | sed -n '1,200p'

      - name: Build (assembleRelease + bundleRelease)
        run: |
          set -eux
          chmod +x gradlew
          ./gradlew --no-daemon assembleRelease bundleRelease

      - name: Verify packaged assets
        run: |
          set -eux
          APK="$APP_DIR/build/outputs/apk/release/${APP_DIR##*/}-release.apk"
          if [ ! -f "$APK" ] && [ -f "$APP_DIR/build/outputs/apk/release/app-release.apk" ]; then
            APK="$APP_DIR/build/outputs/apk/release/app-release.apk"
          fi
          if [ ! -f "$APK" ]; then
            echo "!! APK not found under $APP_DIR/build/outputs/apk/release"
            ls -l "$APP_DIR/build/outputs/apk/release" || true
            exit 1
          fi

          echo "=== List first 200 entries in APK ==="
          unzip -l "$APK" | sed -n '1,200p'

          echo "=== Check for our expected entries ==="
          unzip -l "$APK" | egrep 'assets/generated/(catalog\.json|about\.md|__probe\.txt)|res/raw/(catalog\.json|about_md\.txt|probe\.json)' || true

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.APP_DIR }}/build/outputs/apk/release/*.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: aab
          path: ${{ env.APP_DIR }}/build/outputs/bundle/release/*.aab
