name: android-build-matrix

on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-apk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 读取前端传来的 payload；兼容驼峰/下划线
      - name: Extract inputs
        id: in
        shell: bash
        run: |
          echo "template=${{ github.event.client_payload.template }}" >> "$GITHUB_OUTPUT"
          echo "app_name=${{ github.event.client_payload.app_name || github.event.client_payload.appName }}" >> "$GITHUB_OUTPUT"
          echo "api_base=${{ github.event.client_payload.api_base || github.event.client_payload.apiBase }}" >> "$GITHUB_OUTPUT"
          echo "api_secret=${{ github.event.client_payload.api_secret || github.event.client_payload.apiSecret }}" >> "$GITHUB_OUTPUT"

      # 打印解析结果（secret 为空时不 add-mask，避免 warning）
      - name: Show resolved inputs (masked)
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          if [ -n "$API_SECRET" ]; then echo "::add-mask::$API_SECRET"; fi
          echo "[inputs] template = $TEMPLATE"
          echo "[inputs] app_name = $APP_NAME"
          echo "[inputs] api_base  = $API_BASE"
          echo "[inputs] api_secret = " $([ -n "$API_SECRET" ] && echo "(masked)" || echo "(empty)")

      # 检查模板目录
      - name: Check template directory exists
        shell: bash
        run: |
          set -e
          test -d "templates/${{ steps.in.outputs.template }}" || { echo "Template not found: templates/${{ steps.in.outputs.template }}"; exit 1; }

      # 确保 gradlew 可执行
      - name: Ensure gradlew executable
        shell: bash
        run: chmod +x "templates/${{ steps.in.outputs.template }}/gradlew" || true

      # 用 Python 安全写入 strings.xml / styles.xml（避免 heredoc 引起的 YAML 解析问题）
      - name: Inject API data into template (safe)
        env:
          TEMPLATE:  ${{ steps.in.outputs.template }}
          APP_NAME:  ${{ steps.in.outputs.app_name }}
          API_BASE:  ${{ steps.in.outputs.api_base }}
          API_SECRET: ${{ steps.in.outputs.api_secret }}
        shell: bash
        run: |
          python3 - <<'PY'
          import os, re, html, pathlib
          tpl = os.getenv('TEMPLATE')
          app = os.getenv('APP_NAME') or 'NDJC App'
          base = os.getenv('API_BASE') or ''
          sec  = os.getenv('API_SECRET') or ''
          def esc(x): return html.escape(x, quote=True)

          root   = pathlib.Path(f"templates/{tpl}/app/src/main")
          values = root / "res" / "values"
          values.mkdir(parents=True, exist_ok=True)
          strings = values / "strings.xml"
          styles  = values / "styles.xml"

          # 读取/初始化 strings.xml
          if strings.exists():
              txt = strings.read_text(encoding="utf-8")
          else:
              txt = '<?xml version="1.0" encoding="utf-8"?>\n<resources>\n</resources>\n'

          # 删除旧条目
          for key in ("app_name","api_base","api_secret"):
              txt = re.sub(r'\s*<string name="%s">.*?</string>\s*' % key, '\n', txt, flags=re.S)

          # 在 </resources> 前插入新条目（带 XML 转义）
          insert = (
              f'    <string name="app_name">{esc(app)}</string>\n'
              f'    <string name="api_base">{esc(base)}</string>\n'
              f'    <string name="api_secret">{esc(sec)}</string>\n'
          )
          txt = txt.replace('</resources>', insert + '</resources>')
          strings.write_text(txt, encoding="utf-8")

          # styles.xml 不存在则补一个主题，避免编译缺资源
          if not styles.exists():
              styles.write_text(
                  '<?xml version="1.0" encoding="utf-8"?>\n'
                  '<resources>\n'
                  '  <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar"/>\n'
                  '</resources>\n',
                  encoding="utf-8"
              )
          PY

      - name: Build debug APK
        working-directory: templates/${{ steps.in.outputs.template }}
        shell: bash
        run: ./gradlew clean assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ steps.in.outputs.template }}
          path: templates/${{ steps.in.outputs.template }}/app/build/outputs/apk/debug/*.apk

      - name: Upload values for audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ steps.in.outputs.template }}
          path: |
            templates/${{ steps.in.outputs.template }}/app/src/main/res/values/strings.xml
            templates/${{ steps.in.outputs.template }}/app/src/main/res/values/styles.xml
