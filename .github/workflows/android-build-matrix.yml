name: Android Build (NDJC)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # 图标相关（可选）
      NDJC_APP_ICON_GEN_PROVIDER: "${{ vars.NDJC_APP_ICON_GEN_PROVIDER || 'none' }}"
      NDJC_APP_ICON_PROMPT: "${{ vars.NDJC_APP_ICON_PROMPT || '' }}"
      NDJC_APP_ICON_PNG: "${{ vars.NDJC_APP_ICON_PNG || '' }}"
      NDJC_APP_ICON_PADDING: "${{ vars.NDJC_APP_ICON_PADDING || '0.10' }}"
      NDJC_ARTIFACT_NAME: "${{ vars.NDJC_ARTIFACT_NAME || 'app-release.apk' }}"
      # 当 ANDROID_KEYSTORE_BASE64 有值时开启签名
      SIGNING_ENABLED: "${{ secrets.ANDROID_KEYSTORE_BASE64 != '' && 'true' || 'false' }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: gradle/gradle-build-action@v2

      - name: Ensure ImageMagick & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick jq

      # ---------- (可选) AI 生成图标 ----------
      - name: Generate icon via AI (optional)
        if: ${{ env.NDJC_APP_ICON_GEN_PROVIDER != 'none' && env.NDJC_APP_ICON_PNG == '' }}
        env:
          API_KEY: ${{ secrets.ICON_GEN_API_KEY }}
          PROMPT: ${{ env.NDJC_APP_ICON_PROMPT }}
        run: |
          set -e
          mkdir -p app
          P="${PROMPT}. Single app icon, flat, centered, no text, no watermark, transparent background."
          curl -sS -X POST https://api.openai.com/v1/images/generations \
            -H "Authorization: Bearer ${API_KEY}" -H "Content-Type: application/json" \
            -d "{\"model\":\"gpt-image-1\",\"prompt\":\"${P}\",\"size\":\"1024x1024\",\"background\":\"transparent\"}" \
            | jq -r '.data[0].b64_json' | base64 -d > app/icon.png || true
          if [ ! -s app/icon.png ]; then
            echo "::warning::AI icon failed, will fallback to SVG if present"
          fi

      # ---------- 切片：app/icon.png 或 app/icon.svg → mipmap ----------
      - name: Build launcher foregrounds
        run: |
          set -e
          mkdir -p app/src/main/res/mipmap-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}
          SRC="app/icon.png"
          if [ ! -f "$SRC" ]; then SRC="app/icon.svg"; fi
          if [ ! -f "$SRC" ]; then
            echo "::notice::No icon source found (app/icon.png or app/icon.svg). Skipping foreground generation."
          else
            for pair in mdpi:108 hdpi:162 xhdpi:216 xxhdpi:324 xxxhdpi:432; do
              F=$(echo "$pair" | cut -d: -f1)
              SZ=$(echo "$pair" | cut -d: -f2)
              convert -background none -size ${SZ}x${SZ} "$SRC" \
                -gravity center -extent ${SZ}x${SZ} "app/src/main/res/mipmap-$F/ic_launcher_foreground.png"
            done
          fi

      # ---------- 未替换锚点检查（警告，不阻塞） ----------
      - name: Check unresolved NDJC anchors (warn only)
        run: |
          set -e
          FOUND=$(grep -R "{{NDJC_" -n app || true)
          if [ -n "$FOUND" ]; then
            echo "::warning::Found unresolved anchors:"
            echo "$FOUND"
          fi

      # ---------- 准备 release.keystore（当 SIGNING_ENABLED=true） ----------
      - name: Prepare release keystore (if provided)
        if: ${{ env.SIGNING_ENABLED == 'true' }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -e
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/release.keystore
          ls -l app/release.keystore

      # ---------- 构建（签名由 Gradle 按 SIGNING_ENABLED 决定） ----------
      - name: Build (assembleRelease)
        env:
          SIGNING_ENABLED: ${{ env.SIGNING_ENABLED }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ./gradlew :app:assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NDJC_ARTIFACT_NAME }}
          path: app/build/outputs/apk/release/*.apk
