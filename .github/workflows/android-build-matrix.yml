name: Android CI (robust + no-empty-apk)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Install tools (jq, unzip)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      # 读取 marker（由 /api/generate-apk.ts 写入的 JSON）
      - name: Determine template & prompt from marker (robust)
        id: marker
        shell: bash
        run: |
          set -euo pipefail

          # 找到最新的 marker JSON
          MARKER_FILE=$(ls -1 app/src/main/assets/build_marker_*.json 2>/dev/null | sort | tail -n1 || true)
          if [[ -z "${MARKER_FILE:-}" ]]; then
            echo "❌ No marker json (app/src/main/assets/build_marker_*.json) found."
            exit 1
          fi

          echo "Found marker: ${MARKER_FILE}"

          TEMPLATE=$(jq -r '.template // empty' "$MARKER_FILE" || true)
          PROMPT=$(jq -r '.prompt // empty' "$MARKER_FILE" || true)

          if [[ -z "${TEMPLATE:-}" ]]; then
            echo "❌ Invalid or missing 'template' in marker."
            exit 1
          fi
          case "$TEMPLATE" in
            core-template|form-template|simple-template) ;;
            *) echo "❌ Invalid template '$TEMPLATE' (must be core-template|form-template|simple-template)"; exit 1;;
          esac

          if [[ -z "${PROMPT:-}" || ${#PROMPT} -lt 10 ]]; then
            echo "❌ 'prompt' too short or missing in marker."
            exit 1
          fi

          echo "template=$TEMPLATE" >> "$GITHUB_OUTPUT"
          echo "marker=$MARKER_FILE" >> "$GITHUB_OUTPUT"

      # 把对应模板复制到 app/
      - name: Apply template to app/
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ steps.marker.outputs.template }}"
          echo "Applying template: $TEMPLATE"
          rsync -a --delete "templates/${TEMPLATE}/" "app/"

      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew --version

      - name: Build (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :app:assembleRelease --stacktrace --no-daemon

      # 按不同模板加载最小体积阈值（字节）
      - name: Load template-specific APK size threshold (optional)
        id: size
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="${{ steps.marker.outputs.template }}"
          case "$TEMPLATE" in
            core-template)   MIN=3000000 ;;  # 3.0 MB
            form-template)   MIN=2000000 ;;  # 2.0 MB
            simple-template) MIN=1200000 ;;  # 1.2 MB
            *) MIN=1000000 ;;
          esac
          echo "min=${MIN}" >> "$GITHUB_OUTPUT"

      # 必须存在且达到最小体积
      - name: Verify release APK exists and size
        id: apks
        shell: bash
        run: |
          set -euo pipefail
          APK=$(ls -1 app/build/outputs/apk/release/*-release.apk 2>/dev/null | head -n1 || true)
          if [[ -z "${APK:-}" ]]; then
            echo "❌ No release APK produced."
            exit 1
          fi
          echo "apk=${APK}" >> "$GITHUB_OUTPUT"
          BYTES=$(stat -c%s "$APK")
          echo "APK size: $BYTES bytes"
          MIN=${{ steps.size.outputs.min }}
          if [[ "$BYTES" -lt "$MIN" ]]; then
            echo "❌ APK too small ($BYTES < $MIN) — likely empty."
            exit 1
          fi
          echo "✅ Size gate passed."

      # 深度校验：APK 内必须包含我们打入的 marker JSON
      - name: Deep verify APK contents (no-empty-apk hard gate)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.apks.outputs.apk }}"
          MARKER_BASENAME=$(basename "${{ steps.marker.outputs.marker }}")
          echo "Checking assets for: assets/${MARKER_BASENAME}"
          if ! unzip -l "$APK" | grep -q "assets/${MARKER_BASENAME}"; then
            echo "❌ Marker file not found inside APK assets — build likely did not include content."
            exit 1
          fi
          echo "✅ Marker asset present."

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-release-apk
          path: ${{ steps.apks.outputs.apk }}
