name: Android Build (Matrix)

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "App display name"
      package_name:
        description: "Android package name"
        default: "com.example.generated"
      commit_sha:
        description: "Commit SHA that triggered the build"
      template_slug:
        description: "Template slug"
        default: "simple-template"

permissions:
  contents: write

concurrency:
  group: build-${{ github.actor }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PROJECT_DIR: .
    outputs:
      download_url: ${{ steps.out.outputs.download_url }}
      release_tag:  ${{ steps.out.outputs.release_tag }}
      run_id:       ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure gradlew executable (and fix CRLF)
        shell: bash
        run: |
          set -e
          if [ -f "./gradlew" ]; then
            sed -i 's/\r$//' gradlew || true
            chmod +x gradlew
            echo "PROJECT_DIR=." >> $GITHUB_ENV
          elif [ -f "android/gradlew" ]; then
            sed -i 's/\r$//' android/gradlew || true
            chmod +x android/gradlew
            echo "PROJECT_DIR=android" >> $GITHUB_ENV
          else
            echo "❌ gradlew not found (./gradlew or android/gradlew)" >&2
            exit 1
          fi

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Fix Android SDK path for CI
        run: |
          echo "sdk.dir=${ANDROID_SDK_ROOT:-$ANDROID_HOME}" > ${{ env.PROJECT_DIR }}/local.properties
          cat ${{ env.PROJECT_DIR }}/local.properties

      - name: Accept Android SDK licenses
        run: |
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/tools/bin/sdkmanager" --licenses || true

      - name: Build release (verbose, strict)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_android_useAndroidX: "true"
          ORG_GRADLE_PROJECT_android_enableJetifier: "true"
          ORG_GRADLE_PROJECT_android_suppressUnsupportedCompileSdk: "true"
        run: |
          set -o pipefail
          echo "== Gradle & Android env ==" && ./gradlew --version
          echo "== Verify project structure ==" && (test -f settings.gradle -o -f settings.gradle.kts) && (test -f app/build.gradle -o -f app/build.gradle.kts)
          echo "== List app tasks ==" && ./gradlew -q :app:tasks --all | sed -n '1,120p'
          echo "== Dependencies (releaseRuntimeClasspath) ==" && ./gradlew -q :app:dependencies --configuration releaseRuntimeClasspath | sed -n '1,120p'
          echo "== Build assembleRelease ==" && ./gradlew --no-daemon assembleRelease -i --stacktrace -Dorg.gradle.jvmargs="-Xmx3g -Dfile.encoding=UTF-8"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
          if-no-files-found: error
          retention-days: 30

      - name: Create Release (prerelease)
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: run-${{ github.run_id }}
          name: ${{ github.event.inputs.app_name || 'Generated App' }} · ${{ github.run_id }}
          files: ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
          draft: false
          prerelease: true

      - name: Output URL
        id: out
        run: |
          echo "release_tag=run-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "download_url=https://github.com/${{ github.repository }}/releases/tag/run-${{ github.run_id }}" >> $GITHUB_OUTPUT
