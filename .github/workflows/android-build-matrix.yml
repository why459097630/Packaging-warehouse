name: android-build-matrix

on:
  workflow_dispatch:
    inputs:
      template:       { description: 'template dir', required: true,  default: 'form-template' }
      prompt:         { description: 'prompt text',  required: true,  default: '' }
      owner:          { description: 'repo owner',   required: true,  default: 'why459097630' }
      repo:           { description: 'repo name',    required: true,  default: 'Packaging-warehouse' }
      branch:         { description: 'branch',       required: true,  default: 'main' }
      apk_name:       { description: 'APK name',     required: true,  default: 'MyApp' }
      version_name:   { description: 'versionName',  required: true,  default: '1.0.0' }
      version_code:   { description: 'versionCode',  required: true,  default: '1' }
      reason:         { description: 'reason',       required: false, default: '' }

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      TEMPLATE:      ${{ inputs.template }}
      PROMPT:        ${{ inputs.prompt }}
      OWNER:         ${{ inputs.owner }}
      REPO:          ${{ inputs.repo }}
      BRANCH:        ${{ inputs.branch }}
      APK_NAME:      ${{ inputs.apk_name }}
      VERSION_NAME:  ${{ inputs.version_name }}
      VERSION_CODE:  ${{ inputs.version_code }}
      REASON:        ${{ inputs.reason }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # ===== 生成/写入模板内容（按你的项目脚本改）=====
      - name: Generate project from template
        run: |
          echo "template=$TEMPLATE"
          echo "prompt=$PROMPT"
          # 这里调用你的生成脚本，例如：
          # bash scripts/generate_from_template.sh "$TEMPLATE" "$PROMPT" "$APK_NAME" "$VERSION_NAME" "$VERSION_CODE"

      # ===== 如果提供了签名相关 secret，则走 release 签名构建 =====
      - name: Decode release keystore
        if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != '' }}
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Build release (signed)
        if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != '' &&
               secrets.RELEASE_STORE_PASSWORD != '' &&
               secrets.RELEASE_KEY_ALIAS != '' &&
               secrets.RELEASE_KEY_PASSWORD != '' }}
        run: |
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/keystore.jks \
            -Pandroid.injected.signing.store.password='${{ secrets.RELEASE_STORE_PASSWORD }}' \
            -Pandroid.injected.signing.key.alias='${{ secrets.RELEASE_KEY_ALIAS }}' \
            -Pandroid.injected.signing.key.password='${{ secrets.RELEASE_KEY_PASSWORD }}'

      # ===== 否则退回到 debug 构建，便于先验证内容是否写入成功 =====
      - name: Build debug (fallback)
        if: ${{ !(secrets.RELEASE_KEYSTORE_BASE64 != '' &&
                  secrets.RELEASE_STORE_PASSWORD != '' &&
                  secrets.RELEASE_KEY_ALIAS != '' &&
                  secrets.RELEASE_KEY_PASSWORD != '') }}
        run: ./gradlew clean assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}-${{ env.VERSION_NAME }}-apk
          path: |
            **/app/build/outputs/apk/**/**/*.apk
            **/build/outputs/apk/**/**/*.apk
