name: Android CI (no-empty-apk with content-pack)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: android-no-empty-apk-${{ github.ref }}
  cancel-in-progress: true

env:
  # 构建期最小 APK 体积（字节），可按需要调整
  MIN_APK_BYTES: "3000000"
  # 目标 Android 平台、工具版本
  ANDROID_PLATFORM: "android-34"
  BUILD_TOOLS: "34.0.0"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # JDK 17 + Gradle 缓存
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # 安装 Android SDK（稳健：单独装需要的组件 + 自动接受 license）
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android commandline components
        shell: bash
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses >/dev/null
          sdkmanager --install "platform-tools" "platforms;${ANDROID_PLATFORM}" "build-tools;${BUILD_TOOLS}"

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 确保 gradlew 可执行，同时把模板里的 gradlew 也统一成可执行（防止 Permission denied）
      - name: Ensure gradlew executable
        shell: bash
        run: |
          set -euo pipefail
          chmod +x gradlew || true
          chmod -R +x templates/*/gradlew 2>/dev/null || true

      # 如果仓库没有 app/（或想给个兜底），用 simple-template 初始化一次
      - name: Ensure app/ exists (fallback to simple template once)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d "app" ]; then
            echo "app/ not found, bootstrap from templates/simple-template"
            rsync -av templates/simple-template/ app/
          fi

      # 关键：把 API 写入的业务内容（content_pack/app/**）合并进项目 app/
      - name: Inject content pack (if any)
        shell: bash
        run: |
          set -euo pipefail
          echo "Repo tree top-level:"
          ls -la
          if [ -d "content_pack/app" ]; then
            echo ">>> found content_pack/app, injecting into app/"
            rsync -a --delete --exclude '.git' content_pack/app/ app/
          else
            echo ">>> No content_pack/app found. Did the API commit succeed?"
          fi

      # 预构建硬闸：必须存在 Manifest 与至少一个 MainActivity.java
      - name: Pre-build hard gate (content must exist)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "app/src/main/AndroidManifest.xml" ]; then
            echo "::error::Missing app/src/main/AndroidManifest.xml (content pack not injected)."
            exit 1
          fi
          if ! find app/src/main/java -name "MainActivity.java" | grep -q .; then
            echo "::error::Missing MainActivity.java (content pack not injected)."
            exit 1
          fi
          echo "Pre-build content check passed."

      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --version

      # 优先打 release；失败时回落到 debug（避免签名配置缺失导致整个流程中断）
      - name: Build (release -> debug fallback)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon -stacktrace :app:assembleRelease || \
          ./gradlew --no-daemon -stacktrace :app:assembleDebug

      - name: Locate APK
        id: find_apk
        shell: bash
        run: |
          set -euo pipefail
          APK="$(ls -1 app/build/outputs/apk/release/*-release*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "$APK" ]; then
            APK="$(ls -1 app/build/outputs/apk/debug/*-debug*.apk 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$APK" ]; then
            echo "::error::Cannot locate generated APK."
            exit 1
          fi
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          echo "Found APK: $APK"

      # 构建后硬闸：必须包含 classes.dex 或 resources.arsc 且体积达标
      - name: Post-build hard gate (no-empty-apk)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.find_apk.outputs.apk }}"
          BYTES="$(stat -c%s "$APK")"
          echo "APK size: $BYTES bytes (threshold: $MIN_APK_BYTES)"
          unzip -l "$APK" | tee /tmp/apk.list
          if ! grep -E "classes\.dex|resources\.arsc" /tmp/apk.list >/dev/null; then
            echo "::error::APK missing classes.dex/resources.arsc (likely empty)."
            exit 1
          fi
          if [ "$BYTES" -lt "$MIN_APK_BYTES" ]; then
            echo "::error::APK too small (< $MIN_APK_BYTES bytes)."
            exit 1
          fi
          echo "Post-build APK content/size check passed."

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-apk
          path: ${{ steps.find_apk.outputs.apk }}
          if-no-files-found: error
