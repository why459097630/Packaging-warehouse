name: Android Build (Matrix)

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "App display name"
      package_name:
        description: "Android package name"
        default: "com.example.generated"
      commit_sha:
        description: "Commit SHA that triggered the build"
      template_slug:
        description: "Template slug"
        default: "simple-template"

permissions:
  contents: write

# 按触发者串行，避免并发占满 Runner
concurrency:
  group: build-${{ github.actor }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PROJECT_DIR: .
    outputs:
      download_url: ${{ steps.out.outputs.download_url }}
      release_tag:  ${{ steps.out.outputs.release_tag }}
      run_id:       ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 识别 gradlew 所在目录并修复执行权限/CRLF
      - name: Ensure gradlew executable (and fix CRLF)
        shell: bash
        run: |
          set -e
          if [ -f "./gradlew" ]; then
            sed -i 's/\r$//' gradlew || true
            chmod +x gradlew
            echo "PROJECT_DIR=." >> $GITHUB_ENV
          elif [ -f "android/gradlew" ]; then
            sed -i 's/\r$//' android/gradlew || true
            chmod +x android/gradlew
            echo "PROJECT_DIR=android" >> $GITHUB_ENV
          else
            echo "❌ gradlew not found (./gradlew or android/gradlew)" >&2
            exit 1
          fi

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 关闭 Gradle/GHA 缓存，避免缓存服务波动告警
      - name: Setup Gradle (no cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true

      # 确保 CI 的 Android SDK 写入 local.properties，避免被仓库里的 Windows 路径覆盖
      - name: Fix Android SDK path for CI
        run: |
          echo "sdk.dir=${ANDROID_SDK_ROOT:-$ANDROID_HOME}" > ${{ env.PROJECT_DIR }}/local.properties
          cat ${{ env.PROJECT_DIR }}/local.properties

      # 预先接受 SDK 许可
      - name: Accept Android SDK licenses
        run: |
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          yes | "${ANDROID_SDK_ROOT:-$ANDROID_HOME}/tools/bin/sdkmanager" --licenses || true

      # 关键：为 release 使用的 debug 签名生成 debug.keystore（否则 validateSigningRelease 会失败）
      - name: Ensure Android debug keystore
        shell: bash
        run: |
          set -e
          mkdir -p "${HOME}/.android"
          if [ ! -f "${HOME}/.android/debug.keystore" ]; then
            keytool -genkeypair -alias AndroidDebugKey \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US" \
              -storetype JKS \
              -keystore "${HOME}/.android/debug.keystore" \
              -storepass android -keypass android
          fi
          echo "ANDROID_DEBUG_KEYSTORE=${HOME}/.android/debug.keystore" >> $GITHUB_ENV

      # 兜底把 Gradle Wrapper 的网络超时调到 10 分钟
      - name: Set wrapper timeout env
        run: |
          echo "GRADLE_OPTS=-Dorg.gradle.wrapper.networkTimeout=600000" >> $GITHUB_ENV
          echo "JAVA_TOOL_OPTIONS=-Dorg.gradle.wrapper.networkTimeout=600000" >> $GITHUB_ENV

      # 预热 wrapper，并重试 3 次，避免偶发网络抖动
      - name: Pre-warm Gradle wrapper (with retry)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          for i in 1 2 3; do
            echo "Warm-up attempt $i ..."
            if ./gradlew --version; then
              echo "Gradle wrapper ready."
              break
            fi
            sleep $((i * 10))
          done

      # 正式构建（严格/详细日志，便于定位问题）
      - name: Build release (verbose, strict)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_android_useAndroidX: "true"
          ORG_GRADLE_PROJECT_android_enableJetifier: "true"
          ORG_GRADLE_PROJECT_android_suppressUnsupportedCompileSdk: "true"
        run: |
          set -o pipefail
          echo "== Gradle & Android env ==" && ./gradlew --version
          echo "== Verify project structure ==" && (test -f settings.gradle -o -f settings.gradle.kts) && (test -f app/build.gradle -o -f app/build.gradle.kts)
          echo "== List app tasks ==" && ./gradlew -q :app:tasks --all | sed -n '1,120p'
          echo "== Dependencies (releaseRuntimeClasspath) ==" && ./gradlew -q :app:dependencies --configuration releaseRuntimeClasspath | sed -n '1,120p'
          echo "== Build assembleRelease ==" && ./gradlew --no-daemon assembleRelease -i --stacktrace -Dorg.gradle.jvmargs="-Xmx3g -Dfile.encoding=UTF-8"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
          if-no-files-found: error
          retention-days: 30

      - name: Create Release (prerelease)
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: run-${{ github.run_id }}
          name: ${{ github.event.inputs.app_name || 'Generated App' }} · ${{ github.run_id }}
          files: ${{ env.PROJECT_DIR }}/app/build/outputs/**/*.apk
          draft: false
          prerelease: true

      - name: Output URL
        id: out
        run: |
          echo "release_tag=run-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "download_url=https://github.com/${{ github.repository }}/releases/tag/run-${{ github.run_id }}" >> $GITHUB_OUTPUT
