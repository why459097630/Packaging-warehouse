name: Android CI (matrix)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1) 拉代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # 3) Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # 4) Gradle 缓存
      - name: Gradle cache
        uses: gradle/gradle-build-action@v3

      # 5) gradlew 可执行
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # ====== 关键：根据 marker 选择模板 -> 应用模板 -> 校验非空 -> 修补 namespace ======

      - name: Determine template from marker
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          MARKER="app/src/main/assets/build_marker.txt"
          if [[ ! -f "$MARKER" ]]; then
            echo "::error::Missing $MARKER (示例: 'generate with core-template')"
            exit 1
          fi
          tmpl=$(awk '{print $NF}' "$MARKER")
          case "$tmpl" in
            core-template|form-template|simple-template) : ;;
            *) echo "::error::Invalid template '$tmpl' (must be one of: core-template|form-template|simple-template)"; exit 1;;
          esac
          echo "template=$tmpl" >> "$GITHUB_OUTPUT"
          echo "Template: $tmpl"

      - name: Apply template to app/src/main
        shell: bash
        run: |
          set -euo pipefail
          tmpl="${{ steps.pick.outputs.template }}"
          src="templates/${tmpl}/app/src/main"
          dst="app/src/main"
          rm -rf "$dst"
          mkdir -p "$dst"
          if [[ ! -d "$src" ]]; then
            echo "::error::Template directory '$src' not found"
            exit 1
          fi
          rsync -a --delete "$src"/ "$dst"/
          echo "=== After copy (tree) ==="
          find "$dst" -maxdepth 4 -type f | sort

      - name: Validate module is not empty (fail-fast)
        shell: bash
        run: |
          set -euo pipefail
          MANIFEST="app/src/main/AndroidManifest.xml"
          SRC_COUNT=$(find app/src/main -type f \( -name '*.kt' -o -name '*.java' \) | wc -l | tr -d ' ')
          RES_COUNT=$(find app/src/main/res -type f | wc -l | tr -d ' ')
          ok_manifest="OK"; [[ -f "$MANIFEST" ]] || ok_manifest="MISSING"
          echo "Manifest: $ok_manifest, java/kotlin files: $SRC_COUNT, res files: $RES_COUNT"
          if [[ "$ok_manifest" != "OK" || "$SRC_COUNT" -eq 0 || "$RES_COUNT" -eq 0 ]]; then
            echo "::error::Empty module after applying template (manifest=$ok_manifest, src=$SRC_COUNT, res=$RES_COUNT)"
            echo "Dump app/src/main for diagnosis:"
            find app/src/main -maxdepth 6 -type f | sort
            exit 1
          fi

      - name: Patch Gradle namespace (Gradle 8+)
        shell: bash
        run: |
          set -euo pipefail
          APP_GRADLE="app/build.gradle"
          APP_GRADLE_KTS="app/build.gradle.kts"
          repo="${GITHUB_REPOSITORY#*/}"
          owner="${GITHUB_REPOSITORY%/*}"
          ns="com.${owner//[^a-zA-Z0-9]/}.${repo//[^a-zA-Z0-9]/}"
          if [[ -f "$APP_GRADLE" ]]; then
            if ! grep -q '^\s*namespace\s*' "$APP_GRADLE"; then
              sed -i "0,/android\s*{/{s//&\n    namespace \"$ns\"/}" "$APP_GRADLE"
              echo "Injected namespace \"$ns\" into $APP_GRADLE"
            fi
          elif [[ -f "$APP_GRADLE_KTS" ]]; then
            if ! grep -q '^\s*namespace\s*' "$APP_GRADLE_KTS"; then
              sed -i "0,/android\s*{/{s//&\n    namespace = \"$ns\"/}" "$APP_GRADLE_KTS"
              echo "Injected namespace \"$ns\" into $APP_GRADLE_KTS"
            fi
          else
            echo "::warning::No app/build.gradle(.kts) found; skip namespace patch"
          fi
          # Manifest 中如有 package=，删除以避免和 namespace 冲突
          if grep -q 'package=' app/src/main/AndroidManifest.xml; then
            sed -i 's/\s\+package="[^"]*"/ /' app/src/main/AndroidManifest.xml
            echo "Removed package=\"...\" from AndroidManifest.xml"
          fi

      # ====== 构建与产物 ======
      - name: Build (unsigned)
        run: ./gradlew --no-daemon clean :app:assembleRelease

      - name: Upload unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
