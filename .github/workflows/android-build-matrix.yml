name: Android CI Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [30]
        target: [default]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ===== Gate 0: 生成代码存在性校验（防空仓/空文件） =====
      - name: Verify generated sources exist
        run: |
          ls -lah app/src/main/java || true
          test -f generated/.ok || { echo "missing generated/.ok"; exit 1; }
          test -f app/src/main/java/com/example/meditationtimer/MainActivity.java || { echo "missing MainActivity.java"; exit 1; }
          test -s app/src/main/java/com/example/meditationtimer/MainActivity.java || { echo "MainActivity.java is empty"; exit 1; }
          test -f app/src/main/res/layout/activity_main.xml || { echo "missing activity_main.xml"; exit 1; }
          test -f app/src/main/res/values/strings.xml || { echo "missing strings.xml"; exit 1; }

      # ===== 编译 =====
      - name: Gradle Build
        run: ./gradlew --stacktrace --no-daemon assembleDebug

      # ===== Gate 1: APK 内含代码校验（防空包） =====
      - name: Verify APK contains generated code
        run: |
          APK="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"
          test -f "$APK" || { echo "No APK found in app/build/outputs/apk/debug"; exit 1; }
          echo "APK => $APK"

          # 确认 dex 中存在 MainActivity（快速粗验）
          unzip -p "$APK" classes.dex 2>/dev/null | strings | grep -q "com/example/meditationtimer/MainActivity" \
            || { echo "MainActivity not found in classes.dex"; exit 1; }

          # 用 aapt 校验 launcher Activity（权威）
          if ! command -v aapt >/dev/null 2>&1; then
            sdkmanager --install "build-tools;34.0.0"
            export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"
          fi
          PKG=$(aapt dump badging "$APK" | awk -F"'" '/package: name=/{print $2}')
          ACT=$(aapt dump badging "$APK" | awk -F"'" '/launchable-activity: name=/{print $2}')
          echo "Detected package: $PKG"
          echo "Launchable activity: $ACT"
          [ "$ACT" = "com.example.meditationtimer.MainActivity" ] || { echo "Unexpected launcher: $ACT"; exit 1; }

          # 体积兜底（过小高度可疑）
          SIZE=$(stat -c%s "$APK")
          echo "APK size: $SIZE bytes"
          [ "$SIZE" -gt 1000000 ] || { echo "APK too small (<1MB), likely empty"; exit 1; }

      # ===== 上传产物 =====
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7

      # ===== 模拟器 15s 冒烟（单行脚本，避免 /bin/sh 多行 if/fi 问题） =====
      - name: Emulator smoke run (15s crash monitor)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: pixel_5
          disable-animations: true
          script: |
            APK_PATH="$(find app/build/outputs/apk/debug -maxdepth 1 -type f -name '*.apk' | head -n 1)"; [ -n "$APK_PATH" ] || { echo "No APK under app/build/outputs/apk/debug"; exit 1; }; echo "Found APK: $APK_PATH"; adb install -r "$APK_PATH" >/dev/null; command -v aapt >/dev/null 2>&1 || { sdkmanager --install "build-tools;34.0.0"; export PATH="$ANDROID_HOME/build-tools/34.0.0:$PATH"; }; PKG="$(aapt dump badging "$APK_PATH" | awk -F\" '/package: name=/{print $2}')"; ACT="$(aapt dump badging "$APK_PATH" | awk -F\" '/launchable-activity: name=/{print $2}')"; echo "Detected package: $PKG"; echo "Detected launcher: $ACT"; adb logcat -c; adb shell am start -n "${PKG}/${ACT}"; timeout 15s sh -c 'adb logcat | tee /tmp/logcat.txt | grep -q -E "FATAL EXCEPTION|Process[[:space:]].*'"$PKG"'[[:space:]].*has died"'; RES=$?; [ "$RES" -eq 0 ] && { echo "Crash detected during smoke run:"; tail -n 200 /tmp/logcat.txt || true; exit 1; } || echo "Smoke run passed (no fatal crash in 15s)."
