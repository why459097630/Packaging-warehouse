name: Android Build (3 Templates Matrix)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        template: [simple-template, core-template, form-template]

    steps:
      # 1) 代码与模板
      - name: Checkout Packaging repo
        uses: actions/checkout@v4

      - name: Checkout safe-templates
        uses: actions/checkout@v4
        with:
          repository: why459097630/safe-templates
          path: safe-templates

      - name: Show template structure (debug)
        run: |
          echo ">>> TEMPLATE=${{ matrix.template }}"
          ROOT="safe-templates/${{ matrix.template }}"
          ls -la "$ROOT" || true
          ls -la "$ROOT/app" || true

      # 2) JDK + Android SDK + Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK (cmdline-tools)
        uses: android-actions/setup-android@v3

      - name: Install required SDK components
        shell: bash
        run: |
          set -e
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" \
                     "platforms;android-34" \
                     "build-tools;34.0.0"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.7

      # 3) 识别工程根目录（有些模板在根，有些在 app/ 下）
      - name: Detect project dir
        id: detect
        shell: bash
        run: |
          ROOT="safe-templates/${{ matrix.template }}"
          if [ -f "$ROOT/app/build.gradle" ] || [ -f "$ROOT/app/build.gradle.kts" ]; then
            echo "projectDir=$ROOT/app" >> "$GITHUB_OUTPUT"
          else
            echo "projectDir=$ROOT" >> "$GITHUB_OUTPUT"
          fi
          echo "Using projectDir=$(cat $GITHUB_OUTPUT | sed -n 's/^projectDir=//p')"

      # 4) 若缺少 wrapper，则生成；否则直接使用
      - name: Ensure Gradle wrapper exists
        working-directory: ${{ steps.detect.outputs.projectDir }}
        shell: bash
        run: |
          if [ ! -f gradlew ]; then
            echo "gradlew not found, generating wrapper..."
            gradle wrapper
          fi
          chmod +x gradlew
          ./gradlew --version

      # 5) 构建 Release APK
      - name: Build APK
        working-directory: ${{ steps.detect.outputs.projectDir }}
        shell: bash
        run: |
          ./gradlew assembleRelease --stacktrace
          echo ">>> APKs found:"
          find . -path "*/build/outputs/apk/*/*.apk" -print

      # 6) 收集 APK
      - name: Collect APKs
        shell: bash
        run: |
          mkdir -p upload/${{ matrix.template }}
          find "${{ steps.detect.outputs.projectDir }}" -path "*/build/outputs/apk/*/*.apk" \
            -exec cp {} "upload/${{ matrix.template }}/" \;
          ls -la "upload/${{ matrix.template }}"

      # 7) 上传产物（v4），名称带 commit SHA，方便后续匹配
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.template }}-apk-${{ github.sha }}
          path: upload/${{ matrix.template }}/*.apk
