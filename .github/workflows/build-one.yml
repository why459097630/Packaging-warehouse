name: Build One Template APK

on:
  workflow_dispatch:
    inputs:
      template:
        description: 'Template name (simple-template | core-template | form-template)'
        required: false
        default: 'simple-template'
      app_name:
        description: '应用名（展示名）'
        required: false
        default: '富游App'
      app_id:
        description: '包名（applicationId），如 com.fy.travel'
        required: false
        default: 'com.fy.travel'
      versionName:
        description: '版本名（可选），如 1.0.3'
        required: false
        default: ''
      versionCode:
        description: '版本号（可选，整数），如 103'
        required: false
        default: ''
      sign_release:
        description: '是否使用Secrets中的签名信息进行release签名（true/false）'
        required: false
        default: 'false'
      upload_release:
        description: '是否创建GitHub Release并上传APK（true/false）'
        required: false
        default: 'false'
  push:
    paths:
      - 'templates/**'
      - '.github/workflows/build-one.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select template & copy app
        shell: bash
        run: |
          set -e
          TEMPLATE="${{ github.event.inputs.template || 'simple-template' }}"
          echo "Using template: ${TEMPLATE}"
          test -d "templates/${TEMPLATE}/app" || { echo "templates/${TEMPLATE}/app 不存在"; exit 1; }
          rm -rf app
          cp -r "templates/${TEMPLATE}/app" ./app
          echo "Template copied."

      - name: Setup JDK 17 (with Gradle cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ===== 注入 应用名/包名/版本号 =====
      - name: Inject app_id / app_name / version
        shell: bash
        run: |
          set -e
          APP_ID="${{ github.event.inputs.app_id }}"
          APP_NAME="${{ github.event.inputs.app_name }}"
          VNAME="${{ github.event.inputs.versionName }}"
          VCODE="${{ github.event.inputs.versionCode }}"
          AGB="app/build.gradle"
          STR="app/src/main/res/values/strings.xml"
          MAN="app/src/main/AndroidManifest.xml"

          echo "== 注入包名 =="
          if grep -q 'applicationId "' "$AGB"; then
            sed -i "s/applicationId \".*\"/applicationId \"${APP_ID//\//\\/}\"/g" "$AGB"
          else
            # 在 defaultConfig 中补一行 applicationId
            awk -v id="${APP_ID}" '
              BEGIN{inDefault=0}
              /defaultConfig *\{/ {inDefault=1}
              {print}
              inDefault==1 && /{/ && !seen {print "        applicationId \"" id "\""; seen=1}
              /}/ && inDefault==1 {inDefault=0}
            ' "$AGB" > "$AGB.tmp" && mv "$AGB.tmp" "$AGB"
          fi

          echo "== 注入应用名 =="
          if [ -f "$STR" ] && grep -q 'name="app_name"' "$STR"; then
            sed -i 's#<string name="app_name">.*</string>#<string name="app_name">'"${APP_NAME//\//\\/}"'</string>#g' "$STR"
            # 确保 manifest 使用 @string/app_name
            sed -i 's/android:label="[^"]*"/android:label="@string\/app_name"/g' "$MAN" || true
          else
            sed -i 's/android:label="[^"]*"/android:label="'"${APP_NAME//\//\\/}"'"/g' "$MAN"
          fi

          echo "== 注入版本号 =="
          if [ -n "$VNAME" ]; then
            if grep -q 'versionName "' "$AGB"; then
              sed -i "s/versionName \".*\"/versionName \"${VNAME//\//\\/}\"/g" "$AGB"
            else
              awk -v v="${VNAME}" '
                BEGIN{inDefault=0}
                /defaultConfig *\{/ {inDefault=1}
                {print}
                inDefault==1 && /{/ && !seen {print "        versionName \"" v "\""; seen=1}
                /}/ && inDefault==1 {inDefault=0}
              ' "$AGB" > "$AGB.tmp" && mv "$AGB.tmp" "$AGB"
            fi
          fi

          if [ -n "$VCODE" ]; then
            if grep -q 'versionCode ' "$AGB"; then
              sed -i "s/versionCode [0-9][0-9]*/versionCode ${VCODE}/g" "$AGB"
            else
              awk -v v="${VCODE}" '
                BEGIN{inDefault=0}
                /defaultConfig *\{/ {inDefault=1}
                {print}
                inDefault==1 && /{/ && !seen {print "        versionCode " v; seen=1}
                /}/ && inDefault==1 {inDefault=0}
              ' "$AGB" > "$AGB.tmp" && mv "$AGB.tmp" "$AGB"
            fi
          fi

          echo "== 注入完成，关键片段 =="
          head -n 120 "$AGB" || true
          echo "--- Manifest ---"; head -n 60 "$MAN" || true
          echo "--- strings.xml ---"; head -n 60 "$STR" || true

      # =====（可选）签名：用 Secrets 构建 release-signing.gradle 并应用 =====
      # 需要在仓库 Secrets 配置：
      # RELEASE_KEYSTORE_B64（keystore的Base64），KEY_ALIAS，KEY_PASS，STORE_PASS
      - name: Configure release signing (optional)
        if: ${{ inputs.sign_release == 'true' }}
        shell: bash
        env:
          KS_B64: ${{ secrets.RELEASE_KEYSTORE_B64 }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASS: ${{ secrets.KEY_PASS }}
          STORE_PASS: ${{ secrets.STORE_PASS }}
        run: |
          set -e
          test -n "$KS_B64" || { echo "缺少 RELEASE_KEYSTORE_B64 Secret"; exit 1; }
          mkdir -p app/keystore
          echo "$KS_B64" | base64 -d > app/keystore/release.keystore

          cat > app/release-signing.gradle <<'GRAD'
          android {
              signingConfigs {
                  release {
                      storeFile file("keystore/release.keystore")
                      storePassword System.getenv("STORE_PASS")
                      keyAlias System.getenv("KEY_ALIAS")
                      keyPassword System.getenv("KEY_PASS")
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          GRAD

          # 在 app/build.gradle 末尾 apply（避免复杂sed）
          echo -e "\napply from: 'release-signing.gradle'\n" >> app/build.gradle
          echo "Signing configured."

      - name: List Gradle tasks (debug)
        run: ./gradlew :app:tasks --no-daemon || true

      - name: Build Release APK
        run: ./gradlew :app:assembleRelease --no-daemon

      - name: Upload artifact (APK)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.template }}-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          compression-level: 0

      # =====（可选）发布到 GitHub Release =====
      - name: Create GitHub Release (optional)
        if: ${{ inputs.upload_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.versionName || '0.0.' }}${{ github.run_number }}
          name: "Android APK · ${{ inputs.template }} · ${{ inputs.versionName || '0.0.' }}${{ github.run_number }}"
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/release/*.apk
