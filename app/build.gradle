// app/build.gradle  —— 安全签名 & compileSdkVersion 已修复版

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android' // 如果项目没用 Kotlin，删掉这行也行
}

android {
    namespace "com.whys.packaging"   // 按你项目实际包名改
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.whys.packaging" // 按需修改
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
    }

    // ---- 签名配置：有就用，没有就自动回退到 debug，不会构建失败 ----
    signingConfigs {
        // 默认 debug 签名（始终可用）
        debug {
            // Android 默认 debug keystore
            storeFile file(System.getenv("DEBUG_KEYSTORE") ?: "${System.properties['user.home']}/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        // 尝试从 CI 环境变量 / 本地 gradle.properties 读取 release 签名
        release {
            // 1) CI 路径优先：workflow 注入 ANDROID_KEYSTORE_FILE 指向已解码的 keystore 文件
            def ksFileEnv = System.getenv("ANDROID_KEYSTORE_FILE")
            def ksFileProp = project.findProperty("RELEASE_STORE_FILE")    // 2) 本地 gradle.properties 兜底

            def finalKsFile = ksFileEnv ? file(ksFileEnv) : (ksFileProp ? file(ksFileProp) : null)

            if (finalKsFile != null && finalKsFile.exists()) {
                storeFile finalKsFile
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD") ?: (project.findProperty("RELEASE_STORE_PASSWORD") ?: "")
                keyAlias      System.getenv("ANDROID_KEY_ALIAS")           ?: (project.findProperty("RELEASE_KEY_ALIAS")      ?: "")
                keyPassword   System.getenv("ANDROID_KEY_PASSWORD")        ?: (project.findProperty("RELEASE_KEY_PASSWORD")   ?: "")
                v1SigningEnabled true
                v2SigningEnabled true
            } else {
                // 没有 release keystore 时，保持空配置；下面 buildTypes 会自动回退到 debug 签名
                println("[signingConfigs.release] No release keystore found, will fall back to debug signing.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 如果 release 签名完整则用 release，否则退回 debug，避免因签名参数缺失导致构建失败
            if (signingConfigs.release.storeFile != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    // Java/Kotlin 版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
