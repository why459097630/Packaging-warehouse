以下是一个基本的安卓app源代码结构和JSON数据结构，用于介绍菜品的app：

**安卓app源代码结构：**

1. `MainActivity.java`：主活动，负责展示菜品列表和跳转到菜品详情页面
2. `DishActivity.java`：菜品详情页面，负责展示菜品信息和上传照片和文字介绍
3. `LoginActivity.java`：登录页面，负责用户登录和注册
4. `MessageActivity.java`：留言页面，负责展示和发送留言
5. `DishAdapter.java`：菜品适配器，负责将菜品数据绑定到列表视图
6. `DishModel.java`：菜品模型，负责存储菜品数据
7. `UserModel.java`：用户模型，负责存储用户数据

**JSON数据结构：**

1. `dish.json`：菜品数据结构
```json
{
  "id": 1,
  "name": "菜品名称",
  "description": "菜品描述",
  "price": 10.99,
  "image": "菜品图片URL"
}
```
2. `user.json`：用户数据结构
```json
{
  "id": 1,
  "username": "用户名",
  "password": "密码"
}
```
3. `message.json`：留言数据结构
```json
{
  "id": 1,
  "content": "留言内容",
  "userId": 1,
  "dishId": 1
}
```
**安卓app功能实现：**

1. 菜品列表展示：使用`DishAdapter`将菜品数据绑定到列表视图，点击菜品项跳转到菜品详情页面
2. 菜品详情页面：展示菜品信息，包括名称、描述、价格和图片；提供上传照片和文字介绍的功能
3. 登录系统：使用`LoginActivity`实现用户登录和注册，存储用户数据到`user.json`
4. 留言系统：使用`MessageActivity`展示和发送留言，存储留言数据到`message.json`

**安卓app代码示例：**

`MainActivity.java`：
```java
public class MainActivity extends AppCompatActivity {
    private ListView dishList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        dishList = (ListView) findViewById(R.id.dish_list);

        // 加载菜品数据
        List<DishModel> dishListData = loadDishData();

        // 创建菜品适配器
        DishAdapter adapter = new DishAdapter(this, dishListData);

        // 设置菜品列表适配器
        dishList.setAdapter(adapter);

        // 点击菜品项跳转到菜品详情页面
        dishList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                DishModel dish = (DishModel) parent.getItemAtPosition(position);
                Intent intent = new Intent(MainActivity.this, DishActivity.class);
                intent.putExtra("dish", dish);
                startActivity(intent);
            }
        });
    }

    private List<DishModel> loadDishData() {
        // 加载菜品数据从JSON文件
        List<DishModel> dishListData = new ArrayList<>();
        try {
            JSONArray jsonArray = new JSONArray(readJSONFile("dish.json"));
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                DishModel dish = new DishModel();
                dish.setId(jsonObject.getInt("id"));
                dish.setName(jsonObject.getString("name"));
                dish.setDescription(jsonObject.getString("description"));
                dish.setPrice(jsonObject.getDouble("price"));
                dish.setImage(jsonObject.getString("image"));
                dishListData.add(dish);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return dishListData;
    }
}
```
`DishActivity.java`：
```java
public class DishActivity extends AppCompatActivity {
    private DishModel dish;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dish);

        // 获取菜品数据
        dish = (DishModel) getIntent().getSerializableExtra("dish");

        // 展示菜品信息
        TextView nameTextView = (TextView) findViewById(R.id.name_text_view);
        nameTextView.setText(dish.getName());

        TextView descriptionTextView = (TextView) findViewById(R.id.description_text_view);
        descriptionTextView.setText(dish.getDescription());

        TextView priceTextView = (TextView) findViewById(R.id.price_text_view);
        priceTextView.setText(String.valueOf(dish.getPrice()));

        ImageView imageView = (ImageView) findViewById(R.id.image_view);
        Picasso.with(this).load(dish.getImage()).into(imageView);

        // 上传照片和文字介绍
        Button uploadButton = (Button) findViewById(R.id.upload_button);
        uploadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 上传照片和文字介绍
                Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(intent, 1);
            }
        });
    }
}
```
`LoginActivity.java`：
```java
public class LoginActivity extends AppCompatActivity {
    private EditText usernameEditText;
    private EditText passwordEditText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        usernameEditText = (EditText) findViewById(R.id.username_edit_text);
        passwordEditText = (EditText) findViewById(R.id.password_edit_text);

        Button loginButton = (Button) findViewById(R.id.login_button);
        loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 登录
                String username = usernameEditText.getText().toString();
                String password = passwordEditText.getText().toString();

                // 验证用户名和密码
                if (validateUsernameAndPassword(username, password)) {
                    // 登录成功
                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                    startActivity(intent);
                } else {
                    // 登录失败
                    Toast.makeText(LoginActivity.this, "用户名或密码错误", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private boolean validateUsernameAndPassword(String username, String password) {
        // 验证用户名和密码
        try {
            JSONArray jsonArray = new JSONArray(readJSONFile("user.json"));
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                if (jsonObject.getString("username").equals(username) && jsonObject.getString("password").equals(password)) {
                    return true;
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return false;
    }
}
```
`MessageActivity.java`：
```java
public class MessageActivity extends AppCompatActivity {
    private ListView messageList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_message);

        messageList = (ListView) findViewById(R.id.message_list);

        // 加载留言数据
        List<MessageModel> messageListData = loadMessageData();

        // 创建留言适配器
        MessageAdapter adapter = new MessageAdapter(this, messageListData);

        // 设置留言列表适配器
        messageList.setAdapter(adapter);

        // 发送留言
        Button sendButton = (Button) findViewById(R.id.send_button);
        sendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 发送留言
                EditText contentEditText = (EditText) findViewById(R.id.content_edit_text);
                String content = contentEditText.getText().toString();

                // 保存留言数据
                MessageModel message = new MessageModel();
                message.setContent(content);
                message.setUserId(1);
                message.setDishId(1);

                try {
                    JSONArray jsonArray = new JSONArray(readJSONFile("message.json"));
                    jsonArray.put(message.toJSON());
                    writeJSONFile("message.json", jsonArray.toString());
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                // 更新留言列表
                messageListData.add(message);
                adapter.notifyDataSetChanged();
            }
        });
    }

    private List<MessageModel> loadMessageData() {
        // 加载留言数据从JSON文件
        List<MessageModel> messageListData = new ArrayList<>();
        try {
            JSONArray jsonArray = new JSONArray(readJSONFile("message.json"));
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                MessageModel message = new MessageModel();
                message.setId(jsonObject.getInt("id"));
                message.setContent(jsonObject.getString("content"));
                message.setUserId(jsonObject.getInt("userId"));
                message.setDishId(jsonObject.getInt("dishId"));
                messageListData.add(message);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return messageListData;
    }
}
```
注意：以上代码仅为示例，可能需要根据实际需求进行修改和完善。